/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};

;// CONCATENATED MODULE: ./resources/not_reached.ts
// Helper Error for TypeScript situations where the programmer thinks they
// know better than TypeScript that some situation will never occur.
// The intention here is that the programmer does not expect a particular
// bit of code to happen, and so has not written careful error handling.
// If it does occur, at least there will be an error and we can figure out why.
// This is preferable to casting or disabling TypeScript altogether in order to
// avoid syntax errors.
// One common example is a regex, where if the regex matches then all of the
// (non-optional) regex groups will also be valid, but TypeScript doesn't know.
class not_reached_UnreachableCode extends Error {
  constructor() {
    super('This code shouldn\'t be reached');
  }

}
;// CONCATENATED MODULE: ./resources/languages.ts
const languages = ['en', 'de', 'fr', 'ja', 'cn', 'ko'];
const langMap = {
  en: {
    en: 'English',
    de: 'German',
    fr: 'French',
    ja: 'Japanese',
    cn: 'Chinese',
    ko: 'Korean'
  },
  de: {
    en: 'Englisch',
    de: 'Deutsch',
    fr: 'Französisch',
    ja: 'Japanisch',
    cn: 'Chinesisch',
    ko: 'Koreanisch'
  },
  fr: {
    en: 'Anglais',
    de: 'Allemand',
    fr: 'Français',
    ja: 'Japonais',
    cn: 'Chinois',
    ko: 'Coréen'
  },
  ja: {
    en: '英語',
    de: 'ドイツ語',
    fr: 'フランス語',
    ja: '日本語',
    cn: '中国語',
    ko: '韓国語'
  },
  cn: {
    en: '英语',
    de: '德语',
    fr: '法语',
    ja: '日语',
    cn: '中文',
    ko: '韩语'
  },
  ko: {
    en: '영어',
    de: '독일어',
    fr: '프랑스어',
    ja: '일본어',
    cn: '중국어',
    ko: '한국어'
  }
};
const isLang = lang => {
  const langStrs = languages;
  if (!lang) return false;
  return langStrs.includes(lang);
};
;// CONCATENATED MODULE: ./resources/pet_names.ts
// Auto-generated from gen_pet_names.ts
// DO NOT EDIT THIS FILE DIRECTLY
const data = {
  'cn': ['绿宝石兽', '黄宝石兽', '伊弗利特之灵', '泰坦之灵', '迦楼罗之灵', '朝日小仙女', '夕月小仙女', '车式浮空炮塔', '象式浮空炮塔', '亚灵神巴哈姆特', '亚灵神不死鸟', '炽天使', '月长宝石兽', '英雄的掠影', '后式自走人偶', '分身'],
  'de': ['Smaragd-Karfunkel', 'Topas-Karfunkel', 'Ifrit-Egi', 'Titan-Egi', 'Garuda-Egi', 'Eos', 'Selene', 'Selbstschuss-Gyrocopter TURM', 'Selbstschuss-Gyrocopter LÄUFER', 'Demi-Bahamut', 'Demi-Phönix', 'Seraph', 'Mondstein-Karfunkel', 'Schattenschemen', 'Automaton DAME', 'Gedoppeltes Ich'],
  'en': ['Emerald Carbuncle', 'Topaz Carbuncle', 'Ifrit-Egi', 'Titan-Egi', 'Garuda-Egi', 'Eos', 'Selene', 'Rook Autoturret', 'Bishop Autoturret', 'Demi-Bahamut', 'Demi-Phoenix', 'Seraph', 'Moonstone Carbuncle', 'Esteem', 'Automaton Queen', 'Bunshin'],
  'fr': ['Carbuncle émeraude', 'Carbuncle topaze', 'Ifrit-Egi', 'Titan-Egi', 'Garuda-Egi', 'Eos', 'Selene', 'Auto-tourelle Tour', 'Auto-tourelle Fou', 'Demi-Bahamut', 'Demi-Phénix', 'Séraphin', 'Carbuncle hécatolite', 'Estime', 'Automate Reine', 'Ombre'],
  'ja': ['カーバンクル・エメラルド', 'カーバンクル・トパーズ', 'イフリート・エギ', 'タイタン・エギ', 'ガルーダ・エギ', 'フェアリー・エオス', 'フェアリー・セレネ', 'オートタレット・ルーク', 'オートタレット・ビショップ', 'デミ・バハムート', 'デミ・フェニックス', 'セラフィム', 'カーバンクル・ムーンストーン', '英雄の影身', 'オートマトン・クイーン', '分身'],
  'ko': ['카벙클 에메랄드', '카벙클 토파즈', '이프리트 에기', '타이탄 에기', '가루다 에기', '요정 에오스', '요정 셀레네', '자동포탑 룩', '자동포탑 비숍', '데미바하무트', '데미피닉스', '세라핌', '카벙클 문스톤', '영웅의 환영', '자동인형 퀸', '분신']
};
/* harmony default export */ const pet_names = (data);
;// CONCATENATED MODULE: ./resources/netlog_defs.ts
// canAnonymize: boolean whether this line can be anonymized
// playerIds: map of indexes from a player id to the index of that player name
// isUnknown: needs more information, never seen this log
// optionalFields: a list of fields that are ok to not appear (or have invalid ids)
// firstUnknownField: fields at this index and beyond are cleared, when anonymizing
// globalInclude: include all of these lines in any split
// lastInclude: include the last line of this type in any split
const logDefinitions = {
  GameLog: {
    type: '00',
    name: 'GameLog',
    fields: {
      type: 0,
      timestamp: 1,
      code: 2,
      name: 3,
      line: 4
    },
    subFields: {
      code: {
        '0039': {
          name: 'message',
          canAnonymize: true
        },
        '0038': {
          name: 'echo',
          canAnonymize: true
        },
        '0044': {
          name: 'dialog',
          canAnonymize: true
        },
        '0839': {
          name: 'message',
          canAnonymize: true
        }
      }
    }
  },
  ChangeZone: {
    type: '01',
    name: 'ChangeZone',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3
    },
    lastInclude: true,
    canAnonymize: true
  },
  ChangedPlayer: {
    type: '02',
    name: 'ChangedPlayer',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3
    },
    playerIds: {
      2: 3
    },
    lastInclude: true,
    canAnonymize: true
  },
  AddedCombatant: {
    type: '03',
    name: 'AddedCombatant',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3,
      job: 4,
      level: 5,
      ownerId: 6,
      worldId: 7,
      world: 8,
      npcNameId: 9,
      npcBaseId: 10,
      currentHp: 11,
      hp: 12,
      currentMp: 13,
      mp: 14,
      // maxTp: 15,
      // tp: 16,
      x: 17,
      y: 18,
      z: 19,
      heading: 20
    },
    playerIds: {
      2: 3,
      6: null
    },
    canAnonymize: true
  },
  RemovedCombatant: {
    type: '04',
    name: 'RemovedCombatant',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3,
      job: 4,
      level: 5,
      owner: 6,
      world: 8,
      npcNameId: 9,
      npcBaseId: 10,
      hp: 12,
      x: 17,
      y: 18,
      z: 19,
      heading: 20
    },
    playerIds: {
      2: 3,
      6: null
    },
    canAnonymize: true
  },
  AddBuff: {
    type: '05',
    name: 'AddBuff',
    fields: {
      type: 0,
      timestamp: 1
    },
    isUnknown: true
  },
  RemoveBuff: {
    type: '06',
    name: 'RemoveBuff',
    fields: {
      type: 0,
      timestamp: 1
    },
    isUnknown: true
  },
  FlyingText: {
    type: '07',
    name: 'FlyingText',
    fields: {
      type: 0,
      timestamp: 1
    },
    isUnknown: true
  },
  OutgoingAbility: {
    type: '08',
    name: 'OutgoingAbility',
    fields: {
      type: 0,
      timestamp: 1
    },
    isUnknown: true
  },
  IncomingAbility: {
    type: '09',
    name: 'IncomingAbility',
    fields: {
      type: 0,
      timestamp: 1
    },
    isUnknown: true
  },
  PartyList: {
    type: '11',
    name: 'PartyList',
    fields: {
      type: 0,
      timestamp: 1,
      partyCount: 2,
      id0: 3,
      id1: 4,
      id2: 5,
      id3: 6,
      id4: 7,
      id5: 8,
      id6: 9,
      id7: 10,
      id8: 11,
      id9: 12,
      id10: 13,
      id11: 14,
      id12: 15,
      id13: 16,
      id14: 17,
      id15: 18,
      id16: 19,
      id17: 20,
      id18: 21,
      id19: 22,
      id20: 23,
      id21: 24,
      id22: 25,
      id23: 26
    },
    playerIds: {
      3: null,
      4: null,
      5: null,
      6: null,
      7: null,
      8: null,
      9: null,
      10: null,
      11: null,
      12: null,
      13: null,
      14: null,
      15: null,
      16: null,
      17: null,
      18: null,
      19: null,
      20: null,
      21: null,
      22: null,
      23: null,
      24: null,
      25: null,
      26: null
    },
    optionalFields: [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26],
    canAnonymize: true,
    lastInclude: true
  },
  PlayerStats: {
    type: '12',
    name: 'PlayerStats',
    fields: {
      type: 0,
      timestamp: 1,
      job: 2,
      strength: 3,
      dexterity: 4,
      vitality: 5,
      intelligence: 6,
      mind: 7,
      piety: 8,
      attackPower: 9,
      directHit: 10,
      criticalHit: 11,
      attackMagicPotency: 12,
      healMagicPotency: 13,
      determination: 14,
      skillSpeed: 15,
      spellSpeed: 16,
      tenacity: 18
    },
    canAnonymize: true,
    lastInclude: true
  },
  CombatantHP: {
    type: '13',
    name: 'CombatantHP',
    fields: {
      type: 0,
      timestamp: 1
    },
    isUnknown: true
  },
  StartsUsing: {
    type: '20',
    name: 'StartsUsing',
    fields: {
      type: 0,
      timestamp: 1,
      sourceId: 2,
      source: 3,
      id: 4,
      ability: 5,
      targetId: 6,
      target: 7,
      castTime: 8,
      x: 9,
      y: 10,
      z: 11,
      heading: 12
    },
    optionalFields: [6],
    playerIds: {
      2: 3,
      6: 7
    },
    canAnonymize: true
  },
  Ability: {
    type: '21',
    name: 'Ability',
    fields: {
      type: 0,
      timestamp: 1,
      sourceId: 2,
      source: 3,
      id: 4,
      ability: 5,
      targetId: 6,
      target: 7,
      flags: 8,
      damage: 9,
      targetCurrentHp: 24,
      targetMaxHp: 25,
      targetCurrentMp: 26,
      targetMaxMp: 27,
      // targetCurrentTp: 28,
      // targetMaxTp: 29,
      targetX: 30,
      targetY: 31,
      targetZ: 32,
      targetHeading: 33,
      currentHp: 34,
      maxHp: 35,
      currentMp: 36,
      maxMp: 37,
      // currentTp: 38;
      // maxTp: 39;
      x: 40,
      y: 41,
      z: 42,
      heading: 43
    },
    playerIds: {
      2: 3,
      6: 7
    },
    optionalFields: [6],
    firstUnknownField: 44,
    canAnonymize: true
  },
  NetworkAOEAbility: {
    type: '22',
    name: 'NetworkAOEAbility',
    fields: {
      type: 0,
      timestamp: 1,
      sourceId: 2,
      source: 3,
      id: 4,
      ability: 5,
      targetId: 6,
      target: 7,
      flags: 8,
      x: 40,
      y: 41,
      z: 42,
      heading: 43
    },
    playerIds: {
      2: 3,
      6: 7
    },
    optionalFields: [6],
    firstUnknownField: 44,
    canAnonymize: true
  },
  NetworkCancelAbility: {
    type: '23',
    name: 'NetworkCancelAbility',
    fields: {
      type: 0,
      timestamp: 1,
      sourceId: 2,
      source: 3,
      id: 4,
      name: 5,
      reason: 6
    },
    playerIds: {
      2: 3
    },
    canAnonymize: true
  },
  NetworkDoT: {
    type: '24',
    name: 'NetworkDoT',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3,
      which: 4,
      effectId: 5,
      damage: 6,
      currentHp: 7,
      maxHp: 8,
      currentMp: 9,
      maxMp: 10,
      // currentTp: 11,
      // maxTp: 12,
      x: 13,
      y: 14,
      z: 15,
      heading: 16
    },
    playerIds: {
      2: 3
    },
    canAnonymize: true
  },
  WasDefeated: {
    type: '25',
    name: 'WasDefeated',
    fields: {
      type: 0,
      timestamp: 1,
      targetId: 2,
      target: 3,
      sourceId: 4,
      source: 5
    },
    playerIds: {
      2: 3,
      4: 5
    },
    canAnonymize: true
  },
  GainsEffect: {
    type: '26',
    name: 'GainsEffect',
    fields: {
      type: 0,
      timestamp: 1,
      effectId: 2,
      effect: 3,
      duration: 4,
      sourceId: 5,
      source: 6,
      targetId: 7,
      target: 8,
      count: 9,
      targetMaxHp: 10,
      sourceMaxHp: 11
    },
    playerIds: {
      5: 6,
      7: 8
    },
    canAnonymize: true
  },
  HeadMarker: {
    type: '27',
    name: 'HeadMarker',
    fields: {
      type: 0,
      timestamp: 1,
      targetId: 2,
      target: 3,
      id: 6
    },
    playerIds: {
      2: 3
    },
    canAnonymize: true
  },
  NetworkRaidMarker: {
    type: '28',
    name: 'NetworkRaidMarker',
    fields: {
      type: 0,
      timestamp: 1,
      operation: 2,
      waymark: 3,
      id: 4,
      name: 5,
      x: 6,
      y: 7,
      z: 8
    },
    canAnonymize: true
  },
  NetworkTargetMarker: {
    type: '29',
    name: 'NetworkTargetMarker',
    fields: {
      type: 0,
      timestamp: 1,
      operation: 2,
      // Add, Update, Delete
      waymark: 3,
      id: 4,
      name: 5,
      targetId: 6,
      targetName: 7
    },
    playerIds: {
      4: null,
      5: null
    }
  },
  LosesEffect: {
    type: '30',
    name: 'LosesEffect',
    fields: {
      type: 0,
      timestamp: 1,
      effectId: 2,
      effect: 3,
      sourceId: 5,
      source: 6,
      targetId: 7,
      target: 8,
      count: 9
    },
    playerIds: {
      5: 6,
      7: 8
    },
    canAnonymize: true
  },
  NetworkGauge: {
    type: '31',
    name: 'NetworkGauge',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      data0: 3,
      data1: 4,
      data2: 5,
      data3: 6
    },
    playerIds: {
      2: null
    },
    // Sometimes this last field looks like a player id.
    // For safety, anonymize all of the gauge data.
    firstUnknownField: 3,
    canAnonymize: true
  },
  NetworkWorld: {
    type: '32',
    name: 'NetworkWorld',
    fields: {
      type: 0,
      timestamp: 1
    },
    isUnknown: true
  },
  ActorControl: {
    type: '33',
    name: 'ActorControl',
    fields: {
      type: 0,
      timestamp: 1,
      instance: 2,
      command: 3,
      data0: 4,
      data1: 5,
      data2: 6,
      data3: 7
    },
    canAnonymize: true
  },
  NameToggle: {
    type: '34',
    name: 'NameToggle',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3,
      targetId: 4,
      targetName: 5,
      toggle: 6
    },
    playerIds: {
      2: 3,
      4: 5
    },
    canAnonymize: true
  },
  Tether: {
    type: '35',
    name: 'Tether',
    fields: {
      type: 0,
      timestamp: 1,
      sourceId: 2,
      source: 3,
      targetId: 4,
      target: 5,
      id: 8
    },
    playerIds: {
      2: 3,
      4: 5
    },
    canAnonymize: true,
    firstUnknownField: 9
  },
  LimitBreak: {
    type: '36',
    name: 'LimitBreak',
    fields: {
      type: 0,
      timestamp: 1,
      valueHex: 2,
      bars: 3
    },
    canAnonymize: true
  },
  NetworkEffectResult: {
    type: '37',
    name: 'NetworkEffectResult',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3,
      sequenceId: 4,
      currentHp: 5,
      maxHp: 6,
      currentMp: 7,
      maxMp: 8,
      // currentTp: 9,
      // maxTp: 10,
      x: 11,
      y: 12,
      z: 13,
      heading: 14
    },
    playerIds: {
      2: 3
    },
    firstUnknownField: 22,
    canAnonymize: true
  },
  StatusEffect: {
    type: '38',
    name: 'StatusEffect',
    fields: {
      type: 0,
      timestamp: 1,
      targetId: 2,
      target: 3,
      jobLevelData: 4,
      hp: 5,
      maxHp: 6,
      mp: 7,
      maxMp: 8,
      x: 11,
      y: 12,
      z: 13,
      heading: 14,
      data0: 15,
      data1: 16,
      data2: 17,
      data3: 18,
      data4: 19
    },
    playerIds: {
      2: 3
    },
    firstUnknownField: 20,
    canAnonymize: true
  },
  NetworkUpdateHP: {
    type: '39',
    name: 'NetworkUpdateHP',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3,
      currentHp: 4,
      maxHp: 5,
      currentMp: 6,
      maxMp: 7,
      // currentTp: 8,
      // maxTp: 9,
      x: 10,
      y: 11,
      z: 12,
      heading: 13
    },
    playerIds: {
      2: 3
    },
    canAnonymize: true
  },
  Map: {
    type: '40',
    name: 'Map',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      regionName: 3,
      placeName: 4,
      placeNameSub: 5
    },
    canAnonymize: true
  },
  ParserInfo: {
    type: '249',
    name: 'ParserInfo',
    fields: {
      type: 0,
      timestamp: 1
    },
    globalInclude: true,
    canAnonymize: true
  },
  ProcessInfo: {
    type: '250',
    name: 'ProcessInfo',
    fields: {
      type: 0,
      timestamp: 1
    },
    globalInclude: true,
    canAnonymize: true
  },
  Debug: {
    type: '251',
    name: 'Debug',
    fields: {
      type: 0,
      timestamp: 1
    },
    globalInclude: true,
    canAnonymize: false
  },
  PacketDump: {
    type: '252',
    name: 'PacketDump',
    fields: {
      type: 0,
      timestamp: 1
    },
    canAnonymize: false
  },
  Version: {
    type: '253',
    name: 'Version',
    fields: {
      type: 0,
      timestamp: 1
    },
    globalInclude: true,
    canAnonymize: true
  },
  Error: {
    type: '254',
    name: 'Error',
    fields: {
      type: 0,
      timestamp: 1
    },
    canAnonymize: false
  },
  Timer: {
    type: '255',
    name: 'Timer',
    fields: {
      type: 0,
      timestamp: 1
    },
    isUnknown: true
  },
  None: {
    type: '[0-9]+',
    name: 'None',
    fields: {
      type: 0,
      timestamp: 1
    },
    isUnknown: true
  }
}; // Verify that this has the right type, but export `as const`.

const assertLogDefinitions = logDefinitions;
console.assert(assertLogDefinitions);
/* harmony default export */ const netlog_defs = (logDefinitions);
;// CONCATENATED MODULE: ./resources/regexes.ts
const startsUsingParams = ['timestamp', 'source', 'id', 'ability', 'target', 'capture'];
const abilityParams = ['timestamp', 'source', 'sourceId', 'id', 'ability', 'targetId', 'target', 'capture'];
const abilityFullParams = ['timestamp', 'sourceId', 'source', 'id', 'ability', 'targetId', 'target', 'flags', 'flag0', 'flag1', 'flag2', 'flag3', 'flag4', 'flag5', 'flag6', 'flag7', 'flag8', 'flag9', 'flag10', 'flag11', 'flag12', 'flag13', 'flag14', 'targetHp', 'targetMaxHp', 'targetMp', 'targetMaxMp', 'targetX', 'targetY', 'targetZ', 'targetHeading', 'hp', 'maxHp', 'mp', 'maxMp', 'x', 'y', 'z', 'heading', 'capture'];
const headMarkerParams = ['timestamp', 'targetId', 'target', 'id', 'capture'];
const addedCombatantParams = ['timestamp', 'name', 'capture'];
const addedCombatantFullParams = ['timestamp', 'id', 'name', 'job', 'level', 'hp', 'x', 'y', 'z', 'npcId', 'capture'];
const removingCombatantParams = ['timestamp', 'id', 'name', 'hp', 'x', 'y', 'z', 'capture'];
const gainsEffectParams = ['timestamp', 'targetId', 'target', 'effect', 'source', 'duration', 'capture'];
const statusEffectExplicitParams = ['timestamp', 'targetId', 'target', 'job', 'hp', 'maxHp', 'mp', 'maxMp', 'x', 'y', 'z', 'heading', 'data0', 'data1', 'data2', 'data3', 'data4', 'capture'];
const losesEffectParams = ['timestamp', 'targetId', 'target', 'effect', 'source', 'capture'];
const statChangeParams = ['timestamp', 'job', 'strength', 'dexterity', 'vitality', 'intelligence', 'mind', 'piety', 'attackPower', 'directHit', 'criticalHit', 'attackMagicPotency', 'healMagicPotency', 'determination', 'skillSpeed', 'spellSpeed', 'tenacity', 'capture'];
const tetherParams = ['timestamp', 'source', 'sourceId', 'target', 'targetId', 'id', 'capture'];
const wasDefeatedParams = ['timestamp', 'target', 'source', 'capture'];
const hasHPParams = ['timestamp', 'name', 'hp', 'capture'];
const echoParams = ['timestamp', 'code', 'line', 'capture'];
const dialogParams = ['timestamp', 'code', 'line', 'name', 'capture'];
const messageParams = ['timestamp', 'code', 'line', 'capture'];
const gameLogParams = ['timestamp', 'code', 'line', 'capture'];
const gameNameLogParams = ['timestamp', 'code', 'name', 'line', 'capture'];
const changeZoneParams = ['timestamp', 'name', 'capture'];
const network6dParams = ['timestamp', 'instance', 'command', 'data0', 'data1', 'data2', 'data3', 'capture'];
class Regexes {
  /**
   * fields: source, id, ability, target, capture
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#14-networkstartscasting
   */
  static startsUsing(f) {
    if (typeof f === 'undefined') f = {};
    Regexes.validateParams(f, 'startsUsing', startsUsingParams);
    const capture = Regexes.trueIfUndefined(f.capture);
    let str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') + ' 14:' + Regexes.maybeCapture(capture, 'id', f.id, '\\y{AbilityCode}') + ':';
    if (f.source || f.id || f.target || capture) str += Regexes.maybeCapture(capture, 'source', f.source, '.*?') + ' starts using ';
    if (f.ability || f.target || capture) str += Regexes.maybeCapture(capture, 'ability', f.ability, '.*?') + ' on ';
    if (f.target || capture) str += Regexes.maybeCapture(capture, 'target', f.target, '.*?') + '\\.';
    return Regexes.parse(str);
  }
  /**
   * fields: sourceId, source, id, ability, targetId, target, capture
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#15-networkability
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#16-networkaoeability
   */


  static ability(f) {
    if (typeof f === 'undefined') f = {};
    Regexes.validateParams(f, 'ability', abilityParams);
    const capture = Regexes.trueIfUndefined(f.capture);
    let str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') + ' 1[56]:' + Regexes.maybeCapture(capture, 'sourceId', '\\y{ObjectId}') + ':' + Regexes.maybeCapture(capture, 'source', f.source, '[^:]*?') + ':';
    if (f.id || f.ability || f.target || f.targetId || capture) str += Regexes.maybeCapture(capture, 'id', f.id, '\\y{AbilityCode}') + ':';
    if (f.ability || f.target || f.targetId || capture) str += Regexes.maybeCapture(capture, 'ability', f.ability, '[^:]*?') + ':';
    if (f.target || f.targetId || capture) str += Regexes.maybeCapture(capture, 'targetId', '\\y{ObjectId}') + ':';
    if (f.target || capture) str += Regexes.maybeCapture(capture, 'target', f.target, '[^:]*?') + ':';
    return Regexes.parse(str);
  }
  /**
   * fields: sourceId, source, id, ability, targetId, target, flags, x, y, z, heading, capture
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#15-networkability
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#16-networkaoeability
   */


  static abilityFull(f) {
    if (typeof f === 'undefined') f = {};
    Regexes.validateParams(f, 'abilityFull', abilityFullParams);
    const capture = Regexes.trueIfUndefined(f.capture);
    const str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') + ' 1[56]:' + Regexes.maybeCapture(capture, 'sourceId', f.sourceId, '\\y{ObjectId}') + ':' + Regexes.maybeCapture(capture, 'source', f.source, '[^:]*?') + ':' + Regexes.maybeCapture(capture, 'id', f.id, '\\y{AbilityCode}') + ':' + Regexes.maybeCapture(capture, 'ability', f.ability, '[^:]*?') + ':' + Regexes.maybeCapture(capture, 'targetId', f.targetId, '\\y{ObjectId}') + ':' + Regexes.maybeCapture(capture, 'target', f.target, '[^:]*?') + ':' + Regexes.maybeCapture(capture, 'flags', f.flags, '[^:]*?') + ':' + Regexes.maybeCapture(capture, 'flag0', f.flag0, '[^:]*?') + ':' + Regexes.maybeCapture(capture, 'flag1', f.flag1, '[^:]*?') + ':' + Regexes.maybeCapture(capture, 'flag2', f.flag2, '[^:]*?') + ':' + Regexes.maybeCapture(capture, 'flag3', f.flag3, '[^:]*?') + ':' + Regexes.maybeCapture(capture, 'flag4', f.flag4, '[^:]*?') + ':' + Regexes.maybeCapture(capture, 'flag5', f.flag5, '[^:]*?') + ':' + Regexes.maybeCapture(capture, 'flag6', f.flag6, '[^:]*?') + ':' + Regexes.maybeCapture(capture, 'flag7', f.flag7, '[^:]*?') + ':' + Regexes.maybeCapture(capture, 'flag8', f.flag8, '[^:]*?') + ':' + Regexes.maybeCapture(capture, 'flag9', f.flag9, '[^:]*?') + ':' + Regexes.maybeCapture(capture, 'flag10', f.flag10, '[^:]*?') + ':' + Regexes.maybeCapture(capture, 'flag11', f.flag11, '[^:]*?') + ':' + Regexes.maybeCapture(capture, 'flag12', f.flag12, '[^:]*?') + ':' + Regexes.maybeCapture(capture, 'flag13', f.flag13, '[^:]*?') + ':' + Regexes.maybeCapture(capture, 'flag14', f.flag13, '[^:]*?') + ':' + Regexes.optional(Regexes.maybeCapture(capture, 'targetHp', f.targetHp, '\\y{Float}')) + ':' + Regexes.optional(Regexes.maybeCapture(capture, 'targetMaxHp', f.targetMaxHp, '\\y{Float}')) + ':' + Regexes.optional(Regexes.maybeCapture(capture, 'targetMp', f.targetMp, '\\y{Float}')) + ':' + Regexes.optional(Regexes.maybeCapture(capture, 'targetMaxMp', f.targetMaxMp, '\\y{Float}')) + ':' + Regexes.optional('\\y{Float}') + ':' + // Target TP
    Regexes.optional('\\y{Float}') + ':' + // Target Max TP
    Regexes.optional(Regexes.maybeCapture(capture, 'targetX', f.targetX, '\\y{Float}')) + ':' + Regexes.optional(Regexes.maybeCapture(capture, 'targetY', f.targetY, '\\y{Float}')) + ':' + Regexes.optional(Regexes.maybeCapture(capture, 'targetZ', f.targetZ, '\\y{Float}')) + ':' + Regexes.optional(Regexes.maybeCapture(capture, 'targetHeading', f.targetHeading, '\\y{Float}')) + ':' + Regexes.maybeCapture(capture, 'hp', f.hp, '\\y{Float}') + ':' + Regexes.maybeCapture(capture, 'maxHp', f.maxHp, '\\y{Float}') + ':' + Regexes.maybeCapture(capture, 'mp', f.mp, '\\y{Float}') + ':' + Regexes.maybeCapture(capture, 'maxMp', f.maxMp, '\\y{Float}') + ':' + '\\y{Float}:' + // Source TP
    '\\y{Float}:' + // Source Max TP
    Regexes.maybeCapture(capture, 'x', f.x, '\\y{Float}') + ':' + Regexes.maybeCapture(capture, 'y', f.y, '\\y{Float}') + ':' + Regexes.maybeCapture(capture, 'z', f.z, '\\y{Float}') + ':' + Regexes.maybeCapture(capture, 'heading', f.heading, '\\y{Float}') + ':' + '.*?$'; // Unknown last field

    return Regexes.parse(str);
  }
  /**
   * fields: targetId, target, id, capture
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#1b-networktargeticon-head-markers
   */


  static headMarker(f) {
    if (typeof f === 'undefined') f = {};
    Regexes.validateParams(f, 'headMarker', headMarkerParams);
    const capture = Regexes.trueIfUndefined(f.capture);
    const str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') + ' 1B:' + Regexes.maybeCapture(capture, 'targetId', f.targetId, '\\y{ObjectId}') + ':' + Regexes.maybeCapture(capture, 'target', f.target, '[^:]*?') + ':....:....:' + Regexes.maybeCapture(capture, 'id', f.id, '....') + ':';
    return Regexes.parse(str);
  } // fields: name, capture
  // matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#03-addcombatant


  static addedCombatant(f) {
    if (typeof f === 'undefined') f = {};
    Regexes.validateParams(f, 'addedCombatant', addedCombatantParams);
    const capture = Regexes.trueIfUndefined(f.capture);
    const str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') + ' 03:\\y{ObjectId}:Added new combatant ' + Regexes.maybeCapture(capture, 'name', f.name, '.*?') + '\\.';
    return Regexes.parse(str);
  }
  /**
   * fields: id, name, hp, x, y, z, npcId, capture
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#03-addcombatant
   */


  static addedCombatantFull(f) {
    if (typeof f === 'undefined') f = {};
    Regexes.validateParams(f, 'addedCombatantFull', addedCombatantFullParams);
    const capture = Regexes.trueIfUndefined(f.capture);
    const str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') + ' 03:' + Regexes.maybeCapture(capture, 'id', f.id, '\\y{ObjectId}') + ':Added new combatant ' + Regexes.maybeCapture(capture, 'name', f.name, '[^:]*?') + '\\. {2}Job: ' + Regexes.maybeCapture(capture, 'job', f.job, '[^:]*?') + ' Level: ' + Regexes.maybeCapture(capture, 'level', f.level, '[^:]*?') + ' Max HP: ' + Regexes.maybeCapture(capture, 'hp', f.hp, '[0-9]+') + '\.' + '.*?Pos: \\(' + Regexes.maybeCapture(capture, 'x', f.x, '\\y{Float}') + ',' + Regexes.maybeCapture(capture, 'y', f.y, '\\y{Float}') + ',' + Regexes.maybeCapture(capture, 'z', f.z, '\\y{Float}') + '\\)' + '(?: \\(' + Regexes.maybeCapture(capture, 'npcId', f.npcId, '.*?') + '\\))?\\.';
    return Regexes.parse(str);
  }
  /**
   * fields: id, name, hp, capture
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#04-removecombatant
   */


  static removingCombatant(f) {
    if (typeof f === 'undefined') f = {};
    Regexes.validateParams(f, 'removingCombatant', removingCombatantParams);
    const capture = Regexes.trueIfUndefined(f.capture);
    const str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') + ' 04:' + Regexes.maybeCapture(capture, 'id', '\\y{ObjectId}') + ':Removing combatant ' + Regexes.maybeCapture(capture, 'name', f.name, '.*?') + '\\.' + '.*?Max HP: ' + Regexes.maybeCapture(capture, 'hp', f.hp, '[0-9]+') + '\.' + Regexes.optional('.*?Pos: \\(' + Regexes.maybeCapture(capture, 'x', f.x, '\\y{Float}') + ',' + Regexes.maybeCapture(capture, 'y', f.y, '\\y{Float}') + ',' + Regexes.maybeCapture(capture, 'z', f.z, '\\y{Float}') + '\\)');
    return Regexes.parse(str);
  } // fields: targetId, target, effect, source, duration, capture
  // matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#1a-networkbuff


  static gainsEffect(f) {
    if (typeof f === 'undefined') f = {};
    Regexes.validateParams(f, 'gainsEffect', gainsEffectParams);
    const capture = Regexes.trueIfUndefined(f.capture);
    const str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') + ' 1A:' + Regexes.maybeCapture(capture, 'targetId', f.targetId, '\\y{ObjectId}') + ':' + Regexes.maybeCapture(capture, 'target', f.target, '.*?') + ' gains the effect of ' + Regexes.maybeCapture(capture, 'effect', f.effect, '.*?') + ' from ' + Regexes.maybeCapture(capture, 'source', f.source, '.*?') + ' for ' + Regexes.maybeCapture(capture, 'duration', f.duration, '\\y{Float}') + ' Seconds\\.';
    return Regexes.parse(str);
  }
  /**
   * Prefer gainsEffect over this function unless you really need extra data.
   * fields: targetId, target, job, hp, maxHp, mp, maxMp, x, y, z, heading,
   *         data0, data1, data2, data3, data4
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#26-networkstatuseffects
   */


  static statusEffectExplicit(f) {
    if (typeof f === 'undefined') f = {};
    Regexes.validateParams(f, 'statusEffectExplicit', statusEffectExplicitParams);
    const capture = Regexes.trueIfUndefined(f.capture);
    const kField = '.*?:';
    const str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') + ' 26:' + Regexes.maybeCapture(capture, 'targetId', f.targetId, '\\y{ObjectId}') + ':' + Regexes.maybeCapture(capture, 'target', f.target, '[^:]*?') + ':' + '[0-9A-F]{0,6}' + Regexes.maybeCapture(capture, 'job', f.job, '[0-9A-F]{0,2}') + ':' + Regexes.maybeCapture(capture, 'hp', f.hp, '\\y{Float}') + ':' + Regexes.maybeCapture(capture, 'maxHp', f.maxHp, '\\y{Float}') + ':' + Regexes.maybeCapture(capture, 'mp', f.mp, '\\y{Float}') + ':' + Regexes.maybeCapture(capture, 'maxMp', f.maxMp, '\\y{Float}') + ':' + kField + // tp lol
    kField + // max tp extra lol
    // x, y, z heading may be blank
    Regexes.optional(Regexes.maybeCapture(capture, 'x', f.x, '\\y{Float}')) + ':' + Regexes.optional(Regexes.maybeCapture(capture, 'y', f.y, '\\y{Float}')) + ':' + Regexes.optional(Regexes.maybeCapture(capture, 'z', f.z, '\\y{Float}')) + ':' + Regexes.optional(Regexes.maybeCapture(capture, 'heading', f.heading, '\\y{Float}')) + ':' + Regexes.maybeCapture(capture, 'data0', f.data0, '[^:]*?') + ':' + Regexes.maybeCapture(capture, 'data1', f.data1, '[^:]*?') + ':' + // data2, 3, 4 may not exist and the line may terminate.
    Regexes.optional(Regexes.maybeCapture(capture, 'data2', f.data2, '[^:]*?') + ':') + Regexes.optional(Regexes.maybeCapture(capture, 'data3', f.data3, '[^:]*?') + ':') + Regexes.optional(Regexes.maybeCapture(capture, 'data4', f.data4, '[^:]*?') + ':');
    return Regexes.parse(str);
  }
  /**
   * fields: targetId, target, effect, source, capture
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#1e-networkbuffremove
   */


  static losesEffect(f) {
    if (typeof f === 'undefined') f = {};
    Regexes.validateParams(f, 'losesEffect', losesEffectParams);
    const capture = Regexes.trueIfUndefined(f.capture);
    const str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') + ' 1E:' + Regexes.maybeCapture(capture, 'targetId', f.targetId, '\\y{ObjectId}') + ':' + Regexes.maybeCapture(capture, 'target', f.target, '.*?') + ' loses the effect of ' + Regexes.maybeCapture(capture, 'effect', f.effect, '.*?') + ' from ' + Regexes.maybeCapture(capture, 'source', f.source, '.*?') + '\\.';
    return Regexes.parse(str);
  }
  /**
   * fields: source, sourceId, target, targetId, id, capture
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#23-networktether
   */


  static tether(f) {
    if (typeof f === 'undefined') f = {};
    Regexes.validateParams(f, 'tether', tetherParams);
    const capture = Regexes.trueIfUndefined(f.capture);
    const str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') + ' 23:' + Regexes.maybeCapture(capture, 'sourceId', f.sourceId, '\\y{ObjectId}') + ':' + Regexes.maybeCapture(capture, 'source', f.source, '[^:]*?') + ':' + Regexes.maybeCapture(capture, 'targetId', f.targetId, '\\y{ObjectId}') + ':' + Regexes.maybeCapture(capture, 'target', f.target, '[^:]*?') + ':....:....:' + Regexes.maybeCapture(capture, 'id', f.id, '....') + ':';
    return Regexes.parse(str);
  }
  /**
   * 'target' was defeated by 'source'
   * fields: target, source, capture
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#19-networkdeath
   */


  static wasDefeated(f) {
    if (typeof f === 'undefined') f = {};
    Regexes.validateParams(f, 'wasDefeated', wasDefeatedParams);
    const capture = Regexes.trueIfUndefined(f.capture);
    const str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') + ' 19:' + Regexes.maybeCapture(capture, 'target', f.target, '.*?') + ' was defeated by ' + Regexes.maybeCapture(capture, 'source', f.source, '.*?') + '\\.';
    return Regexes.parse(str);
  }
  /**
   * fields: name, hp, capture
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#0d-combatanthp
   */


  static hasHP(f) {
    if (typeof f === 'undefined') f = {};
    Regexes.validateParams(f, 'hasHP', hasHPParams);
    const capture = Regexes.trueIfUndefined(f.capture);
    const str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') + ' 0D:' + Regexes.maybeCapture(capture, 'name', f.name, '.*?') + ' HP at ' + Regexes.maybeCapture(capture, 'hp', f.hp, '\\d+') + '%';
    return Regexes.parse(str);
  }
  /**
   * fields: code, line, capture
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#00-logline
   */


  static echo(f) {
    if (typeof f === 'undefined') f = {};
    Regexes.validateParams(f, 'echo', echoParams);
    return Regexes.gameLog({
      line: f.line,
      capture: f.capture,
      code: '0038'
    });
  }
  /**
   * fields: code, line, name, capture
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#00-logline
   */


  static dialog(f) {
    if (typeof f === 'undefined') f = {};
    Regexes.validateParams(f, 'dialog', dialogParams);
    const capture = Regexes.trueIfUndefined(f.capture);
    const str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') + ' 00:' + Regexes.maybeCapture(capture, 'code', '0044') + ':' + Regexes.maybeCapture(capture, 'name', f.name, '.*?') + ':' + Regexes.maybeCapture(capture, 'line', f.line, '.*') + '$';
    return Regexes.parse(str);
  }
  /**
   * fields: code, line, capture
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#00-logline
   */


  static message(f) {
    if (typeof f === 'undefined') f = {};
    Regexes.validateParams(f, 'message', messageParams);
    return Regexes.gameLog({
      line: f.line,
      capture: f.capture,
      code: '0839'
    });
  }
  /**
   * fields: code, line, capture
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#00-logline
   */


  static gameLog(f) {
    if (typeof f === 'undefined') f = {};
    Regexes.validateParams(f, 'gameLog', gameLogParams);
    const capture = Regexes.trueIfUndefined(f.capture);
    const str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') + ' 00:' + Regexes.maybeCapture(capture, 'code', f.code, '....') + ':' + Regexes.maybeCapture(capture, 'line', f.line, '.*') + '$';
    return Regexes.parse(str);
  }
  /**
   * fields: code, name, line, capture
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#00-logline
   * Some game log lines have names in them, but not all.  All network log lines for these
   * have empty fields, but these get dropped by the ACT FFXV plugin.
   */


  static gameNameLog(f) {
    if (typeof f === 'undefined') f = {};
    Regexes.validateParams(f, 'gameNameLog', gameNameLogParams);
    const capture = Regexes.trueIfUndefined(f.capture);
    const str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') + ' 00:' + Regexes.maybeCapture(capture, 'code', f.code, '....') + ':' + Regexes.maybeCapture(capture, 'name', f.name, '[^:]*') + ':' + Regexes.maybeCapture(capture, 'line', f.line, '.*') + '$';
    return Regexes.parse(str);
  }
  /**
   * fields: job, strength, dexterity, vitality, intelligence, mind, piety, attackPower,
   *         directHit, criticalHit, attackMagicPotency, healMagicPotency, determination,
   *         skillSpeed, spellSpeed, tenacity, capture
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#0c-playerstats
   */


  static statChange(f) {
    if (typeof f === 'undefined') f = {};
    Regexes.validateParams(f, 'statChange', statChangeParams);
    const capture = Regexes.trueIfUndefined(f.capture);
    const str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') + ' 0C:Player Stats: ' + Regexes.maybeCapture(capture, 'job', f.job, '\\d+') + ':' + Regexes.maybeCapture(capture, 'strength', f.strength, '\\d+') + ':' + Regexes.maybeCapture(capture, 'dexterity', f.dexterity, '\\d+') + ':' + Regexes.maybeCapture(capture, 'vitality', f.vitality, '\\d+') + ':' + Regexes.maybeCapture(capture, 'intelligence', f.intelligence, '\\d+') + ':' + Regexes.maybeCapture(capture, 'mind', f.mind, '\\d+') + ':' + Regexes.maybeCapture(capture, 'piety', f.piety, '\\d+') + ':' + Regexes.maybeCapture(capture, 'attackPower', f.attackPower, '\\d+') + ':' + Regexes.maybeCapture(capture, 'directHit', f.directHit, '\\d+') + ':' + Regexes.maybeCapture(capture, 'criticalHit', f.criticalHit, '\\d+') + ':' + Regexes.maybeCapture(capture, 'attackMagicPotency', f.attackMagicPotency, '\\d+') + ':' + Regexes.maybeCapture(capture, 'healMagicPotency', f.healMagicPotency, '\\d+') + ':' + Regexes.maybeCapture(capture, 'determination', f.determination, '\\d+') + ':' + Regexes.maybeCapture(capture, 'skillSpeed', f.skillSpeed, '\\d+') + ':' + Regexes.maybeCapture(capture, 'spellSpeed', f.spellSpeed, '\\d+') + ':0:' + Regexes.maybeCapture(capture, 'tenacity', f.tenacity, '\\d+');
    return Regexes.parse(str);
  }
  /**
   * fields: name, capture
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#01-changezone
   */


  static changeZone(f) {
    if (typeof f === 'undefined') f = {};
    Regexes.validateParams(f, 'changeZone', changeZoneParams);
    const capture = Regexes.trueIfUndefined(f.capture);
    const str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') + ' 01:Changed Zone to ' + Regexes.maybeCapture(capture, 'name', f.name, '.*?') + '\\.';
    return Regexes.parse(str);
  }
  /**
   * fields: instance, command, data0, data1, data2, data3
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#21-network6d-actor-control-lines
   */


  static network6d(f) {
    if (typeof f === 'undefined') f = {};
    Regexes.validateParams(f, 'network6d', network6dParams);
    const capture = Regexes.trueIfUndefined(f.capture);
    const str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') + ' 21:' + Regexes.maybeCapture(capture, 'instance', f.instance, '.*?') + ':' + Regexes.maybeCapture(capture, 'command', f.command, '.*?') + ':' + Regexes.maybeCapture(capture, 'data0', f.data0, '.*?') + ':' + Regexes.maybeCapture(capture, 'data1', f.data1, '.*?') + ':' + Regexes.maybeCapture(capture, 'data2', f.data2, '.*?') + ':' + Regexes.maybeCapture(capture, 'data3', f.data3, '.*?') + '$';
    return Regexes.parse(str);
  }
  /**
   * Helper function for building named capture group
   */


  static maybeCapture(capture, name, value, defaultValue) {
    if (!value) value = defaultValue;
    value = Regexes.anyOf(value);
    return capture ? Regexes.namedCapture(name, value) : value;
  }

  static optional(str) {
    return `(?:${str})?`;
  } // Creates a named regex capture group named |name| for the match |value|.


  static namedCapture(name, value) {
    if (name.includes('>')) console.error('"' + name + '" contains ">".');
    if (name.includes('<')) console.error('"' + name + '" contains ">".');
    return '(?<' + name + '>' + value + ')';
  }
  /**
   * Convenience for turning multiple args into a unioned regular expression.
   * anyOf(x, y, z) or anyOf([x, y, z]) do the same thing, and return (?:x|y|z).
   * anyOf(x) or anyOf(x) on its own simplifies to just x.
   * args may be strings or RegExp, although any additional markers to RegExp
   * like /insensitive/i are dropped.
   */


  static anyOf(...args) {
    const anyOfArray = array => {
      return `(?:${array.map(elem => elem instanceof RegExp ? elem.source : elem).join('|')})`;
    };

    let array = [];

    if (args.length === 1) {
      if (Array.isArray(args[0])) array = args[0];else if (args[0]) array = [args[0]];else array = [];
    } else {
      // TODO: more accurate type instead of `as` cast
      array = args;
    }

    return anyOfArray(array);
  }

  static parse(regexpString) {
    const kCactbotCategories = {
      Timestamp: '^.{14}',
      NetTimestamp: '.{33}',
      NetField: '(?:[^|]*\\|)',
      LogType: '[0-9A-Fa-f]{2}',
      AbilityCode: '[0-9A-Fa-f]{1,8}',
      ObjectId: '[0-9A-F]{8}',
      // Matches any character name (including empty strings which the FFXIV
      // ACT plugin can generate when unknown).
      Name: '(?:[^\\s:|]+(?: [^\\s:|]+)?|)',
      // Floats can have comma as separator in FFXIV plugin output: https://github.com/ravahn/FFXIV_ACT_Plugin/issues/137
      Float: '-?[0-9]+(?:[.,][0-9]+)?(?:E-?[0-9]+)?'
    }; // All regexes in cactbot are case insensitive.
    // This avoids headaches as things like `Vice and Vanity` turns into
    // `Vice And Vanity`, especially for French and German.  It appears to
    // have a ~20% regex parsing overhead, but at least they work.

    let modifiers = 'i';

    if (regexpString instanceof RegExp) {
      modifiers += (regexpString.global ? 'g' : '') + (regexpString.multiline ? 'm' : '');
      regexpString = regexpString.source;
    }

    regexpString = regexpString.replace(/\\y\{(.*?)\}/g, (match, group) => {
      return kCactbotCategories[group] || match;
    });
    return new RegExp(regexpString, modifiers);
  } // Like Regex.Regexes.parse, but force global flag.


  static parseGlobal(regexpString) {
    const regex = Regexes.parse(regexpString);
    let modifiers = 'gi';
    if (regexpString instanceof RegExp) modifiers += regexpString.multiline ? 'm' : '';
    return new RegExp(regex.source, modifiers);
  }

  static trueIfUndefined(value) {
    if (typeof value === 'undefined') return true;
    return !!value;
  }

  static validateParams(f, funcName, params) {
    if (f === null) return;
    if (typeof f !== 'object') return;
    const keys = Object.keys(f);

    for (let k = 0; k < keys.length; ++k) {
      const key = keys[k];

      if (key && !params.includes(key)) {
        throw new Error(`${funcName}: invalid parameter '${key}'.  ` + `Valid params: ${JSON.stringify(params)}`);
      }
    }
  }

}
;// CONCATENATED MODULE: ./resources/netregexes.ts
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }


 // Differences from Regexes:
// * may have more fields
// * AddedCombatant npc id is broken up into npcNameId and npcBaseId
// * gameLog always splits name into its own field (but previously wouldn't)

const separator = '\\|';
const matchDefault = '[^|]*'; // If NetRegexes.setFlagTranslationsNeeded is set to true, then any
// regex created that requires a translation will begin with this string
// and match the magicStringRegex.  This is maybe a bit goofy, but is
// a pretty straightforward way to mark regexes for translations.
// If issue #1306 is ever resolved, we can remove this.

const magicTranslationString = `^^`;
const magicStringRegex = /^\^\^/;
const keysThatRequireTranslation = ['ability', 'name', 'source', 'target', 'line'];

const defaultParams = (type, include) => {
  var _include;

  (_include = include) !== null && _include !== void 0 ? _include : include = Object.keys(netlog_defs[type].fields);
  const params = {};

  for (const [prop, index] of Object.entries(netlog_defs[type].fields)) {
    if (!include.includes(prop)) continue;
    const param = {
      field: prop
    };
    if (prop === 'type') param.value = netlog_defs[type].type;
    params[index] = param;
  }

  return params;
};

const parseHelper = (params, funcName, fields) => {
  var _params;

  params = (_params = params) !== null && _params !== void 0 ? _params : {};
  const validFields = [];

  for (const index in fields) {
    const field = fields[index];
    if (field) validFields.push(field.field);
  }

  Regexes.validateParams(params, funcName, ['capture', ...validFields]); // Find the last key we care about, so we can shorten the regex if needed.

  const capture = Regexes.trueIfUndefined(params.capture);
  const fieldKeys = Object.keys(fields).sort((a, b) => parseInt(a) - parseInt(b));
  let maxKeyStr;

  if (capture) {
    var _fieldKeys;

    maxKeyStr = (_fieldKeys = fieldKeys[fieldKeys.length - 1]) !== null && _fieldKeys !== void 0 ? _fieldKeys : '0';
  } else {
    maxKeyStr = '0';

    for (const key in fields) {
      var _fields$key, _fields$key2;

      const value = (_fields$key = fields[key]) !== null && _fields$key !== void 0 ? _fields$key : {};
      if (typeof value !== 'object') continue;
      const fieldName = (_fields$key2 = fields[key]) === null || _fields$key2 === void 0 ? void 0 : _fields$key2.field;
      if (fieldName && fieldName in params) maxKeyStr = key;
    }
  }

  const maxKey = parseInt(maxKeyStr); // For testing, it's useful to know if this is a regex that requires
  // translation.  We test this by seeing if there are any specified
  // fields, and if so, inserting a magic string that we can detect.
  // This lets us differentiate between "regex that should be translated"
  // e.g. a regex with `target` specified, and "regex that shouldn't"
  // e.g. a gains effect with just effectId specified.

  const transParams = Object.keys(params).filter(k => keysThatRequireTranslation.includes(k));
  const needsTranslations = NetRegexes.flagTranslationsNeeded && transParams.length > 0; // Build the regex from the fields.

  let str = needsTranslations ? magicTranslationString : '^';
  let lastKey = -1;

  for (const keyStr in fields) {
    var _fields$keyStr, _fields$keyStr$value$, _fields$keyStr2, _fields$keyStr2$value;

    const key = parseInt(keyStr); // Fill in blanks.

    const missingFields = key - lastKey - 1;
    if (missingFields === 1) str += '\\y{NetField}';else if (missingFields > 1) str += `\\y{NetField}{${missingFields}}`;
    lastKey = key;
    const value = fields[keyStr];
    if (typeof value !== 'object') throw new Error(`${funcName}: invalid value: ${JSON.stringify(value)}`);
    const fieldName = (_fields$keyStr = fields[keyStr]) === null || _fields$keyStr === void 0 ? void 0 : _fields$keyStr.field;
    const fieldValue = (_fields$keyStr$value$ = (_fields$keyStr2 = fields[keyStr]) === null || _fields$keyStr2 === void 0 ? void 0 : (_fields$keyStr2$value = _fields$keyStr2.value) === null || _fields$keyStr2$value === void 0 ? void 0 : _fields$keyStr2$value.toString()) !== null && _fields$keyStr$value$ !== void 0 ? _fields$keyStr$value$ : matchDefault;

    if (fieldName) {
      str += Regexes.maybeCapture( // more accurate type instead of `as` cast
      // maybe this function needs a refactoring
      capture, fieldName, params[fieldName], fieldValue) + separator;
    } else {
      str += fieldValue + separator;
    } // Stop if we're not capturing and don't care about future fields.


    if (key >= maxKey) break;
  }

  return Regexes.parse(str);
};

class NetRegexes {
  static setFlagTranslationsNeeded(value) {
    NetRegexes.flagTranslationsNeeded = value;
  }

  static doesNetRegexNeedTranslation(regex) {
    // Need to `setFlagTranslationsNeeded` before calling this function.
    console.assert(NetRegexes.flagTranslationsNeeded);
    const str = typeof regex === 'string' ? regex : regex.source;
    return !!magicStringRegex.exec(str);
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#14-networkstartscasting
   */


  static startsUsing(params) {
    return parseHelper(params, 'startsUsing', defaultParams('StartsUsing'));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#15-networkability
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#16-networkaoeability
   */


  static ability(params) {
    return parseHelper(params, 'ability', { ...defaultParams('Ability', ['type', 'timestamp', 'sourceId', 'source', 'id', 'ability', 'targetId', 'target']),
      // Override type
      0: {
        field: 'type',
        value: '2[12]'
      }
    });
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#15-networkability
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#16-networkaoeability
   */


  static abilityFull(params) {
    return parseHelper(params, 'abilityFull', { ...defaultParams('Ability'),
      // Override type
      0: {
        field: 'type',
        value: '2[12]'
      }
    });
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#1b-networktargeticon-head-markers
   */


  static headMarker(params) {
    return parseHelper(params, 'headMarker', defaultParams('HeadMarker'));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#03-addcombatant
   */


  static addedCombatant(params) {
    return parseHelper(params, 'addedCombatant', defaultParams('AddedCombatant', ['type', 'timestamp', 'id', 'name']));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#03-addcombatant
   */


  static addedCombatantFull(params) {
    return parseHelper(params, 'addedCombatantFull', defaultParams('AddedCombatant'));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#04-removecombatant
   */


  static removingCombatant(params) {
    return parseHelper(params, 'removingCombatant', defaultParams('RemovedCombatant'));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#1a-networkbuff
   */


  static gainsEffect(params) {
    return parseHelper(params, 'gainsEffect', defaultParams('GainsEffect'));
  }
  /**
   * Prefer gainsEffect over this function unless you really need extra data.
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#26-networkstatuseffects
   */


  static statusEffectExplicit(params) {
    return parseHelper(params, 'statusEffectExplicit', defaultParams('StatusEffect'));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#1e-networkbuffremove
   */


  static losesEffect(params) {
    return parseHelper(params, 'losesEffect', defaultParams('LosesEffect'));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#23-networktether
   */


  static tether(params) {
    return parseHelper(params, 'tether', defaultParams('Tether'));
  }
  /**
   * 'target' was defeated by 'source'
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#19-networkdeath
   */


  static wasDefeated(params) {
    return parseHelper(params, 'wasDefeated', defaultParams('WasDefeated'));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#00-logline
   */


  static echo(params) {
    if (typeof params === 'undefined') params = {};
    Regexes.validateParams(params, 'echo', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
    params.code = '0038';
    return NetRegexes.gameLog(params);
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#00-logline
   */


  static dialog(params) {
    if (typeof params === 'undefined') params = {};
    Regexes.validateParams(params, 'dialog', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
    params.code = '0044';
    return NetRegexes.gameLog(params);
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#00-logline
   */


  static message(params) {
    if (typeof params === 'undefined') params = {};
    Regexes.validateParams(params, 'message', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
    params.code = '0839';
    return NetRegexes.gameLog(params);
  }
  /**
   * fields: code, name, line, capture
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#00-logline
   */


  static gameLog(params) {
    return parseHelper(params, 'gameLog', defaultParams('GameLog'));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#00-logline
   */


  static gameNameLog(params) {
    // for compat with Regexes.
    return NetRegexes.gameLog(params);
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#0c-playerstats
   */


  static statChange(params) {
    return parseHelper(params, 'statChange', defaultParams('PlayerStats'));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#01-changezone
   */


  static changeZone(params) {
    return parseHelper(params, 'changeZone', defaultParams('ChangeZone'));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#21-network6d-actor-control-lines
   */


  static network6d(params) {
    return parseHelper(params, 'network6d', defaultParams('ActorControl'));
  }
  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#22-networknametoggle
   */


  static nameToggle(params) {
    return parseHelper(params, 'nameToggle', defaultParams('NameToggle'));
  }

  static map(params) {
    return parseHelper(params, 'map', defaultParams('Map'));
  }

}

_defineProperty(NetRegexes, "flagTranslationsNeeded", false);
;// CONCATENATED MODULE: ./resources/translations.ts

 // Fill in LocaleRegex so that things like LocaleRegex.countdownStart.de is a valid regex.

const localeLines = {
  countdownStart: {
    en: 'Battle commencing in (?<time>\\y{Float}) seconds! \\((?<player>.*?)\\)',
    de: 'Noch (?<time>\\y{Float}) Sekunden bis Kampfbeginn! \\((?<player>.*?)\\)',
    fr: 'Début du combat dans (?<time>\\y{Float}) secondes[ ]?! \\((?<player>.*?)\\)',
    ja: '戦闘開始まで(?<time>\\y{Float})秒！ （(?<player>.*?)）',
    cn: '距离战斗开始还有(?<time>\\y{Float})秒！ （(?<player>.*?)）',
    ko: '전투 시작 (?<time>\\y{Float})초 전! \\((?<player>.*?)\\)'
  },
  countdownEngage: {
    en: 'Engage!',
    de: 'Start!',
    fr: 'À l\'attaque[ ]?!',
    ja: '戦闘開始！',
    cn: '战斗开始！',
    ko: '전투 시작!'
  },
  countdownCancel: {
    en: 'Countdown canceled by (?<player>\\y{Name})',
    de: '(?<player>\\y{Name}) hat den Countdown abgebrochen',
    fr: 'Le compte à rebours a été interrompu par (?<player>\\y{Name})[ ]?\\.',
    ja: '(?<player>\\y{Name})により、戦闘開始カウントがキャンセルされました。',
    cn: '(?<player>\\y{Name})取消了战斗开始倒计时。',
    ko: '(?<player>\\y{Name}) 님이 초읽기를 취소했습니다\\.'
  },
  areaSeal: {
    en: '(?<area>.*?) will be sealed off in (?<time>\\y{Float}) seconds!',
    de: 'Noch (?<time>\\y{Float}) Sekunden, bis sich (?<area>.*?) schließt',
    fr: 'Fermeture (?<area>.*?) dans (?<time>\\y{Float}) secondes[ ]?\\.',
    ja: '(?<area>.*?)の封鎖まであと(?<time>\\y{Float})秒',
    cn: '距(?<area>.*?)被封锁还有(?<time>\\y{Float})秒',
    ko: '(?<time>\\y{Float})초 후에 (?<area>.*?)(이|가) 봉쇄됩니다\\.'
  },
  areaUnseal: {
    en: '(?<area>.*?) is no longer sealed.',
    de: '(?<area>.*?) öffnet sich erneut.',
    fr: 'Ouverture (?<area>.*?)[ ]?!',
    ja: '(?<area>.*?)の封鎖が解かれた……',
    cn: '(?<area>.*?)的封锁解除了',
    ko: '(?<area>.*?)의 봉쇄가 해제되었습니다\\.'
  },
  // Recipe name always start with \ue0bb
  // HQ icon is \ue03c
  craftingStart: {
    en: 'You begin synthesizing (?<count>(an?|\\d+) )?\ue0bb(?<recipe>.*)\\.',
    de: 'Du hast begonnen, durch Synthese (?<count>(ein(e|es|em|er)?|\\d+) )?\ue0bb(?<recipe>.*) herzustellen\\.',
    fr: 'Vous commencez à fabriquer (?<count>(une?|\\d+) )?\ue0bb(?<recipe>.*)\\.',
    ja: '(?<player>\\y{Name})は\ue0bb(?<recipe>.*)(×(?<count>\\d+))?の製作を開始した。',
    cn: '(?<player>\\y{Name})开始制作“\ue0bb(?<recipe>.*)”(×(?<count>\\d+))?。',
    ko: '\ue0bb(?<recipe>.*)(×(?<count>\\d+)개)? 제작을 시작합니다\\.'
  },
  trialCraftingStart: {
    en: 'You begin trial synthesis of \ue0bb(?<recipe>.*)\\.',
    de: 'Du hast mit der Testsynthese von \ue0bb(?<recipe>.*) begonnen\\.',
    fr: 'Vous commencez une synthèse d\'essai pour une? \ue0bb(?<recipe>.*)\\.',
    ja: '(?<player>\\y{Name})は\ue0bb(?<recipe>.*)の製作練習を開始した。',
    cn: '(?<player>\\y{Name})开始练习制作\ue0bb(?<recipe>.*)。',
    ko: '\ue0bb(?<recipe>.*) 제작 연습을 시작합니다\\.'
  },
  craftingFinish: {
    en: 'You synthesize (?<count>(an?|\\d+) )?\ue0bb(?<recipe>.*)(\ue03c)?\\.',
    de: 'Du hast erfolgreich (?<count>(ein(e|es|em|er)?|\\d+) )?(?<recipe>.*)(\ue03c)? hergestellt\\.',
    fr: 'Vous fabriquez (?<count>(une?|\\d+) )?\ue0bb(?<recipe>.*)(\ue03c)?\\.',
    ja: '(?<player>\\y{Name})は\ue0bb(?<recipe>.*)(\ue03c)?(×(?<count>\\d+))?を完成させた！',
    cn: '(?<player>\\y{Name})制作“\ue0bb(?<recipe>.*)(\ue03c)?”(×(?<count>\\d+))?成功！',
    ko: '(?<player>\\y{Name}) 님이 \ue0bb(?<recipe>.*)(\ue03c)?(×(?<count>\\d+)개)?(을|를) 완성했습니다!'
  },
  trialCraftingFinish: {
    en: 'Your trial synthesis of \ue0bb(?<recipe>.*) proved a success!',
    de: 'Die Testsynthese von \ue0bb(?<recipe>.*) war erfolgreich!',
    fr: 'Votre synthèse d\'essai pour fabriquer \ue0bb(?<recipe>.*) a été couronnée de succès!',
    ja: '(?<player>\\y{Name})は\ue0bb(?<recipe>.*)の製作練習に成功した！',
    cn: '(?<player>\\y{Name})练习制作\ue0bb(?<recipe>.*)成功了！',
    ko: '\ue0bb(?<recipe>.*) 제작 연습에 성공했습니다!'
  },
  craftingFail: {
    en: 'Your synthesis fails!',
    de: 'Deine Synthese ist fehlgeschlagen!',
    fr: 'La synthèse échoue\\.{3}',
    ja: '(?<player>\\y{Name})は製作に失敗した……',
    cn: '(?<player>\\y{Name})制作失败了……',
    ko: '제작에 실패했습니다……\\.'
  },
  trialCraftingFail: {
    en: 'Your trial synthesis of \ue0bb(?<recipe>.*) failed\\.{3}',
    de: 'Die Testsynthese von \ue0bb(?<recipe>.*) ist fehlgeschlagen\\.{3}',
    fr: 'Votre synthèse d\'essai pour fabriquer \ue0bb(?<recipe>.*) s\'est soldée par un échec\\.{3}',
    ja: '(?<player>\\y{Name})は\ue0bb(?<recipe>.*)の製作練習に失敗した……',
    cn: '(?<player>\\y{Name})练习制作\ue0bb(?<recipe>.*)失败了……',
    ko: '\ue0bb(?<recipe>.*) 제작 연습에 실패했습니다……\\.'
  },
  craftingCancel: {
    en: 'You cancel the synthesis\\.',
    de: 'Du hast die Synthese abgebrochen\\.',
    fr: 'La synthèse est annulée\\.',
    ja: '(?<player>\\y{Name})は製作を中止した。',
    cn: '(?<player>\\y{Name})中止了制作作业。',
    ko: '제작을 중지했습니다\\.'
  },
  trialCraftingCancel: {
    en: 'You abandoned trial synthesis\\.',
    de: 'Testsynthese abgebrochen\\.',
    fr: 'Vous avez interrompu la synthèse d\'essai\\.',
    ja: '(?<player>\\y{Name})は製作練習を中止した。',
    cn: '(?<player>\\y{Name})停止了练习。',
    ko: '제작 연습을 중지했습니다\\.'
  }
};

class RegexSet {
  get localeRegex() {
    if (this.regexes) return this.regexes;
    this.regexes = this.buildLocaleRegexes(localeLines, s => Regexes.gameLog({
      line: s + '.*?'
    }));
    return this.regexes;
  }

  get localeNetRegex() {
    if (this.netRegexes) return this.netRegexes;
    this.netRegexes = this.buildLocaleRegexes(localeLines, s => NetRegexes.gameLog({
      line: s + '[^|]*?'
    }));
    return this.netRegexes;
  }

  buildLocaleRegexes(locales, builder) {
    return Object.fromEntries(Object.entries(locales).map(([key, lines]) => [key, this.buildLocaleRegex(lines, builder)]));
  }

  buildLocaleRegex(lines, builder) {
    const regexEn = builder(lines.en);
    return {
      en: regexEn,
      de: lines.de ? builder(lines.de) : regexEn,
      fr: lines.fr ? builder(lines.fr) : regexEn,
      ja: lines.ja ? builder(lines.ja) : regexEn,
      cn: lines.cn ? builder(lines.cn) : regexEn,
      ko: lines.ko ? builder(lines.ko) : regexEn
    };
  }

}

const regexSet = new RegexSet();
const LocaleRegex = regexSet.localeRegex;
const LocaleNetRegex = regexSet.localeNetRegex;
;// CONCATENATED MODULE: ./ui/raidboss/emulator/EmulatorCommon.ts
function EmulatorCommon_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }




const querySelectorSafe = (node, sel) => {
  const ret = node.querySelector(sel);
  if (!(ret instanceof HTMLElement)) throw new UnreachableCode();
  return ret;
};
const querySelectorAllSafe = (node, sel) => {
  const ret = [...node.querySelectorAll(sel)].map(elem => {
    if (!(elem instanceof HTMLElement)) throw new UnreachableCode();
    return elem;
  });
  return ret;
};
const getTemplateChild = (node, sel) => {
  const template = querySelectorSafe(node, sel);
  if (!(template instanceof HTMLTemplateElement)) throw new UnreachableCode();
  const ret = template.content.firstElementChild;
  if (!ret) throw new UnreachableCode();
  if (!(ret instanceof HTMLElement)) throw new UnreachableCode();
  return ret;
};
const cloneSafe = node => {
  const cloned = node.cloneNode(true);
  if (!(cloned instanceof HTMLElement)) throw new UnreachableCode();
  return cloned;
}; // For performance reasons to prevent re-calculating this every single line,
// store already calculated values

const tzOffsetMap = {};
const getTimezoneOffsetMillis = timeString => {
  const timezoneOffsetString = timeString.substr(-6);
  const mappedValue = tzOffsetMap[timezoneOffsetString];
  if (mappedValue) return mappedValue;
  const defaultOffset = new Date().getTimezoneOffset() * 1000;
  if (timezoneOffsetString === undefined) return defaultOffset;
  const operator = timezoneOffsetString.substr(0, 1);
  if (operator !== '+' && operator !== '-') return defaultOffset;
  const timezoneOffsetParts = timezoneOffsetString.substr(1).split(':');
  const hoursString = timezoneOffsetParts[0];
  const minutesString = timezoneOffsetParts[1];
  if (hoursString === undefined || minutesString === undefined) return defaultOffset;
  const hours = parseInt(hoursString);
  const minutes = parseInt(minutesString);
  const tzOffset = (hours * 60 + minutes) * 60 * 1000 * (operator === '-' ? -1 : 1);
  tzOffsetMap[timezoneOffsetString] = tzOffset;
  return tzOffset;
};
class EmulatorCommon {
  static cloneData(data, exclude = ['options', 'party']) {
    const ret = {}; // Use extra logic for top-level extend for property exclusion
    // This cut the execution time of this code from 41,000ms to 50ms when parsing a 12 minute pull

    for (const i in data) {
      if (exclude.includes(i)) continue;

      if (typeof data[i] === 'object') {
        // Cloning any. See DataType definition above for reasoning.
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        ret[i] = EmulatorCommon._cloneData(data[i]);
        continue;
      } // Assignment of any to any. See DataType definition above for reasoning.
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment


      ret[i] = data[i];
    }

    return ret;
  }

  static _cloneData(data) {
    if (typeof data === 'object') {
      if (Array.isArray(data)) {
        const ret = [];

        for (let i = 0; i < data.length; ++i) {
          // Cloning any. See DataType definition above for reasoning.
          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
          ret[i] = EmulatorCommon._cloneData(data[i]);
        }

        return ret;
      }

      if (data === null) return null;
      if (data instanceof RegExp) return new RegExp(data);
      const ret = {};

      for (const i in data) {
        // Cloning any. See DataType definition above for reasoning.
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        ret[i] = EmulatorCommon._cloneData(data[i]);
      }

      return ret;
    }

    return data;
  }

  static timeToString(time, includeMillis = true) {
    const negative = time < 0 ? '-' : '';
    time = Math.abs(time);
    const millisNum = time % 1000;
    const secsNum = (time % (60 * 1000) - millisNum) / 1000; // Milliseconds

    const millis = `00${millisNum}`.substr(-3);
    const secs = `0${secsNum}`.substr(-2);
    const mins = `0${((time % (60 * 60 * 1000) - millisNum) / 1000 - secsNum) / 60}`.substr(-2);
    return negative + mins + ':' + secs + (includeMillis ? '.' + millis : '');
  }

  static timeToDateString(time, tzOffsetMillis) {
    return this.dateObjectToDateString(new Date(time), tzOffsetMillis);
  }

  static dateObjectToDateString(date, tzOffsetMillis) {
    const convDate = new Date(date.getTime() + tzOffsetMillis);
    const year = convDate.getUTCFullYear();
    const month = EmulatorCommon.zeroPad((convDate.getUTCMonth() + 1).toString());
    const day = EmulatorCommon.zeroPad(convDate.getUTCDate().toString());
    return `${year}-${month}-${day}`;
  }

  static timeToTimeString(time, tzOffsetMillis, includeMillis = false) {
    return this.dateObjectToTimeString(new Date(time), tzOffsetMillis, includeMillis);
  }

  static dateObjectToTimeString(date, tzOffsetMillis, includeMillis = false) {
    const convDate = new Date(date.getTime() + tzOffsetMillis);
    const hour = EmulatorCommon.zeroPad(convDate.getUTCHours().toString());
    const minute = EmulatorCommon.zeroPad(convDate.getUTCMinutes().toString());
    const second = EmulatorCommon.zeroPad(convDate.getUTCSeconds().toString());
    let ret = `${hour}:${minute}:${second}`;
    if (includeMillis) ret = ret + `.${EmulatorCommon.zeroPad(convDate.getUTCMilliseconds().toString(), 3)}`;
    return ret;
  }

  static msToDuration(ms) {
    const tmp = EmulatorCommon.timeToString(ms, false);
    return tmp.replace(':', 'm') + 's';
  }

  static dateTimeToString(time, tzOffsetMillis, includeMillis = false) {
    const date = new Date(time);
    const dateString = this.dateObjectToDateString(date, tzOffsetMillis);
    const timeString = this.dateObjectToTimeString(date, tzOffsetMillis, includeMillis);
    return dateString + ' ' + timeString;
  }

  static zeroPad(str, len = 2) {
    return ('' + str).padStart(len, '0');
  }

  static properCase(str) {
    return str.replace(/([^\W_]+[^\s-]*) */g, txt => {
      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
    });
  }

  static spacePadLeft(str, len) {
    return str.padStart(len, ' ');
  }

  static doesLineMatch(line, regexes) {
    if (regexes instanceof RegExp) return regexes.exec(line);

    for (const langStr in regexes) {
      const lang = langStr;
      const res = regexes[lang].exec(line);

      if (res) {
        if (res.groups) res.groups.language = lang;
        return res;
      }
    }

    return null;
  }

  static matchStart(line) {
    let res; // Currently all of these regexes have groups if they match at all,
    // but be robust to that changing in the future.

    res = EmulatorCommon.doesLineMatch(line, EmulatorCommon.countdownRegexes);

    if (res) {
      var _res$groups$time, _res$groups, _res$groups$language, _res$groups2;

      return {
        StartIn: (parseInt((_res$groups$time = (_res$groups = res.groups) === null || _res$groups === void 0 ? void 0 : _res$groups.time) !== null && _res$groups$time !== void 0 ? _res$groups$time : '0') * 1000).toString(),
        StartType: 'Countdown',
        language: (_res$groups$language = (_res$groups2 = res.groups) === null || _res$groups2 === void 0 ? void 0 : _res$groups2.language) !== null && _res$groups$language !== void 0 ? _res$groups$language : undefined
      };
    }

    res = EmulatorCommon.doesLineMatch(line, EmulatorCommon.sealRegexes);

    if (res) {
      var _res$groups$language2, _res$groups3;

      return {
        StartIn: '0',
        StartType: 'Seal',
        language: (_res$groups$language2 = (_res$groups3 = res.groups) === null || _res$groups3 === void 0 ? void 0 : _res$groups3.language) !== null && _res$groups$language2 !== void 0 ? _res$groups$language2 : undefined
      };
    }

    res = EmulatorCommon.doesLineMatch(line, EmulatorCommon.engageRegexes);

    if (res) {
      var _res$groups$language3, _res$groups4;

      return {
        StartIn: '0',
        StartType: 'Engage',
        language: (_res$groups$language3 = (_res$groups4 = res.groups) === null || _res$groups4 === void 0 ? void 0 : _res$groups4.language) !== null && _res$groups$language3 !== void 0 ? _res$groups$language3 : undefined
      };
    }
  }

  static matchEnd(line) {
    let res; // Currently all of these regexes have groups if they match at all,
    // but be robust to that changing in the future.

    res = EmulatorCommon.doesLineMatch(line, EmulatorCommon.winRegex);

    if (res) {
      var _res$groups$language4, _res$groups5;

      return {
        EndType: 'Win',
        language: (_res$groups$language4 = (_res$groups5 = res.groups) === null || _res$groups5 === void 0 ? void 0 : _res$groups5.language) !== null && _res$groups$language4 !== void 0 ? _res$groups$language4 : undefined
      };
    }

    res = EmulatorCommon.doesLineMatch(line, EmulatorCommon.wipeRegex);

    if (res) {
      var _res$groups$language5, _res$groups6;

      return {
        EndType: 'Wipe',
        language: (_res$groups$language5 = (_res$groups6 = res.groups) === null || _res$groups6 === void 0 ? void 0 : _res$groups6.language) !== null && _res$groups$language5 !== void 0 ? _res$groups$language5 : undefined
      };
    }

    res = EmulatorCommon.doesLineMatch(line, EmulatorCommon.cactbotWipeRegex);

    if (res) {
      var _res$groups$language6, _res$groups7;

      return {
        EndType: 'Cactbot Wipe',
        language: (_res$groups$language6 = (_res$groups7 = res.groups) === null || _res$groups7 === void 0 ? void 0 : _res$groups7.language) !== null && _res$groups$language6 !== void 0 ? _res$groups$language6 : undefined
      };
    }

    res = EmulatorCommon.doesLineMatch(line, EmulatorCommon.unsealRegexes);

    if (res) {
      var _res$groups$language7, _res$groups8;

      return {
        EndType: 'Unseal',
        language: (_res$groups$language7 = (_res$groups8 = res.groups) === null || _res$groups8 === void 0 ? void 0 : _res$groups8.language) !== null && _res$groups$language7 !== void 0 ? _res$groups$language7 : undefined
      };
    }
  }

}

EmulatorCommon_defineProperty(EmulatorCommon, "sealRegexes", LocaleNetRegex.areaSeal);

EmulatorCommon_defineProperty(EmulatorCommon, "engageRegexes", LocaleNetRegex.countdownEngage);

EmulatorCommon_defineProperty(EmulatorCommon, "countdownRegexes", LocaleNetRegex.countdownStart);

EmulatorCommon_defineProperty(EmulatorCommon, "unsealRegexes", LocaleNetRegex.areaUnseal);

EmulatorCommon_defineProperty(EmulatorCommon, "wipeRegex", NetRegexes.network6d({
  command: '40000010'
}));

EmulatorCommon_defineProperty(EmulatorCommon, "winRegex", NetRegexes.network6d({
  command: '40000003'
}));

EmulatorCommon_defineProperty(EmulatorCommon, "cactbotWipeRegex", NetRegexes.echo({
  line: 'cactbot wipe.*?'
}));
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/Combatant.ts
function Combatant_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }


class Combatant {
  constructor(id, name) {
    Combatant_defineProperty(this, "name", '');

    Combatant_defineProperty(this, "server", '');

    Combatant_defineProperty(this, "states", {});

    Combatant_defineProperty(this, "significantStates", []);

    Combatant_defineProperty(this, "latestTimestamp", -1);

    this.id = id;
    this.setName(name);
  }

  setName(name) {
    var _parts$, _parts$1$replace, _parts$2;

    // Sometimes network lines arrive after the combatant has been cleared
    // from memory in the client, so the network line will have a valid ID
    // but the name will be blank. Since we're tracking the name for the
    // entire fight and not on a state-by-state basis, we don't want to
    // blank out a name in this case.
    // If a combatant actually has a blank name, that's still allowed by
    // the constructor.
    if (name === '') return;
    const parts = name.split('(');
    this.name = (_parts$ = parts[0]) !== null && _parts$ !== void 0 ? _parts$ : '';
    if (parts.length > 1) this.server = (_parts$1$replace = (_parts$2 = parts[1]) === null || _parts$2 === void 0 ? void 0 : _parts$2.replace(/\)$/, '')) !== null && _parts$1$replace !== void 0 ? _parts$1$replace : '';
  }

  hasState(timestamp) {
    return this.states[timestamp] !== undefined;
  }

  pushState(timestamp, state) {
    this.states[timestamp] = state;
    this.latestTimestamp = timestamp;
    if (!this.significantStates.includes(timestamp)) this.significantStates.push(timestamp);
  }

  nextSignificantState(timestamp) {
    var _this$significantStat;

    // Shortcut out if this is significant or if there's no higher significant state
    const index = this.significantStates.indexOf(timestamp);
    const lastSignificantStateIndex = this.significantStates.length - 1; // If timestamp is a significant state already, and it's not the last one, return the next

    if (index >= 0 && index < lastSignificantStateIndex) return this.getStateByIndex(index + 1); // If timestamp is the last significant state or the timestamp is past the last significant
    // state, return the last significant state
    else if (index === lastSignificantStateIndex || timestamp > ((_this$significantStat = this.significantStates[lastSignificantStateIndex]) !== null && _this$significantStat !== void 0 ? _this$significantStat : 0)) return this.getStateByIndex(lastSignificantStateIndex);

    for (let i = 0; i < this.significantStates.length; ++i) {
      const stateIndex = this.significantStates[i];
      if (stateIndex && stateIndex > timestamp) return this.getStateByIndex(i);
    }

    return this.getStateByIndex(this.significantStates.length - 1);
  }

  pushPartialState(timestamp, props) {
    if (this.states[timestamp] === undefined) {
      var _this$significantStat2;

      // Clone the last state before this timestamp
      const stateTimestamp = (_this$significantStat2 = this.significantStates.filter(s => s < timestamp).sort((a, b) => b - a)[0]) !== null && _this$significantStat2 !== void 0 ? _this$significantStat2 : this.significantStates[0];
      if (stateTimestamp === undefined) throw new not_reached_UnreachableCode();
      const state = this.states[stateTimestamp];
      if (!state) throw new not_reached_UnreachableCode();
      this.states[timestamp] = state.partialClone(props);
    } else {
      const state = this.states[timestamp];
      if (!state) throw new not_reached_UnreachableCode();
      this.states[timestamp] = state.partialClone(props);
    }

    this.latestTimestamp = Math.max(this.latestTimestamp, timestamp);
    const lastSignificantStateTimestamp = this.significantStates[this.significantStates.length - 1];
    if (!lastSignificantStateTimestamp) throw new not_reached_UnreachableCode();
    const oldStateJSON = JSON.stringify(this.states[lastSignificantStateTimestamp]);
    const newStateJSON = JSON.stringify(this.states[timestamp]);
    if (lastSignificantStateTimestamp !== timestamp && newStateJSON !== oldStateJSON) this.significantStates.push(timestamp);
  }

  getState(timestamp) {
    const stateByTimestamp = this.states[timestamp];
    if (stateByTimestamp) return stateByTimestamp;
    const initialTimestamp = this.significantStates[0];
    if (initialTimestamp === undefined) throw new not_reached_UnreachableCode();
    if (timestamp < initialTimestamp) return this.getStateByIndex(0);
    let i = 0;

    for (; i < this.significantStates.length; ++i) {
      const prevTimestamp = this.significantStates[i];
      if (prevTimestamp === undefined) throw new not_reached_UnreachableCode();
      if (prevTimestamp > timestamp) return this.getStateByIndex(i - 1);
    }

    return this.getStateByIndex(i - 1);
  } // Should only be called when `index` is valid.


  getStateByIndex(index) {
    const stateIndex = this.significantStates[index];
    if (stateIndex === undefined) throw new not_reached_UnreachableCode();
    const state = this.states[stateIndex];
    if (state === undefined) throw new not_reached_UnreachableCode();
    return state;
  }

}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/CombatantJobSearch.ts
function CombatantJobSearch_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class CombatantJobSearch {
  static getJob(abilityId) {
    for (const [key, value] of Object.entries(CombatantJobSearch.abilities)) {
      if (value !== null && value !== void 0 && value.includes(abilityId)) return key;
    }
  }

}

CombatantJobSearch_defineProperty(CombatantJobSearch, "abilityMatchRegex", /[a-fA-F0-9]{1,4}/i);

CombatantJobSearch_defineProperty(CombatantJobSearch, "abilities", {
  PLD: [12959, 12961, 12964, 12967, 12968, 12969, 12970, 12971, 12972, 12973, 12974, 12975, 12976, 12978, 12980, 12981, 12982, 12983, 12984, 12985, 12986, 12987, 12988, 12989, 12991, 12992, 12993, 12994, 12996, 13000, 13001, 13006, 14480, 16457, 16458, 16459, 16460, 16461, 17669, 17671, 17672, 17691, 17692, 17693, 17694, 17866, 18050, 27, 29, 30, 3538, 3539, 3540, 3541, 3542, 4284, 4285, 4286, 50207, 50209, 50246, 50260, 50261, 50262, 50263, 50264, 7382, 7383, 7384, 7385, 8746, 8749, 8750, 8751, 8752, 8754, 8755, 8756],
  WAR: [16462, 16463, 16464, 16465, 17695, 17696, 17697, 17698, 17889, 3549, 3550, 3551, 3552, 4289, 4290, 4291, 49, 50157, 50218, 50249, 50265, 50266, 50267, 50268, 50269, 51, 52, 7386, 7387, 7388, 7389, 8758, 8761, 8762, 8763, 8764, 8765, 8767, 8768],
  DRK: [16466, 16467, 16468, 16469, 16470, 16471, 16472, 17700, 17701, 17702, 3617, 3621, 3623, 3624, 3625, 3629, 3632, 3634, 3636, 3638, 3639, 3640, 3641, 3643, 4303, 4304, 4305, 4306, 4307, 4308, 4309, 4310, 4311, 4312, 4680, 50158, 50159, 50271, 50272, 50319, 7390, 7391, 7392, 7393, 8769, 8772, 8773, 8775, 8776, 8777, 8778, 8779],
  GNB: [17703, 17704, 17705, 17706, 17707, 17708, 17709, 17710, 17711, 17712, 17713, 17714, 17716, 17717, 17890, 17891, 16137, 50320, 16138, 16139, 16140, 16141, 16142, 16143, 16144, 16145, 16162, 50257, 16148, 16149, 16151, 16152, 50258, 16153, 16154, 16146, 16147, 16150, 16159, 16160, 16161, 16155, 16156, 16157, 16158, 16163, 16164, 16165, 50259],
  WHM: [12958, 12962, 12965, 12997, 13002, 13003, 13004, 13005, 131, 136, 137, 139, 140, 14481, 1584, 16531, 16532, 16533, 16534, 16535, 16536, 17688, 17689, 17690, 17789, 17790, 17791, 17793, 17794, 17832, 3568, 3569, 3570, 3571, 4296, 4297, 50181, 50182, 50196, 50307, 50308, 50309, 50310, 7430, 7431, 7432, 7433, 8895, 8896, 8900, 9621, 127, 133],
  SCH: [16537, 16538, 16539, 16540, 16541, 16542, 16543, 16544, 16545, 16546, 16547, 16548, 16550, 16551, 166, 167, 17215, 17216, 17795, 17796, 17797, 17798, 17802, 17864, 17865, 17869, 17870, 17990, 185, 186, 188, 189, 190, 3583, 3584, 3585, 3586, 3587, 4300, 50184, 50214, 50311, 50312, 50313, 50324, 7434, 7435, 7436, 7437, 7438, 7869, 802, 803, 805, 8904, 8905, 8909, 9622],
  AST: [10027, 10028, 10029, 16552, 16553, 16554, 16555, 16556, 16557, 16558, 16559, 17055, 17151, 17152, 17804, 17805, 17806, 17807, 17809, 17991, 3590, 3593, 3594, 3595, 3596, 3598, 3599, 3600, 3601, 3603, 3604, 3605, 3606, 3608, 3610, 3612, 3613, 3614, 3615, 4301, 4302, 4401, 4402, 4403, 4404, 4405, 4406, 4677, 4678, 4679, 50122, 50124, 50125, 50186, 50187, 50188, 50189, 50314, 50315, 50316, 7439, 7440, 7441, 7442, 7443, 7444, 7445, 7448, 8324, 8913, 8914, 8916, 9629],
  MNK: [12960, 12963, 12966, 12977, 12979, 12990, 12995, 12998, 12999, 14476, 14478, 16473, 16474, 16475, 16476, 17674, 17675, 17676, 17677, 17719, 17720, 17721, 17722, 17723, 17724, 17725, 17726, 3543, 3545, 3546, 3547, 4262, 4287, 4288, 50160, 50161, 50245, 50273, 50274, 63, 70, 71, 7394, 7395, 7396, 74, 8780, 8781, 8782, 8783, 8784, 8785, 8787, 8789, 8925],
  DRG: [16477, 16478, 16479, 16480, 17728, 17729, 3553, 3554, 3555, 3556, 3557, 4292, 4293, 50162, 50163, 50247, 50275, 50276, 7397, 7398, 7399, 7400, 86, 8791, 8792, 8793, 8794, 8795, 8796, 8797, 8798, 8799, 8802, 8803, 8804, 8805, 8806, 92, 94, 95, 96, 9640, 75, 78],
  NIN: [16488, 16489, 16491, 16492, 16493, 17413, 17414, 17415, 17416, 17417, 17418, 17419, 17420, 17732, 17733, 17734, 17735, 17736, 17737, 17738, 17739, 2246, 2259, 2260, 2261, 2262, 2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 3563, 3566, 4295, 50165, 50166, 50167, 50250, 50279, 50280, 7401, 7402, 7403, 8807, 8808, 8809, 8810, 8812, 8814, 8815, 8816, 8820, 9461],
  SAM: [16481, 16482, 16483, 16484, 16485, 16486, 16487, 17740, 17741, 17742, 17743, 17744, 50208, 50215, 50277, 50278, 7477, 7478, 7479, 7480, 7481, 7482, 7483, 7484, 7485, 7486, 7487, 7488, 7489, 7490, 7491, 7492, 7493, 7494, 7495, 7496, 7497, 7498, 7499, 7501, 7502, 7855, 7857, 7867, 8821, 8822, 8823, 8824, 8825, 8826, 8828, 8829, 8830, 8831, 8833],
  BRD: [10023, 114, 116, 117, 118, 13007, 14479, 16494, 16495, 16496, 17678, 17679, 17680, 17681, 17682, 17745, 17747, 3558, 3559, 3560, 3561, 3562, 4294, 50168, 50169, 50282, 50283, 50284, 50285, 50286, 50287, 7404, 7405, 7406, 7407, 7408, 7409, 8836, 8837, 8838, 8839, 8841, 8842, 8843, 8844, 9625, 106],
  MCH: [16497, 16498, 16499, 16500, 16501, 16502, 16503, 16504, 16766, 16889, 17206, 17209, 17749, 17750, 17751, 17752, 17753, 17754, 2864, 2866, 2868, 2870, 2872, 2873, 2874, 2876, 2878, 2890, 4276, 4675, 4676, 50117, 50119, 50288, 50289, 50290, 50291, 50292, 50293, 50294, 7410, 7411, 7412, 7413, 7414, 7415, 7416, 7418, 8848, 8849, 8850, 8851, 8853, 8855],
  DNC: [17756, 17757, 17758, 17759, 17760, 17761, 17762, 17763, 17764, 17765, 17766, 17767, 17768, 17769, 17770, 17771, 17772, 17773, 17824, 17825, 17826, 17827, 17828, 17829, 18076, 15989, 15990, 15993, 15997, 15999, 16000, 16001, 16002, 16003, 16191, 16192, 15991, 15994, 16007, 50252, 15995, 15992, 15996, 16008, 16010, 50251, 16015, 16012, 16006, 18073, 50253, 16011, 16009, 50254, 15998, 16004, 16193, 16194, 16195, 16196, 16013, 16005, 50255, 50256, 16014],
  BLM: [14477, 153, 154, 158, 159, 162, 16505, 16506, 16507, 17683, 17684, 17685, 17686, 17687, 17774, 17775, 3573, 3574, 3575, 3576, 3577, 4298, 50171, 50172, 50173, 50174, 50295, 50296, 50297, 50321, 50322, 7419, 7420, 7421, 7422, 8858, 8859, 8860, 8861, 8862, 8863, 8864, 8865, 8866, 8867, 8869, 9637, 149, 155, 141, 152],
  SMN: [16510, 16511, 16513, 16514, 16515, 16516, 16517, 16518, 16519, 16522, 16523, 16549, 16795, 16796, 16797, 16798, 16799, 16800, 16801, 16802, 16803, 17777, 17778, 17779, 17780, 17781, 17782, 17783, 17784, 17785, 180, 184, 3578, 3579, 3580, 3581, 3582, 4299, 50176, 50177, 50178, 50213, 50217, 50298, 50299, 50300, 50301, 50302, 7423, 7424, 7425, 7426, 7427, 7428, 7429, 7449, 7450, 787, 788, 791, 792, 794, 796, 797, 798, 800, 801, 8872, 8873, 8874, 8877, 8878, 8879, 8880, 8881, 9014, 9432],
  RDM: [10025, 16524, 16525, 16526, 16527, 16528, 16529, 16530, 17786, 17787, 17788, 50195, 50200, 50201, 50216, 50303, 50304, 50305, 50306, 7503, 7504, 7505, 7506, 7507, 7509, 7510, 7511, 7512, 7513, 7514, 7515, 7516, 7517, 7518, 7519, 7520, 7521, 7523, 7524, 7525, 7526, 7527, 7528, 7529, 7530, 8882, 8883, 8884, 8885, 8887, 8888, 8889, 8890, 8891, 8892, 9433, 9434],
  BLU: [11715, 11383, 11384, 11385, 11386, 11387, 11388, 11389, 11390, 11391, 11392, 11393, 11394, 11395, 11396, 11397, 11398, 11399, 11400, 11401, 11402, 11403, 11404, 11405, 11406, 11407, 11408, 11409, 11410, 11411, 11412, 11413, 11414, 11415, 11416, 11417, 11418, 11419, 11420, 11421, 11422, 11423, 11424, 11425, 11426, 11427, 11428, 11429, 11430, 11431, 50219, 50220, 50221, 50222, 50223, 50224]
});
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/CombatantState.ts
class CombatantState {
  constructor(posX, posY, posZ, heading, targetable, hp, maxHp, mp, maxMp) {
    this.posX = posX;
    this.posY = posY;
    this.posZ = posZ;
    this.heading = heading;
    this.targetable = targetable;
    this.hp = hp;
    this.maxHp = maxHp;
    this.mp = mp;
    this.maxMp = maxMp;
  }

  partialClone(props) {
    var _props$posX, _props$posY, _props$posZ, _props$heading, _props$targetable, _props$hp, _props$maxHp, _props$mp, _props$maxMp;

    return new CombatantState((_props$posX = props.posX) !== null && _props$posX !== void 0 ? _props$posX : this.posX, (_props$posY = props.posY) !== null && _props$posY !== void 0 ? _props$posY : this.posY, (_props$posZ = props.posZ) !== null && _props$posZ !== void 0 ? _props$posZ : this.posZ, (_props$heading = props.heading) !== null && _props$heading !== void 0 ? _props$heading : this.heading, (_props$targetable = props.targetable) !== null && _props$targetable !== void 0 ? _props$targetable : this.targetable, (_props$hp = props.hp) !== null && _props$hp !== void 0 ? _props$hp : this.hp, (_props$maxHp = props.maxHp) !== null && _props$maxHp !== void 0 ? _props$maxHp : this.maxHp, (_props$mp = props.mp) !== null && _props$mp !== void 0 ? _props$mp : this.mp, (_props$maxMp = props.maxMp) !== null && _props$maxMp !== void 0 ? _props$maxMp : this.maxMp);
  }

  toPluginState() {
    return {
      PosX: this.posX,
      PosY: this.posY,
      PosZ: this.posZ,
      Heading: this.heading,
      CurrentHP: this.hp,
      MaxHP: this.maxHp,
      CurrentMP: this.mp,
      MaxMP: this.maxMp
    };
  }

}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent.ts
function LineEvent_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }


const fields = {
  event: 0,
  timestamp: 1
};
/**
 * Generic class to track an FFXIV log line
 */

class LineEvent {
  constructor(repo, networkLine, parts) {
    var _parts$fields$timesta, _parts$fields$event, _parts$slice$;

    LineEvent_defineProperty(this, "offset", 0);

    LineEvent_defineProperty(this, "invalid", false);

    LineEvent_defineProperty(this, "index", 0);

    this.networkLine = networkLine;
    const timestampString = (_parts$fields$timesta = parts[fields.timestamp]) !== null && _parts$fields$timesta !== void 0 ? _parts$fields$timesta : '0';
    this.tzOffsetMillis = getTimezoneOffsetMillis(timestampString);
    this.decEvent = parseInt((_parts$fields$event = parts[fields.event]) !== null && _parts$fields$event !== void 0 ? _parts$fields$event : '0');
    this.hexEvent = EmulatorCommon.zeroPad(this.decEvent.toString(16).toUpperCase());
    this.timestamp = new Date(timestampString).getTime();
    this.checksum = (_parts$slice$ = parts.slice(-1)[0]) !== null && _parts$slice$ !== void 0 ? _parts$slice$ : '';
    repo.updateTimestamp(this.timestamp);
    this.convertedLine = this.prefix() + parts.slice(2, -1).join(':').replace('|', ':');
  }

  prefix() {
    const timeString = EmulatorCommon.timeToTimeString(this.timestamp, this.tzOffsetMillis, true);
    return '[' + timeString + '] ' + this.hexEvent + ':';
  }

  static isDamageHallowed(damage) {
    return (parseInt(damage, 16) & parseInt('1000', 16)) > 0;
  }

  static isDamageBig(damage) {
    return (parseInt(damage, 16) & parseInt('4000', 16)) > 0;
  }

  static calculateDamage(damage) {
    if (LineEvent.isDamageHallowed(damage)) return 0;
    damage = EmulatorCommon.zeroPad(damage, 8);
    const parts = [damage.substr(0, 2), damage.substr(2, 2), damage.substr(4, 2), damage.substr(6, 2)];
    if (!LineEvent.isDamageBig(damage)) return parseInt(parts.slice(0, 2).reverse().join(''), 16);
    return parseInt(parts[3] + parts[0] + (parseInt(parts[1], 16) - parseInt(parts[3], 16)).toString(16), 16);
  }

} // Type guards for these interfaces require their own descriptor property
// because we don't want every line event with an id/name
// to update combatant state, for example

const isLineEventSource = line => {
  return 'isSource' in line;
};
const isLineEventTarget = line => {
  return 'isTarget' in line;
};
const isLineEventJobLevel = line => {
  return 'isJobLevel' in line;
};
const isLineEventAbility = line => {
  return 'isAbility' in line;
};
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/CombatantTracker.ts
function CombatantTracker_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






class CombatantTracker {
  constructor(logLines, language) {
    CombatantTracker_defineProperty(this, "combatants", {});

    CombatantTracker_defineProperty(this, "partyMembers", []);

    CombatantTracker_defineProperty(this, "enemies", []);

    CombatantTracker_defineProperty(this, "others", []);

    CombatantTracker_defineProperty(this, "pets", []);

    CombatantTracker_defineProperty(this, "initialStates", {});

    this.language = language;
    this.firstTimestamp = Number.MAX_SAFE_INTEGER;
    this.lastTimestamp = 0;
    this.initialize(logLines); // Clear initialStates after we initialize, we don't need it anymore

    this.initialStates = {};
  }

  initialize(logLines) {
    // First pass: Get list of combatants, figure out where they
    // start at if possible
    for (const line of logLines) {
      this.firstTimestamp = Math.min(this.firstTimestamp, line.timestamp);
      this.lastTimestamp = Math.max(this.lastTimestamp, line.timestamp);
      if (isLineEventSource(line)) this.addCombatantFromLine(line);
      if (isLineEventTarget(line)) this.addCombatantFromTargetLine(line);
    } // Between passes: Create our initial combatant states


    for (const id in this.initialStates) {
      var _this$initialStates$i, _this$combatants$id, _state$targetable;

      const state = (_this$initialStates$i = this.initialStates[id]) !== null && _this$initialStates$i !== void 0 ? _this$initialStates$i : {};
      (_this$combatants$id = this.combatants[id]) === null || _this$combatants$id === void 0 ? void 0 : _this$combatants$id.pushState(this.firstTimestamp, new CombatantState(Number(state.posX), Number(state.posY), Number(state.posZ), Number(state.heading), (_state$targetable = state.targetable) !== null && _state$targetable !== void 0 ? _state$targetable : false, Number(state.hp), Number(state.maxHp), Number(state.mp), Number(state.maxMp)));
    } // Second pass: Analyze combatant information for tracking


    const eventTracker = {};

    for (const line of logLines) {
      if (isLineEventSource(line)) {
        const state = this.extractStateFromLine(line);

        if (state) {
          var _eventTracker$line$id, _this$combatants$line;

          eventTracker[line.id] = (_eventTracker$line$id = eventTracker[line.id]) !== null && _eventTracker$line$id !== void 0 ? _eventTracker$line$id : 0;
          ++eventTracker[line.id];
          (_this$combatants$line = this.combatants[line.id]) === null || _this$combatants$line === void 0 ? void 0 : _this$combatants$line.pushPartialState(line.timestamp, state);
        }
      }

      if (isLineEventTarget(line)) {
        const state = this.extractStateFromTargetLine(line);

        if (state) {
          var _eventTracker$line$ta, _this$combatants$line2;

          eventTracker[line.targetId] = (_eventTracker$line$ta = eventTracker[line.targetId]) !== null && _eventTracker$line$ta !== void 0 ? _eventTracker$line$ta : 0;
          ++eventTracker[line.targetId];
          (_this$combatants$line2 = this.combatants[line.targetId]) === null || _this$combatants$line2 === void 0 ? void 0 : _this$combatants$line2.pushPartialState(line.timestamp, state);
        }
      }
    } // Figure out party/enemy/other status


    const petNames = pet_names[this.language];
    this.others = this.others.filter(ID => {
      var _this$combatants$ID, _this$combatants$ID2, _this$combatants$ID$n, _this$combatants$ID3, _eventTracker$ID;

      if (((_this$combatants$ID = this.combatants[ID]) === null || _this$combatants$ID === void 0 ? void 0 : _this$combatants$ID.job) !== undefined && ((_this$combatants$ID2 = this.combatants[ID]) === null || _this$combatants$ID2 === void 0 ? void 0 : _this$combatants$ID2.job) !== 'NONE' && ID.startsWith('1')) {
        this.partyMembers.push(ID);
        return false;
      } else if (petNames.includes((_this$combatants$ID$n = (_this$combatants$ID3 = this.combatants[ID]) === null || _this$combatants$ID3 === void 0 ? void 0 : _this$combatants$ID3.name) !== null && _this$combatants$ID$n !== void 0 ? _this$combatants$ID$n : '')) {
        this.pets.push(ID);
        return false;
      } else if (((_eventTracker$ID = eventTracker[ID]) !== null && _eventTracker$ID !== void 0 ? _eventTracker$ID : 0) > 0) {
        this.enemies.push(ID);
        return false;
      }

      return true;
    }); // Main combatant is the one that took the most actions

    this.mainCombatantID = this.enemies.sort((l, r) => {
      var _eventTracker$r, _eventTracker$l;

      return ((_eventTracker$r = eventTracker[r]) !== null && _eventTracker$r !== void 0 ? _eventTracker$r : 0) - ((_eventTracker$l = eventTracker[l]) !== null && _eventTracker$l !== void 0 ? _eventTracker$l : 0);
    })[0];
  }

  addCombatantFromLine(line) {
    var _this$initialStates$l, _this$extractStateFro, _initState$posX, _initState$posY, _initState$posZ, _initState$heading, _initState$targetable, _initState$hp, _initState$maxHp, _initState$mp, _initState$maxMp;

    const combatant = this.initCombatant(line.id, line.name);
    const initState = (_this$initialStates$l = this.initialStates[line.id]) !== null && _this$initialStates$l !== void 0 ? _this$initialStates$l : {};
    const extractedState = (_this$extractStateFro = this.extractStateFromLine(line)) !== null && _this$extractStateFro !== void 0 ? _this$extractStateFro : {};
    initState.posX = (_initState$posX = initState.posX) !== null && _initState$posX !== void 0 ? _initState$posX : extractedState.posX;
    initState.posY = (_initState$posY = initState.posY) !== null && _initState$posY !== void 0 ? _initState$posY : extractedState.posY;
    initState.posZ = (_initState$posZ = initState.posZ) !== null && _initState$posZ !== void 0 ? _initState$posZ : extractedState.posZ;
    initState.heading = (_initState$heading = initState.heading) !== null && _initState$heading !== void 0 ? _initState$heading : extractedState.heading;
    initState.targetable = (_initState$targetable = initState.targetable) !== null && _initState$targetable !== void 0 ? _initState$targetable : extractedState.targetable;
    initState.hp = (_initState$hp = initState.hp) !== null && _initState$hp !== void 0 ? _initState$hp : extractedState.hp;
    initState.maxHp = (_initState$maxHp = initState.maxHp) !== null && _initState$maxHp !== void 0 ? _initState$maxHp : extractedState.maxHp;
    initState.mp = (_initState$mp = initState.mp) !== null && _initState$mp !== void 0 ? _initState$mp : extractedState.mp;
    initState.maxMp = (_initState$maxMp = initState.maxMp) !== null && _initState$maxMp !== void 0 ? _initState$maxMp : extractedState.maxMp;

    if (isLineEventJobLevel(line)) {
      var _this$combatants$line3, _this$combatants$line4, _this$combatants$line5, _this$combatants$line6;

      combatant.job = (_this$combatants$line3 = (_this$combatants$line4 = this.combatants[line.id]) === null || _this$combatants$line4 === void 0 ? void 0 : _this$combatants$line4.job) !== null && _this$combatants$line3 !== void 0 ? _this$combatants$line3 : line.job;
      combatant.level = (_this$combatants$line5 = (_this$combatants$line6 = this.combatants[line.id]) === null || _this$combatants$line6 === void 0 ? void 0 : _this$combatants$line6.level) !== null && _this$combatants$line5 !== void 0 ? _this$combatants$line5 : line.level;
    }

    if (isLineEventAbility(line)) {
      if (!combatant.job && !line.id.startsWith('4') && line.abilityId !== undefined) combatant.job = CombatantJobSearch.getJob(line.abilityId);
    }
  }

  addCombatantFromTargetLine(line) {
    var _this$initialStates$l2, _this$extractStateFro2, _initState$posX2, _initState$posY2, _initState$posZ2, _initState$heading2, _initState$hp2, _initState$maxHp2, _initState$mp2, _initState$maxMp2;

    this.initCombatant(line.targetId, line.targetName);
    const initState = (_this$initialStates$l2 = this.initialStates[line.targetId]) !== null && _this$initialStates$l2 !== void 0 ? _this$initialStates$l2 : {};
    const extractedState = (_this$extractStateFro2 = this.extractStateFromTargetLine(line)) !== null && _this$extractStateFro2 !== void 0 ? _this$extractStateFro2 : {};
    initState.posX = (_initState$posX2 = initState.posX) !== null && _initState$posX2 !== void 0 ? _initState$posX2 : extractedState.posX;
    initState.posY = (_initState$posY2 = initState.posY) !== null && _initState$posY2 !== void 0 ? _initState$posY2 : extractedState.posY;
    initState.posZ = (_initState$posZ2 = initState.posZ) !== null && _initState$posZ2 !== void 0 ? _initState$posZ2 : extractedState.posZ;
    initState.heading = (_initState$heading2 = initState.heading) !== null && _initState$heading2 !== void 0 ? _initState$heading2 : extractedState.heading;
    initState.hp = (_initState$hp2 = initState.hp) !== null && _initState$hp2 !== void 0 ? _initState$hp2 : extractedState.hp;
    initState.maxHp = (_initState$maxHp2 = initState.maxHp) !== null && _initState$maxHp2 !== void 0 ? _initState$maxHp2 : extractedState.maxHp;
    initState.mp = (_initState$mp2 = initState.mp) !== null && _initState$mp2 !== void 0 ? _initState$mp2 : extractedState.mp;
    initState.maxMp = (_initState$maxMp2 = initState.maxMp) !== null && _initState$maxMp2 !== void 0 ? _initState$maxMp2 : extractedState.maxMp;
  }

  extractStateFromLine(line) {
    const state = {};
    if (line.x !== undefined) state.posX = line.x;
    if (line.y !== undefined) state.posY = line.y;
    if (line.z !== undefined) state.posZ = line.z;
    if (line.heading !== undefined) state.heading = line.heading;
    if (line.targetable !== undefined) state.targetable = line.targetable;
    if (line.hp !== undefined) state.hp = line.hp;
    if (line.maxHp !== undefined) state.maxHp = line.maxHp;
    if (line.mp !== undefined) state.mp = line.mp;
    if (line.maxMp !== undefined) state.maxMp = line.maxMp;
    return state;
  }

  extractStateFromTargetLine(line) {
    const state = {};
    if (line.targetX !== undefined) state.posX = line.targetX;
    if (line.targetY !== undefined) state.posY = line.targetY;
    if (line.targetZ !== undefined) state.posZ = line.targetZ;
    if (line.targetHeading !== undefined) state.heading = line.targetHeading;
    if (line.targetHp !== undefined) state.hp = line.targetHp;
    if (line.targetMaxHp !== undefined) state.maxHp = line.targetMaxHp;
    if (line.targetMp !== undefined) state.mp = line.targetMp;
    if (line.targetMaxMp !== undefined) state.maxMp = line.targetMaxMp;
    return state;
  }

  initCombatant(id, name) {
    let combatant = this.combatants[id];

    if (combatant === undefined) {
      combatant = this.combatants[id] = new Combatant(id, name);
      this.others.push(id);
      this.initialStates[id] = {
        targetable: true
      };
    } else if (combatant.name === '') {
      combatant.setName(name);
    }

    return combatant;
  }

  getMainCombatantName() {
    var _this$combatants$this, _this$combatants$this2;

    if (this.mainCombatantID) return (_this$combatants$this = (_this$combatants$this2 = this.combatants[this.mainCombatantID]) === null || _this$combatants$this2 === void 0 ? void 0 : _this$combatants$this2.name) !== null && _this$combatants$this !== void 0 ? _this$combatants$this : 'Unknown';
    return 'Unknown';
  }

}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LogRepository.ts
function LogRepository_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class LogRepository {
  constructor() {
    LogRepository_defineProperty(this, "Combatants", {});

    LogRepository_defineProperty(this, "firstTimestamp", Number.MAX_SAFE_INTEGER);
  }

  updateTimestamp(timestamp) {
    this.firstTimestamp = Math.min(this.firstTimestamp, timestamp);
  }

  updateCombatant(id, c) {
    id = id.toUpperCase();

    if (id && id.length) {
      let combatant = this.Combatants[id];

      if (combatant === undefined) {
        combatant = {
          name: c.name,
          job: c.job,
          spawn: c.spawn,
          despawn: c.despawn
        };
        this.Combatants[id] = combatant;
      } else {
        combatant.name = c.name || combatant.name;
        combatant.job = c.job || combatant.job;
        combatant.spawn = Math.min(combatant.spawn, c.spawn);
        combatant.despawn = Math.max(combatant.despawn, c.despawn);
      }
    }
  }

  resolveName(id, name, fallbackId = null, fallbackName = null) {
    var _this$Combatants$id$n, _this$Combatants$id;

    let ret = name;

    if (fallbackId !== null) {
      if (id === 'E0000000' && ret === '') {
        if (fallbackId.startsWith('4')) ret = fallbackName !== null && fallbackName !== void 0 ? fallbackName : '';else ret = 'Unknown';
      }
    }

    if (ret === '') ret = (_this$Combatants$id$n = (_this$Combatants$id = this.Combatants[id]) === null || _this$Combatants$id === void 0 ? void 0 : _this$Combatants$id.name) !== null && _this$Combatants$id$n !== void 0 ? _this$Combatants$id$n : '';
    return ret;
  }

}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/EventBus.ts
function EventBus_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// EventBus by definition requires generic parameters.
// Map our stand-in generics to actual generics here.
// eslint-disable-next-line @typescript-eslint/ban-types
// eslint-disable-next-line @typescript-eslint/no-explicit-any

/**
 * This is a base class that classes can extend to inherit event bus capabilities.
 * This allows other classes to listen for events with the `on` function.
 * The inheriting class can fire those events with the `dispatch` function.
 */
class EventBus {
  constructor() {
    EventBus_defineProperty(this, "listeners", {});
  }

  /**
   * Subscribe to an event
   *
   * @param event The event(s) to subscribe to, space separated
   * @param callback The callback to invoke
   * @param scope Optional. The scope to apply the function against
   * @returns The callbacks registered to the event(s)
   */
  on(event, callback, scope) {
    var _scope;

    const events = event.split(' ');
    const ret = [];
    scope = (_scope = scope) !== null && _scope !== void 0 ? _scope : typeof window === 'undefined' ? {} : window;

    for (const event of events) {
      var _this$listeners, _this$listeners$event, _this$listeners$event2;

      const events = (_this$listeners$event = (_this$listeners = this.listeners)[event]) !== null && _this$listeners$event !== void 0 ? _this$listeners$event : _this$listeners[event] = [];
      if (callback !== undefined) events.push({
        event: event,
        scope: scope,
        callback: callback
      });
      ret.push(...((_this$listeners$event2 = this.listeners[event]) !== null && _this$listeners$event2 !== void 0 ? _this$listeners$event2 : []));
    }

    return ret;
  }
  /**
   * Dispatch an event to any subscribers
   *
   * @param event The event to dispatch
   * @param eventArguments The event arguments to pass to listeners
   * @returns A promise that can be await'd or ignored
   */


  async dispatch(event, ...eventArguments) {
    if (this.listeners[event] === undefined) return;

    for (const l of (_this$listeners$event3 = this.listeners[event]) !== null && _this$listeners$event3 !== void 0 ? _this$listeners$event3 : []) {
      var _this$listeners$event3;

      const res = l.callback.apply(l.scope, eventArguments);
      await Promise.resolve(res);
    }
  }

}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x00.ts
function LineEvent0x00_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



const LineEvent0x00_fields = netlog_defs.GameLog.fields; // Chat event

class LineEvent0x00 extends LineEvent {
  constructor(repo, line, parts) {
    var _parts$fields$code, _parts$fields$name;

    super(repo, line, parts);
    this.type = (_parts$fields$code = parts[LineEvent0x00_fields.code]) !== null && _parts$fields$code !== void 0 ? _parts$fields$code : '';
    this.speaker = (_parts$fields$name = parts[LineEvent0x00_fields.name]) !== null && _parts$fields$name !== void 0 ? _parts$fields$name : '';
    this.message = parts.slice(4, -1).join('|'); // The exact reason for this check isn't clear anymore but may be related to
    // https://github.com/ravahn/FFXIV_ACT_Plugin/issues/250

    if (this.message.split('\u001f\u001f').length > 1) this.invalid = true;
    this.convertedLine = this.prefix() + this.type + ':' + ( // If speaker is blank, it's excluded from the converted line
    this.speaker !== '' ? this.speaker + ':' : '') + this.message.trim();
    this.convertedLine = LineEvent00.replaceChatSymbols(this.convertedLine);
  }

  static replaceChatSymbols(line) {
    for (const rep of LineEvent00.chatSymbolReplacements) line = line.replace(rep.Search, rep.Replace);

    return line;
  }

}

LineEvent0x00_defineProperty(LineEvent0x00, "chatSymbolReplacements", [{
  Search: /:\uE06F/g,
  Replace: ':⇒',
  Type: 'Symbol'
}, {
  Search: / \uE0BB\uE05C/g,
  Replace: ' ',
  Type: 'Positive Effect'
}, {
  Search: / \uE0BB\uE05B/g,
  Replace: ' ',
  Type: 'Negative Effect'
}]);

class LineEvent00 extends LineEvent0x00 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x01.ts



const LineEvent0x01_fields = netlog_defs.ChangeZone.fields; // Zone change event

class LineEvent0x01 extends LineEvent {
  constructor(repo, networkLine, parts) {
    var _parts$fields$id, _parts$fields$name;

    super(repo, networkLine, parts);
    this.zoneId = (_parts$fields$id = parts[LineEvent0x01_fields.id]) !== null && _parts$fields$id !== void 0 ? _parts$fields$id : '';
    this.zoneName = (_parts$fields$name = parts[LineEvent0x01_fields.name]) !== null && _parts$fields$name !== void 0 ? _parts$fields$name : '';
    this.zoneNameProperCase = EmulatorCommon.properCase(this.zoneName);
    this.convertedLine = this.prefix() + 'Changed Zone to ' + this.zoneNameProperCase + '.';
  }

}
class LineEvent01 extends LineEvent0x01 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x02.ts


const LineEvent0x02_fields = netlog_defs.ChangedPlayer.fields; // Player change event

class LineEvent0x02 extends LineEvent {
  constructor(repo, line, parts) {
    var _parts$fields$id$toUp, _parts$fields$id, _parts$fields$name;

    super(repo, line, parts);
    this.id = (_parts$fields$id$toUp = (_parts$fields$id = parts[LineEvent0x02_fields.id]) === null || _parts$fields$id === void 0 ? void 0 : _parts$fields$id.toUpperCase()) !== null && _parts$fields$id$toUp !== void 0 ? _parts$fields$id$toUp : '';
    this.name = (_parts$fields$name = parts[LineEvent0x02_fields.name]) !== null && _parts$fields$name !== void 0 ? _parts$fields$name : '';
    this.convertedLine = this.prefix() + 'Changed primary player to ' + this.name + '.';
  }

}
class LineEvent02 extends LineEvent0x02 {}
;// CONCATENATED MODULE: ./resources/overlay_plugin_api.ts
// OverlayPlugin API setup
let inited = false;
let wsUrl = null;
let ws = null;
let queue = [];
let rseqCounter = 0;
const responsePromises = {};
const subscribers = {};

const sendMessage = (msg, cb) => {
  if (ws) {
    if (queue) queue.push(msg);else ws.send(JSON.stringify(msg));
  } else {
    if (queue) queue.push([msg, cb]);else window.OverlayPluginApi.callHandler(JSON.stringify(msg), cb);
  }
};

const processEvent = msg => {
  init();
  const subs = subscribers[msg.type];
  subs === null || subs === void 0 ? void 0 : subs.forEach(sub => {
    try {
      sub(msg);
    } catch (e) {
      console.error(e);
    }
  });
};

const dispatchOverlayEvent = processEvent;
const addOverlayListener = (event, cb) => {
  var _subscribers$event;

  init();

  if (!subscribers[event]) {
    subscribers[event] = [];

    if (!queue) {
      sendMessage({
        call: 'subscribe',
        events: [event]
      });
    }
  }

  (_subscribers$event = subscribers[event]) === null || _subscribers$event === void 0 ? void 0 : _subscribers$event.push(cb);
};
const removeOverlayListener = (event, cb) => {
  init();

  if (subscribers[event]) {
    const list = subscribers[event];
    const pos = list === null || list === void 0 ? void 0 : list.indexOf(cb);
    if (pos !== undefined && pos > -1) list === null || list === void 0 ? void 0 : list.splice(pos, 1);
  }
};

const callOverlayHandlerInternal = (_msg // eslint-disable-next-line @typescript-eslint/no-explicit-any
) => {
  init();
  const msg = { ..._msg,
    rseq: 0
  };
  let p;

  if (ws) {
    msg.rseq = rseqCounter++;
    p = new Promise(resolve => {
      responsePromises[msg.rseq] = resolve;
    });
    sendMessage(msg);
  } else {
    p = new Promise(resolve => {
      sendMessage(msg, data => {
        resolve(data === null ? null : JSON.parse(data));
      });
    });
  }

  return p;
};

const callOverlayHandlerOverrideMap = {};
const callOverlayHandler = (_msg // eslint-disable-next-line @typescript-eslint/no-explicit-any
) => {
  var _callOverlayHandlerOv;

  init(); // If this `as` is incorrect, then it will not find an override.
  // TODO: we could also replace this with a type guard.

  const type = _msg.call;
  const callFunc = (_callOverlayHandlerOv = callOverlayHandlerOverrideMap[type]) !== null && _callOverlayHandlerOv !== void 0 ? _callOverlayHandlerOv : callOverlayHandlerInternal; // The `IOverlayHandler` type guarantees that parameters/return type match
  // one of the overlay handlers.  The OverrideMap also only stores functions
  // that match by the discriminating `call` field, and so any overrides
  // should be correct here.
  // eslint-disable-next-line max-len
  // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-argument

  return callFunc(_msg);
};
const setOverlayHandlerOverride = (type, override) => {
  if (!override) {
    delete callOverlayHandlerOverrideMap[type];
    return;
  }

  callOverlayHandlerOverrideMap[type] = override;
};
const init = () => {
  if (inited) return;

  if (typeof window !== 'undefined') {
    wsUrl = new URLSearchParams(window.location.search).get('OVERLAY_WS');

    if (wsUrl !== null) {
      const connectWs = function (wsUrl) {
        ws = new WebSocket(wsUrl);
        ws.addEventListener('error', e => {
          console.error(e);
        });
        ws.addEventListener('open', () => {
          var _queue;

          console.log('Connected!');
          const q = (_queue = queue) !== null && _queue !== void 0 ? _queue : [];
          queue = null;
          sendMessage({
            call: 'subscribe',
            events: Object.keys(subscribers)
          });

          for (const msg of q) {
            if (!Array.isArray(msg)) sendMessage(msg);
          }
        });
        ws.addEventListener('message', _msg => {
          try {
            if (typeof _msg.data !== 'string') {
              console.error('Invalid message data received: ', _msg);
              return;
            }

            const msg = JSON.parse(_msg.data);

            if (msg.rseq !== undefined && responsePromises[msg.rseq]) {
              var _responsePromises$msg;

              (_responsePromises$msg = responsePromises[msg.rseq]) === null || _responsePromises$msg === void 0 ? void 0 : _responsePromises$msg.call(responsePromises, msg);
              delete responsePromises[msg.rseq];
            } else {
              processEvent(msg);
            }
          } catch (e) {
            console.error('Invalid message received: ', _msg);
            return;
          }
        });
        ws.addEventListener('close', () => {
          queue = null;
          console.log('Trying to reconnect...'); // Don't spam the server with retries.

          window.setTimeout(() => {
            connectWs(wsUrl);
          }, 300);
        });
      };

      connectWs(wsUrl);
    } else {
      const waitForApi = function () {
        var _queue2;

        if (!window.OverlayPluginApi || !window.OverlayPluginApi.ready) {
          window.setTimeout(waitForApi, 300);
          return;
        }

        const q = (_queue2 = queue) !== null && _queue2 !== void 0 ? _queue2 : [];
        queue = null;
        window.__OverlayCallback = processEvent;
        sendMessage({
          call: 'subscribe',
          events: Object.keys(subscribers)
        });

        for (const item of q) {
          if (Array.isArray(item)) sendMessage(item[0], item[1]);
        }
      };

      waitForApi();
    } // Here the OverlayPlugin API is registered to the window object,
    // but this is mainly for backwards compatibility.For cactbot's built-in files,
    // it is recommended to use the various functions exported in resources/overlay_plugin_api.ts.


    window.addOverlayListener = addOverlayListener;
    window.removeOverlayListener = removeOverlayListener;
    window.callOverlayHandler = callOverlayHandler;
    window.dispatchOverlayEvent = dispatchOverlayEvent;
  }

  inited = true;
};
;// CONCATENATED MODULE: ./resources/util.ts
 // TODO: it'd be nice to not repeat job names, but at least Record enforces that all are set.

const nameToJobEnum = {
  NONE: 0,
  GLA: 1,
  PGL: 2,
  MRD: 3,
  LNC: 4,
  ARC: 5,
  CNJ: 6,
  THM: 7,
  CRP: 8,
  BSM: 9,
  ARM: 10,
  GSM: 11,
  LTW: 12,
  WVR: 13,
  ALC: 14,
  CUL: 15,
  MIN: 16,
  BTN: 17,
  FSH: 18,
  PLD: 19,
  MNK: 20,
  WAR: 21,
  DRG: 22,
  BRD: 23,
  WHM: 24,
  BLM: 25,
  ACN: 26,
  SMN: 27,
  SCH: 28,
  ROG: 29,
  NIN: 30,
  MCH: 31,
  DRK: 32,
  AST: 33,
  SAM: 34,
  RDM: 35,
  BLU: 36,
  GNB: 37,
  DNC: 38
};
const allJobs = Object.keys(nameToJobEnum);
const allRoles = ['tank', 'healer', 'dps', 'crafter', 'gatherer', 'none'];
const tankJobs = ['GLA', 'PLD', 'MRD', 'WAR', 'DRK', 'GNB'];
const healerJobs = ['CNJ', 'WHM', 'SCH', 'AST'];
const meleeDpsJobs = ['PGL', 'MNK', 'LNC', 'DRG', 'ROG', 'NIN', 'SAM'];
const rangedDpsJobs = ['ARC', 'BRD', 'DNC', 'MCH'];
const casterDpsJobs = ['BLU', 'RDM', 'BLM', 'SMN', 'ACN', 'THM'];
const dpsJobs = [...meleeDpsJobs, ...rangedDpsJobs, ...casterDpsJobs];
const craftingJobs = ['CRP', 'BSM', 'ARM', 'GSM', 'LTW', 'WVR', 'ALC', 'CUL'];
const gatheringJobs = ['MIN', 'BTN', 'FSH'];
const stunJobs = ['BLU', ...tankJobs, ...meleeDpsJobs];
const silenceJobs = ['BLU', ...tankJobs, ...rangedDpsJobs];
const sleepJobs = ['BLM', 'BLU', ...healerJobs];
const feintJobs = [...meleeDpsJobs];
const addleJobs = [...casterDpsJobs];
const cleanseJobs = ['BLU', 'BRD', ...healerJobs];

const jobToRoleMap = (() => {
  const addToMap = (map, jobs, role) => {
    jobs.forEach(job => map.set(job, role));
  };

  const map = new Map([['NONE', 'none']]);
  addToMap(map, tankJobs, 'tank');
  addToMap(map, healerJobs, 'healer');
  addToMap(map, dpsJobs, 'dps');
  addToMap(map, craftingJobs, 'crafter');
  addToMap(map, gatheringJobs, 'gatherer');
  return map;
})();

const watchCombatantMap = [];

const shouldCancelWatch = (params, entry) => {
  if (entry.cancel) return true;
  if (params.maxDuration !== undefined && Date.now() - entry.start > params.maxDuration) return true;
  return false;
};

const watchCombatant = (params, func) => {
  return new Promise((res, rej) => {
    var _params$delay;

    const delay = (_params$delay = params.delay) !== null && _params$delay !== void 0 ? _params$delay : 1000;
    const call = {
      call: 'getCombatants'
    };
    if (params.ids) call.ids = params.ids;
    if (params.names) call.names = params.names;
    if (params.props) call.props = params.props;
    const entry = {
      cancel: false,
      start: Date.now()
    };
    watchCombatantMap.push(entry);

    const checkFunc = () => {
      if (shouldCancelWatch(params, entry)) {
        rej();
        return;
      }

      void callOverlayHandler(call).then(response => {
        if (entry.cancel) {
          rej();
          return;
        }

        if (func(response)) res();else window.setTimeout(checkFunc, delay);
      });
    };

    window.setTimeout(checkFunc, delay);
  });
};

const Util = {
  jobEnumToJob: id => {
    const job = allJobs.find(job => nameToJobEnum[job] === id);
    return job !== null && job !== void 0 ? job : 'NONE';
  },
  jobToJobEnum: job => nameToJobEnum[job],
  jobToRole: job => {
    const role = jobToRoleMap.get(job);
    return role !== null && role !== void 0 ? role : 'none';
  },
  getAllRoles: () => allRoles,
  isTankJob: job => tankJobs.includes(job),
  isHealerJob: job => healerJobs.includes(job),
  isMeleeDpsJob: job => meleeDpsJobs.includes(job),
  isRangedDpsJob: job => rangedDpsJobs.includes(job),
  isCasterDpsJob: job => casterDpsJobs.includes(job),
  isDpsJob: job => dpsJobs.includes(job),
  isCraftingJob: job => craftingJobs.includes(job),
  isGatheringJob: job => gatheringJobs.includes(job),
  isCombatJob: job => {
    return !craftingJobs.includes(job) && !gatheringJobs.includes(job);
  },
  canStun: job => stunJobs.includes(job),
  canSilence: job => silenceJobs.includes(job),
  canSleep: job => sleepJobs.includes(job),
  canCleanse: job => cleanseJobs.includes(job),
  canFeint: job => feintJobs.includes(job),
  canAddle: job => addleJobs.includes(job),
  watchCombatant: watchCombatant,
  clearWatchCombatants: () => {
    while (watchCombatantMap.length > 0) {
      const watch = watchCombatantMap.pop();
      if (watch) watch.cancel = true;
    }
  }
};
/* harmony default export */ const util = (Util);
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x03.ts
function LineEvent0x03_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





const LineEvent0x03_fields = netlog_defs.AddedCombatant.fields; // Added combatant event

class LineEvent0x03 extends LineEvent {
  constructor(repo, line, parts) {
    var _parts$fields$id$toUp, _parts$fields$id, _parts$fields$name, _parts$fields$job$toU, _parts$fields$job, _parts$fields$level, _parts$fields$ownerId, _parts$fields$ownerId2, _parts$fields$worldId, _parts$fields$world, _parts$fields$npcName, _parts$fields$npcBase, _parts$fields$current, _parts$fields$hp, _parts$fields$current2, _parts$fields$mp, _parts$fields$x, _parts$fields$y, _parts$fields$z, _parts$fields$heading;

    super(repo, line, parts);

    LineEvent0x03_defineProperty(this, "isSource", true);

    LineEvent0x03_defineProperty(this, "isJobLevel", true);

    this.id = (_parts$fields$id$toUp = (_parts$fields$id = parts[LineEvent0x03_fields.id]) === null || _parts$fields$id === void 0 ? void 0 : _parts$fields$id.toUpperCase()) !== null && _parts$fields$id$toUp !== void 0 ? _parts$fields$id$toUp : '';
    this.name = (_parts$fields$name = parts[LineEvent0x03_fields.name]) !== null && _parts$fields$name !== void 0 ? _parts$fields$name : '';
    this.jobIdHex = (_parts$fields$job$toU = (_parts$fields$job = parts[LineEvent0x03_fields.job]) === null || _parts$fields$job === void 0 ? void 0 : _parts$fields$job.toUpperCase()) !== null && _parts$fields$job$toU !== void 0 ? _parts$fields$job$toU : '';
    this.jobId = parseInt(this.jobIdHex, 16);
    this.job = util.jobEnumToJob(this.jobId);
    this.levelString = (_parts$fields$level = parts[LineEvent0x03_fields.level]) !== null && _parts$fields$level !== void 0 ? _parts$fields$level : '';
    this.level = parseInt(this.levelString, 16);
    this.ownerId = (_parts$fields$ownerId = (_parts$fields$ownerId2 = parts[LineEvent0x03_fields.ownerId]) === null || _parts$fields$ownerId2 === void 0 ? void 0 : _parts$fields$ownerId2.toUpperCase()) !== null && _parts$fields$ownerId !== void 0 ? _parts$fields$ownerId : '';
    this.worldId = (_parts$fields$worldId = parts[LineEvent0x03_fields.worldId]) !== null && _parts$fields$worldId !== void 0 ? _parts$fields$worldId : '';
    this.worldName = (_parts$fields$world = parts[LineEvent0x03_fields.world]) !== null && _parts$fields$world !== void 0 ? _parts$fields$world : '';
    this.npcNameId = (_parts$fields$npcName = parts[LineEvent0x03_fields.npcNameId]) !== null && _parts$fields$npcName !== void 0 ? _parts$fields$npcName : '';
    this.npcBaseId = (_parts$fields$npcBase = parts[LineEvent0x03_fields.npcBaseId]) !== null && _parts$fields$npcBase !== void 0 ? _parts$fields$npcBase : '';
    this.hp = parseFloat((_parts$fields$current = parts[LineEvent0x03_fields.currentHp]) !== null && _parts$fields$current !== void 0 ? _parts$fields$current : '');
    this.maxHpString = (_parts$fields$hp = parts[LineEvent0x03_fields.hp]) !== null && _parts$fields$hp !== void 0 ? _parts$fields$hp : '';
    this.maxHp = parseFloat(this.maxHpString);
    this.mp = parseFloat((_parts$fields$current2 = parts[LineEvent0x03_fields.currentMp]) !== null && _parts$fields$current2 !== void 0 ? _parts$fields$current2 : '');
    this.maxMpString = (_parts$fields$mp = parts[LineEvent0x03_fields.mp]) !== null && _parts$fields$mp !== void 0 ? _parts$fields$mp : '';
    this.maxMp = parseFloat(this.maxMpString);
    this.xString = (_parts$fields$x = parts[LineEvent0x03_fields.x]) !== null && _parts$fields$x !== void 0 ? _parts$fields$x : '';
    this.x = parseFloat(this.xString);
    this.yString = (_parts$fields$y = parts[LineEvent0x03_fields.y]) !== null && _parts$fields$y !== void 0 ? _parts$fields$y : '';
    this.y = parseFloat(this.yString);
    this.zString = (_parts$fields$z = parts[LineEvent0x03_fields.z]) !== null && _parts$fields$z !== void 0 ? _parts$fields$z : '';
    this.z = parseFloat(this.zString);
    this.heading = parseFloat((_parts$fields$heading = parts[LineEvent0x03_fields.heading]) !== null && _parts$fields$heading !== void 0 ? _parts$fields$heading : '');
    repo.updateCombatant(this.id, {
      name: this.name,
      spawn: this.timestamp,
      despawn: this.timestamp,
      job: this.jobIdHex
    });
    let combatantName = this.name;
    if (this.worldName !== '') combatantName = combatantName + '(' + this.worldName + ')';
    this.convertedLine = this.prefix() + this.id.toUpperCase() + ':Added new combatant ' + combatantName + '.  Job: ' + this.job + ' Level: ' + this.levelString + ' Max HP: ' + this.maxHpString + ' Max MP: ' + this.maxMpString + ' Pos: (' + this.xString + ',' + this.yString + ',' + this.zString + ')'; // This last part is guesswork for the area between 9 and 10.

    const unknownValue = this.npcNameId + EmulatorCommon.zeroPad(this.npcBaseId, 8 + Math.max(0, 6 - this.npcNameId.length));
    if (unknownValue !== '00000000000000') this.convertedLine += ' (' + unknownValue + ')';
    this.convertedLine += '.';
  }

}
class LineEvent03 extends LineEvent0x03 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x04.ts

// Removed combatant event
// Extend the add combatant event to reduce duplicate code since they're
// the same from a data perspective
class LineEvent0x04 extends LineEvent0x03 {
  constructor(repo, line, parts) {
    super(repo, line, parts);
    this.convertedLine = this.prefix() + this.id.toUpperCase() + ':Removing combatant ' + this.name + '. Max MP: ' + this.maxMpString + '. Pos: (' + this.xString + ',' + this.yString + ',' + this.zString + ')';
  }

}
class LineEvent04 extends LineEvent0x04 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x0C.ts


const LineEvent0x0C_fields = netlog_defs.PlayerStats.fields; // Player stats event

class LineEvent0x0C extends LineEvent {
  constructor(repo, line, parts) {
    var _parts$fields$job, _parts$fields$strengt, _parts$fields$dexteri, _parts$fields$vitalit, _parts$fields$intelli, _parts$fields$mind, _parts$fields$piety, _parts$fields$attackP, _parts$fields$directH, _parts$fields$critica, _parts$fields$attackM, _parts$fields$healMag, _parts$fields$determi, _parts$fields$skillSp, _parts$fields$spellSp, _parts$fields$tenacit;

    super(repo, line, parts);
    this.class = (_parts$fields$job = parts[LineEvent0x0C_fields.job]) !== null && _parts$fields$job !== void 0 ? _parts$fields$job : '';
    this.strength = (_parts$fields$strengt = parts[LineEvent0x0C_fields.strength]) !== null && _parts$fields$strengt !== void 0 ? _parts$fields$strengt : '';
    this.dexterity = (_parts$fields$dexteri = parts[LineEvent0x0C_fields.dexterity]) !== null && _parts$fields$dexteri !== void 0 ? _parts$fields$dexteri : '';
    this.vitality = (_parts$fields$vitalit = parts[LineEvent0x0C_fields.vitality]) !== null && _parts$fields$vitalit !== void 0 ? _parts$fields$vitalit : '';
    this.intelligence = (_parts$fields$intelli = parts[LineEvent0x0C_fields.intelligence]) !== null && _parts$fields$intelli !== void 0 ? _parts$fields$intelli : '';
    this.mind = (_parts$fields$mind = parts[LineEvent0x0C_fields.mind]) !== null && _parts$fields$mind !== void 0 ? _parts$fields$mind : '';
    this.piety = (_parts$fields$piety = parts[LineEvent0x0C_fields.piety]) !== null && _parts$fields$piety !== void 0 ? _parts$fields$piety : '';
    this.attackPower = (_parts$fields$attackP = parts[LineEvent0x0C_fields.attackPower]) !== null && _parts$fields$attackP !== void 0 ? _parts$fields$attackP : '';
    this.directHit = (_parts$fields$directH = parts[LineEvent0x0C_fields.directHit]) !== null && _parts$fields$directH !== void 0 ? _parts$fields$directH : '';
    this.criticalHit = (_parts$fields$critica = parts[LineEvent0x0C_fields.criticalHit]) !== null && _parts$fields$critica !== void 0 ? _parts$fields$critica : '';
    this.attackMagicPotency = (_parts$fields$attackM = parts[LineEvent0x0C_fields.attackMagicPotency]) !== null && _parts$fields$attackM !== void 0 ? _parts$fields$attackM : '';
    this.healMagicPotency = (_parts$fields$healMag = parts[LineEvent0x0C_fields.healMagicPotency]) !== null && _parts$fields$healMag !== void 0 ? _parts$fields$healMag : '';
    this.determination = (_parts$fields$determi = parts[LineEvent0x0C_fields.determination]) !== null && _parts$fields$determi !== void 0 ? _parts$fields$determi : '';
    this.skillSpeed = (_parts$fields$skillSp = parts[LineEvent0x0C_fields.skillSpeed]) !== null && _parts$fields$skillSp !== void 0 ? _parts$fields$skillSp : '';
    this.spellSpeed = (_parts$fields$spellSp = parts[LineEvent0x0C_fields.spellSpeed]) !== null && _parts$fields$spellSp !== void 0 ? _parts$fields$spellSp : '';
    this.tenacity = (_parts$fields$tenacit = parts[LineEvent0x0C_fields.tenacity]) !== null && _parts$fields$tenacit !== void 0 ? _parts$fields$tenacit : '';
    this.convertedLine = this.prefix() + 'Player Stats: ' + parts.slice(2, -1).join(':').replace(/\|/g, ':');
  }

}
class LineEvent12 extends LineEvent0x0C {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x14.ts
function LineEvent0x14_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }




const LineEvent0x14_fields = netlog_defs.StartsUsing.fields; // Shorten a few types so dprint doesn't complain when the line gets too long.

// Ability use event
class LineEvent0x14 extends LineEvent {
  constructor(repo, line, parts) {
    var _parts$fields$sourceI, _parts$fields$sourceI2, _parts$fields$source, _parts$fields$id$toUp, _parts$fields$id, _parts$fields$ability, _parts$fields$targetI, _parts$fields$targetI2, _parts$fields$target, _parts$fields$castTim, _parts$fields$x, _parts$fields$y, _parts$fields$z, _parts$fields$heading;

    super(repo, line, parts);

    LineEvent0x14_defineProperty(this, "isSource", true);

    LineEvent0x14_defineProperty(this, "isTarget", true);

    LineEvent0x14_defineProperty(this, "isAbility", true);

    this.id = (_parts$fields$sourceI = (_parts$fields$sourceI2 = parts[LineEvent0x14_fields.sourceId]) === null || _parts$fields$sourceI2 === void 0 ? void 0 : _parts$fields$sourceI2.toUpperCase()) !== null && _parts$fields$sourceI !== void 0 ? _parts$fields$sourceI : '';
    this.name = (_parts$fields$source = parts[LineEvent0x14_fields.source]) !== null && _parts$fields$source !== void 0 ? _parts$fields$source : '';
    this.abilityIdHex = (_parts$fields$id$toUp = (_parts$fields$id = parts[LineEvent0x14_fields.id]) === null || _parts$fields$id === void 0 ? void 0 : _parts$fields$id.toUpperCase()) !== null && _parts$fields$id$toUp !== void 0 ? _parts$fields$id$toUp : '';
    this.abilityId = parseInt(this.abilityIdHex);
    this.abilityName = (_parts$fields$ability = parts[LineEvent0x14_fields.ability]) !== null && _parts$fields$ability !== void 0 ? _parts$fields$ability : '';
    this.targetId = (_parts$fields$targetI = (_parts$fields$targetI2 = parts[LineEvent0x14_fields.targetId]) === null || _parts$fields$targetI2 === void 0 ? void 0 : _parts$fields$targetI2.toUpperCase()) !== null && _parts$fields$targetI !== void 0 ? _parts$fields$targetI : '';
    this.targetName = (_parts$fields$target = parts[LineEvent0x14_fields.target]) !== null && _parts$fields$target !== void 0 ? _parts$fields$target : '';
    this.duration = (_parts$fields$castTim = parts[LineEvent0x14_fields.castTime]) !== null && _parts$fields$castTim !== void 0 ? _parts$fields$castTim : '';
    this.x = parseFloat((_parts$fields$x = parts[LineEvent0x14_fields.x]) !== null && _parts$fields$x !== void 0 ? _parts$fields$x : '');
    this.y = parseFloat((_parts$fields$y = parts[LineEvent0x14_fields.y]) !== null && _parts$fields$y !== void 0 ? _parts$fields$y : '');
    this.z = parseFloat((_parts$fields$z = parts[LineEvent0x14_fields.z]) !== null && _parts$fields$z !== void 0 ? _parts$fields$z : '');
    this.heading = parseFloat((_parts$fields$heading = parts[LineEvent0x14_fields.heading]) !== null && _parts$fields$heading !== void 0 ? _parts$fields$heading : '');
    repo.updateCombatant(this.id, {
      job: undefined,
      name: this.name,
      spawn: this.timestamp,
      despawn: this.timestamp
    });
    repo.updateCombatant(this.targetId, {
      job: undefined,
      name: this.targetName,
      spawn: this.timestamp,
      despawn: this.timestamp
    });
    const target = this.targetName.length === 0 ? 'Unknown' : this.targetName;
    this.convertedLine = this.prefix() + this.abilityIdHex + ':' + EmulatorCommon.properCase(this.name) + ' starts using ' + this.abilityName + ' on ' + EmulatorCommon.properCase(target) + '.';
  }

}
class LineEvent20 extends LineEvent0x14 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x15.ts
function LineEvent0x15_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



const LineEvent0x15_fields = netlog_defs.Ability.fields; // Shorten a few types so dprint doesn't complain when the line gets too long.

// Ability hit single target event
class LineEvent0x15 extends LineEvent {
  constructor(repo, line, parts) {
    var _parts$fields$sourceI, _parts$fields$sourceI2, _parts$fields$source, _parts$fields$flags, _parts, _parts$fields$id$toUp, _parts$fields$id, _parts$fields$ability, _parts$fields$targetI, _parts$fields$targetI2, _parts$fields$target, _parts2, _parts3, _parts4, _parts5, _parts6, _parts7, _parts8, _parts9, _parts10, _parts11, _parts12, _parts13, _parts14, _parts15, _parts16, _parts17;

    super(repo, line, parts);

    LineEvent0x15_defineProperty(this, "isSource", true);

    LineEvent0x15_defineProperty(this, "isTarget", true);

    LineEvent0x15_defineProperty(this, "isAbility", true);

    this.id = (_parts$fields$sourceI = (_parts$fields$sourceI2 = parts[LineEvent0x15_fields.sourceId]) === null || _parts$fields$sourceI2 === void 0 ? void 0 : _parts$fields$sourceI2.toUpperCase()) !== null && _parts$fields$sourceI !== void 0 ? _parts$fields$sourceI : '';
    this.name = (_parts$fields$source = parts[LineEvent0x15_fields.source]) !== null && _parts$fields$source !== void 0 ? _parts$fields$source : '';
    this.flags = (_parts$fields$flags = parts[LineEvent0x15_fields.flags]) !== null && _parts$fields$flags !== void 0 ? _parts$fields$flags : '';
    const fieldOffset = this.flags === '3F' ? 2 : 0;
    this.damage = LineEvent.calculateDamage((_parts = parts[LineEvent0x15_fields.damage + fieldOffset]) !== null && _parts !== void 0 ? _parts : '');
    this.abilityId = parseInt((_parts$fields$id$toUp = (_parts$fields$id = parts[LineEvent0x15_fields.id]) === null || _parts$fields$id === void 0 ? void 0 : _parts$fields$id.toUpperCase()) !== null && _parts$fields$id$toUp !== void 0 ? _parts$fields$id$toUp : '');
    this.abilityName = (_parts$fields$ability = parts[LineEvent0x15_fields.ability]) !== null && _parts$fields$ability !== void 0 ? _parts$fields$ability : '';
    this.targetId = (_parts$fields$targetI = (_parts$fields$targetI2 = parts[LineEvent0x15_fields.targetId]) === null || _parts$fields$targetI2 === void 0 ? void 0 : _parts$fields$targetI2.toUpperCase()) !== null && _parts$fields$targetI !== void 0 ? _parts$fields$targetI : '';
    this.targetName = (_parts$fields$target = parts[LineEvent0x15_fields.target]) !== null && _parts$fields$target !== void 0 ? _parts$fields$target : '';
    this.targetHp = parseInt((_parts2 = parts[LineEvent0x15_fields.targetCurrentHp + fieldOffset]) !== null && _parts2 !== void 0 ? _parts2 : '');
    this.targetMaxHp = parseInt((_parts3 = parts[LineEvent0x15_fields.targetMaxHp + fieldOffset]) !== null && _parts3 !== void 0 ? _parts3 : '');
    this.targetMp = parseInt((_parts4 = parts[LineEvent0x15_fields.targetCurrentMp + fieldOffset]) !== null && _parts4 !== void 0 ? _parts4 : '');
    this.targetMaxMp = parseInt((_parts5 = parts[LineEvent0x15_fields.targetMaxMp + fieldOffset]) !== null && _parts5 !== void 0 ? _parts5 : '');
    this.targetX = parseFloat((_parts6 = parts[LineEvent0x15_fields.targetX + fieldOffset]) !== null && _parts6 !== void 0 ? _parts6 : '');
    this.targetY = parseFloat((_parts7 = parts[LineEvent0x15_fields.targetY + fieldOffset]) !== null && _parts7 !== void 0 ? _parts7 : '');
    this.targetZ = parseFloat((_parts8 = parts[LineEvent0x15_fields.targetZ + fieldOffset]) !== null && _parts8 !== void 0 ? _parts8 : '');
    this.targetHeading = parseFloat((_parts9 = parts[LineEvent0x15_fields.targetHeading + fieldOffset]) !== null && _parts9 !== void 0 ? _parts9 : '');
    this.hp = parseInt((_parts10 = parts[LineEvent0x15_fields.currentHp + fieldOffset]) !== null && _parts10 !== void 0 ? _parts10 : '');
    this.maxHp = parseInt((_parts11 = parts[LineEvent0x15_fields.maxHp + fieldOffset]) !== null && _parts11 !== void 0 ? _parts11 : '');
    this.mp = parseInt((_parts12 = parts[LineEvent0x15_fields.currentMp + fieldOffset]) !== null && _parts12 !== void 0 ? _parts12 : '');
    this.maxMp = parseInt((_parts13 = parts[LineEvent0x15_fields.maxMp + fieldOffset]) !== null && _parts13 !== void 0 ? _parts13 : '');
    this.x = parseFloat((_parts14 = parts[LineEvent0x15_fields.x + fieldOffset]) !== null && _parts14 !== void 0 ? _parts14 : '');
    this.y = parseFloat((_parts15 = parts[LineEvent0x15_fields.y + fieldOffset]) !== null && _parts15 !== void 0 ? _parts15 : '');
    this.z = parseFloat((_parts16 = parts[LineEvent0x15_fields.z + fieldOffset]) !== null && _parts16 !== void 0 ? _parts16 : '');
    this.heading = parseFloat((_parts17 = parts[LineEvent0x15_fields.heading + fieldOffset]) !== null && _parts17 !== void 0 ? _parts17 : '');
    repo.updateCombatant(this.id, {
      job: undefined,
      name: this.name,
      spawn: this.timestamp,
      despawn: this.timestamp
    });
    repo.updateCombatant(this.targetId, {
      job: undefined,
      name: this.targetName,
      spawn: this.timestamp,
      despawn: this.timestamp
    });
  }

}
class LineEvent21 extends LineEvent0x15 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x16.ts

// Ability hit multiple/no target event
// Duplicate of 0x15 as far as data
class LineEvent0x16 extends LineEvent0x15 {
  constructor(repo, line, parts) {
    super(repo, line, parts);
  }

}
class LineEvent22 extends LineEvent0x16 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x17.ts
function LineEvent0x17_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



const LineEvent0x17_fields = netlog_defs.NetworkCancelAbility.fields; // Cancel ability event

class LineEvent0x17 extends LineEvent {
  constructor(repo, line, parts) {
    var _parts$fields$id$toUp, _parts$fields$id, _parts$fields$name, _parts$fields$id$toUp2, _parts$fields$id2, _parts$fields$name2, _parts$fields$reason;

    super(repo, line, parts);

    LineEvent0x17_defineProperty(this, "isSource", true);

    LineEvent0x17_defineProperty(this, "isAbility", true);

    this.id = (_parts$fields$id$toUp = (_parts$fields$id = parts[LineEvent0x17_fields.id]) === null || _parts$fields$id === void 0 ? void 0 : _parts$fields$id.toUpperCase()) !== null && _parts$fields$id$toUp !== void 0 ? _parts$fields$id$toUp : '';
    this.name = (_parts$fields$name = parts[LineEvent0x17_fields.name]) !== null && _parts$fields$name !== void 0 ? _parts$fields$name : '';
    this.abilityId = parseInt((_parts$fields$id$toUp2 = (_parts$fields$id2 = parts[LineEvent0x17_fields.id]) === null || _parts$fields$id2 === void 0 ? void 0 : _parts$fields$id2.toUpperCase()) !== null && _parts$fields$id$toUp2 !== void 0 ? _parts$fields$id$toUp2 : '');
    this.abilityName = (_parts$fields$name2 = parts[LineEvent0x17_fields.name]) !== null && _parts$fields$name2 !== void 0 ? _parts$fields$name2 : '';
    this.reason = (_parts$fields$reason = parts[LineEvent0x17_fields.reason]) !== null && _parts$fields$reason !== void 0 ? _parts$fields$reason : '';
  }

}
class LineEvent23 extends LineEvent0x17 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x18.ts
function LineEvent0x18_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }




const LineEvent0x18_fields = netlog_defs.NetworkDoT.fields; // DoT/HoT event

class LineEvent0x18 extends LineEvent {
  constructor(repo, line, parts) {
    var _parts$fields$id$toUp, _parts$fields$id, _parts$fields$name, _parts$fields$which, _parts$fields$effectI, _parts$fields$effectI2, _parts$fields$damage, _parts$fields$current, _parts$fields$maxHp, _parts$fields$current2, _parts$fields$maxMp, _parts$fields$x, _parts$fields$y, _parts$fields$z, _parts$fields$heading, _LineEvent0x18$showEf;

    super(repo, line, parts);

    LineEvent0x18_defineProperty(this, "isSource", true);

    this.id = (_parts$fields$id$toUp = (_parts$fields$id = parts[LineEvent0x18_fields.id]) === null || _parts$fields$id === void 0 ? void 0 : _parts$fields$id.toUpperCase()) !== null && _parts$fields$id$toUp !== void 0 ? _parts$fields$id$toUp : '';
    this.name = (_parts$fields$name = parts[LineEvent0x18_fields.name]) !== null && _parts$fields$name !== void 0 ? _parts$fields$name : '';
    this.which = (_parts$fields$which = parts[LineEvent0x18_fields.which]) !== null && _parts$fields$which !== void 0 ? _parts$fields$which : '';
    this.effectId = (_parts$fields$effectI = (_parts$fields$effectI2 = parts[LineEvent0x18_fields.effectId]) === null || _parts$fields$effectI2 === void 0 ? void 0 : _parts$fields$effectI2.toUpperCase()) !== null && _parts$fields$effectI !== void 0 ? _parts$fields$effectI : '';
    const damageString = (_parts$fields$damage = parts[LineEvent0x18_fields.damage]) !== null && _parts$fields$damage !== void 0 ? _parts$fields$damage : '';
    this.damage = parseInt(damageString, 16);
    this.hp = parseInt((_parts$fields$current = parts[LineEvent0x18_fields.currentHp]) !== null && _parts$fields$current !== void 0 ? _parts$fields$current : '');
    this.maxHp = parseInt((_parts$fields$maxHp = parts[LineEvent0x18_fields.maxHp]) !== null && _parts$fields$maxHp !== void 0 ? _parts$fields$maxHp : '');
    this.mp = parseInt((_parts$fields$current2 = parts[LineEvent0x18_fields.currentMp]) !== null && _parts$fields$current2 !== void 0 ? _parts$fields$current2 : '');
    this.maxMp = parseInt((_parts$fields$maxMp = parts[LineEvent0x18_fields.maxMp]) !== null && _parts$fields$maxMp !== void 0 ? _parts$fields$maxMp : '');
    this.x = parseFloat((_parts$fields$x = parts[LineEvent0x18_fields.x]) !== null && _parts$fields$x !== void 0 ? _parts$fields$x : '');
    this.y = parseFloat((_parts$fields$y = parts[LineEvent0x18_fields.y]) !== null && _parts$fields$y !== void 0 ? _parts$fields$y : '');
    this.z = parseFloat((_parts$fields$z = parts[LineEvent0x18_fields.z]) !== null && _parts$fields$z !== void 0 ? _parts$fields$z : '');
    this.heading = parseFloat((_parts$fields$heading = parts[LineEvent0x18_fields.heading]) !== null && _parts$fields$heading !== void 0 ? _parts$fields$heading : '');
    repo.updateCombatant(this.id, {
      job: undefined,
      name: this.name,
      spawn: this.timestamp,
      despawn: this.timestamp
    });
    let effectName = '';
    const resolvedName = repo.resolveName(this.id, this.name);
    if (this.effectId in LineEvent0x18.showEffectNamesFor) effectName = (_LineEvent0x18$showEf = LineEvent0x18.showEffectNamesFor[this.effectId]) !== null && _LineEvent0x18$showEf !== void 0 ? _LineEvent0x18$showEf : '';
    let effectPart = '';
    if (effectName) effectPart = effectName + ' ';
    const damageStringConverted = isNaN(this.damage) ? damageString : this.damage.toString();
    this.convertedLine = this.prefix() + effectPart + this.which + ' Tick on ' + EmulatorCommon.properCase(resolvedName) + ' for ' + damageStringConverted + ' damage.';
  }

}

LineEvent0x18_defineProperty(LineEvent0x18, "showEffectNamesFor", {
  '4C4': 'Excognition',
  '35D': 'Wildfire',
  '1F5': 'Doton',
  '2ED': 'Salted Earth',
  '4B5': 'Flamethrower',
  '2E3': 'Asylum',
  '777': 'Asylum',
  '798': 'Sacred Soil',
  '4C7': 'Fey Union',
  '742': 'Nascent Glint'
});

class LineEvent24 extends LineEvent0x18 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x19.ts



const LineEvent0x19_fields = netlog_defs.WasDefeated.fields; // Combatant defeated event

class LineEvent0x19 extends LineEvent {
  constructor(repo, line, parts) {
    var _parts$fields$targetI, _parts$fields$targetI2, _parts$fields$target, _parts$fields$sourceI, _parts$fields$sourceI2, _parts$fields$source, _resolvedTargetName, _resolvedSourceName;

    super(repo, line, parts);
    this.targetId = (_parts$fields$targetI = (_parts$fields$targetI2 = parts[LineEvent0x19_fields.targetId]) === null || _parts$fields$targetI2 === void 0 ? void 0 : _parts$fields$targetI2.toUpperCase()) !== null && _parts$fields$targetI !== void 0 ? _parts$fields$targetI : '';
    this.targetName = (_parts$fields$target = parts[LineEvent0x19_fields.target]) !== null && _parts$fields$target !== void 0 ? _parts$fields$target : '';
    this.sourceId = (_parts$fields$sourceI = (_parts$fields$sourceI2 = parts[LineEvent0x19_fields.sourceId]) === null || _parts$fields$sourceI2 === void 0 ? void 0 : _parts$fields$sourceI2.toUpperCase()) !== null && _parts$fields$sourceI !== void 0 ? _parts$fields$sourceI : '';
    this.sourceName = (_parts$fields$source = parts[LineEvent0x19_fields.source]) !== null && _parts$fields$source !== void 0 ? _parts$fields$source : '';
    repo.updateCombatant(this.sourceId, {
      job: undefined,
      name: this.sourceName,
      spawn: this.timestamp,
      despawn: this.timestamp
    });
    repo.updateCombatant(this.targetId, {
      job: undefined,
      name: this.targetName,
      spawn: this.timestamp,
      despawn: this.timestamp
    });
    let resolvedSourceName;
    let resolvedTargetName;
    if (this.sourceId !== '00') resolvedSourceName = repo.resolveName(this.sourceId, this.sourceName);
    if (this.targetId !== '00') resolvedTargetName = repo.resolveName(this.targetId, this.targetName);
    const defeatedName = (_resolvedTargetName = resolvedTargetName) !== null && _resolvedTargetName !== void 0 ? _resolvedTargetName : this.sourceName;
    const killerName = (_resolvedSourceName = resolvedSourceName) !== null && _resolvedSourceName !== void 0 ? _resolvedSourceName : this.sourceName;
    this.convertedLine = this.prefix() + EmulatorCommon.properCase(defeatedName) + ' was defeated by ' + EmulatorCommon.properCase(killerName) + '.';
  }

}
class LineEvent25 extends LineEvent0x19 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x1A.ts
function LineEvent0x1A_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }




const LineEvent0x1A_fields = netlog_defs.GainsEffect.fields; // Gain status effect event
// Deliberately don't flag this as LineEventSource or LineEventTarget
// because 0x1A line values aren't accurate

class LineEvent0x1A extends LineEvent {
  constructor(repo, line, parts) {
    var _parts$fields$effectI, _parts$fields$effectI2, _parts$fields$effect, _parts$fields$duratio, _parts$fields$sourceI, _parts$fields$sourceI2, _parts$fields$source, _parts$fields$targetI, _parts$fields$targetI2, _parts$fields$target, _parts$fields$count, _parts$fields$targetM, _parts$fields$sourceM;

    super(repo, line, parts);
    this.effectId = parseInt((_parts$fields$effectI = (_parts$fields$effectI2 = parts[LineEvent0x1A_fields.effectId]) === null || _parts$fields$effectI2 === void 0 ? void 0 : _parts$fields$effectI2.toUpperCase()) !== null && _parts$fields$effectI !== void 0 ? _parts$fields$effectI : '');
    this.effect = (_parts$fields$effect = parts[LineEvent0x1A_fields.effect]) !== null && _parts$fields$effect !== void 0 ? _parts$fields$effect : '';
    this.durationString = (_parts$fields$duratio = parts[LineEvent0x1A_fields.duration]) !== null && _parts$fields$duratio !== void 0 ? _parts$fields$duratio : '';
    this.durationFloat = parseFloat(this.durationString);
    this.id = (_parts$fields$sourceI = (_parts$fields$sourceI2 = parts[LineEvent0x1A_fields.sourceId]) === null || _parts$fields$sourceI2 === void 0 ? void 0 : _parts$fields$sourceI2.toUpperCase()) !== null && _parts$fields$sourceI !== void 0 ? _parts$fields$sourceI : '';
    this.name = (_parts$fields$source = parts[LineEvent0x1A_fields.source]) !== null && _parts$fields$source !== void 0 ? _parts$fields$source : '';
    this.targetId = (_parts$fields$targetI = (_parts$fields$targetI2 = parts[LineEvent0x1A_fields.targetId]) === null || _parts$fields$targetI2 === void 0 ? void 0 : _parts$fields$targetI2.toUpperCase()) !== null && _parts$fields$targetI !== void 0 ? _parts$fields$targetI : '';
    this.targetName = (_parts$fields$target = parts[LineEvent0x1A_fields.target]) !== null && _parts$fields$target !== void 0 ? _parts$fields$target : '';
    this.stacks = parseInt((_parts$fields$count = parts[LineEvent0x1A_fields.count]) !== null && _parts$fields$count !== void 0 ? _parts$fields$count : '0');
    this.targetMaxHp = parseInt((_parts$fields$targetM = parts[LineEvent0x1A_fields.targetMaxHp]) !== null && _parts$fields$targetM !== void 0 ? _parts$fields$targetM : '');
    this.sourceMaxHp = parseInt((_parts$fields$sourceM = parts[LineEvent0x1A_fields.sourceMaxHp]) !== null && _parts$fields$sourceM !== void 0 ? _parts$fields$sourceM : '');
    repo.updateCombatant(this.id, {
      name: this.name,
      spawn: this.timestamp,
      despawn: this.timestamp,
      job: undefined
    });
    repo.updateCombatant(this.targetId, {
      name: this.targetName,
      spawn: this.timestamp,
      despawn: this.timestamp,
      job: undefined
    });
    this.resolvedName = repo.resolveName(this.id, this.name);
    this.resolvedTargetName = repo.resolveName(this.targetId, this.targetName);
    this.fallbackResolvedTargetName = repo.resolveName(this.id, this.name, this.targetId, this.targetName);
    let stackCountText = '';
    if (this.stacks > 0 && this.stacks < 20 && LineEvent0x1A.showStackCountFor.includes(this.effectId)) stackCountText = ' (' + this.stacks.toString() + ')';
    this.convertedLine = this.prefix() + this.targetId + ':' + EmulatorCommon.properCase(this.targetName) + ' gains the effect of ' + this.effect + ' from ' + EmulatorCommon.properCase(this.fallbackResolvedTargetName) + ' for ' + this.durationString + ' Seconds.' + stackCountText;
  }

}

LineEvent0x1A_defineProperty(LineEvent0x1A, "showStackCountFor", [304, // Aetherflow
406, // Vulnerability Down
350, // Vulnerability Down
714, // Vulnerability Up
505, // Damage Up
1239, // Embolden
1297 // Embolden
]);

class LineEvent26 extends LineEvent0x1A {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x1B.ts
function LineEvent0x1B_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



const LineEvent0x1B_fields = netlog_defs.HeadMarker.fields; // Head marker event

class LineEvent0x1B extends LineEvent {
  constructor(repo, line, parts) {
    var _parts$fields$targetI, _parts$fields$targetI2, _parts$fields$target, _parts$fields$id;

    super(repo, line, parts);

    LineEvent0x1B_defineProperty(this, "isSource", true);

    this.id = (_parts$fields$targetI = (_parts$fields$targetI2 = parts[LineEvent0x1B_fields.targetId]) === null || _parts$fields$targetI2 === void 0 ? void 0 : _parts$fields$targetI2.toUpperCase()) !== null && _parts$fields$targetI !== void 0 ? _parts$fields$targetI : '';
    this.name = (_parts$fields$target = parts[LineEvent0x1B_fields.target]) !== null && _parts$fields$target !== void 0 ? _parts$fields$target : '';
    this.headmarkerId = (_parts$fields$id = parts[LineEvent0x1B_fields.id]) !== null && _parts$fields$id !== void 0 ? _parts$fields$id : '';
  }

}
class LineEvent27 extends LineEvent0x1B {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x1C.ts


const LineEvent0x1C_fields = netlog_defs.NetworkRaidMarker.fields; // Floor waymarker event

class LineEvent0x1C extends LineEvent {
  constructor(repo, line, parts) {
    var _parts$fields$operati, _parts$fields$waymark, _parts$fields$id$toUp, _parts$fields$id, _parts$fields$name, _parts$fields$x, _parts$fields$y, _parts$fields$z;

    super(repo, line, parts);
    this.operation = (_parts$fields$operati = parts[LineEvent0x1C_fields.operation]) !== null && _parts$fields$operati !== void 0 ? _parts$fields$operati : '';
    this.waymark = (_parts$fields$waymark = parts[LineEvent0x1C_fields.waymark]) !== null && _parts$fields$waymark !== void 0 ? _parts$fields$waymark : '';
    this.id = (_parts$fields$id$toUp = (_parts$fields$id = parts[LineEvent0x1C_fields.id]) === null || _parts$fields$id === void 0 ? void 0 : _parts$fields$id.toUpperCase()) !== null && _parts$fields$id$toUp !== void 0 ? _parts$fields$id$toUp : '';
    this.name = (_parts$fields$name = parts[LineEvent0x1C_fields.name]) !== null && _parts$fields$name !== void 0 ? _parts$fields$name : '';
    this.x = (_parts$fields$x = parts[LineEvent0x1C_fields.x]) !== null && _parts$fields$x !== void 0 ? _parts$fields$x : '';
    this.y = (_parts$fields$y = parts[LineEvent0x1C_fields.y]) !== null && _parts$fields$y !== void 0 ? _parts$fields$y : '';
    this.z = (_parts$fields$z = parts[LineEvent0x1C_fields.z]) !== null && _parts$fields$z !== void 0 ? _parts$fields$z : '';
  }

}
class LineEvent28 extends LineEvent0x1C {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x1D.ts


const LineEvent0x1D_fields = netlog_defs.NetworkTargetMarker.fields; // Waymarker

class LineEvent0x1D extends LineEvent {
  constructor(repo, line, parts) {
    var _parts$fields$operati, _parts$fields$waymark, _parts$fields$id$toUp, _parts$fields$id, _parts$fields$name, _parts$fields$targetI, _parts$fields$targetI2, _parts$fields$targetN;

    super(repo, line, parts);
    this.operation = (_parts$fields$operati = parts[LineEvent0x1D_fields.operation]) !== null && _parts$fields$operati !== void 0 ? _parts$fields$operati : '';
    this.waymark = (_parts$fields$waymark = parts[LineEvent0x1D_fields.waymark]) !== null && _parts$fields$waymark !== void 0 ? _parts$fields$waymark : '';
    this.id = (_parts$fields$id$toUp = (_parts$fields$id = parts[LineEvent0x1D_fields.id]) === null || _parts$fields$id === void 0 ? void 0 : _parts$fields$id.toUpperCase()) !== null && _parts$fields$id$toUp !== void 0 ? _parts$fields$id$toUp : '';
    this.name = (_parts$fields$name = parts[LineEvent0x1D_fields.name]) !== null && _parts$fields$name !== void 0 ? _parts$fields$name : '';
    this.targetId = (_parts$fields$targetI = (_parts$fields$targetI2 = parts[LineEvent0x1D_fields.targetId]) === null || _parts$fields$targetI2 === void 0 ? void 0 : _parts$fields$targetI2.toUpperCase()) !== null && _parts$fields$targetI !== void 0 ? _parts$fields$targetI : '';
    this.targetName = (_parts$fields$targetN = parts[LineEvent0x1D_fields.targetName]) !== null && _parts$fields$targetN !== void 0 ? _parts$fields$targetN : '';
  }

}
class LineEvent29 extends LineEvent0x1D {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x1E.ts


// Lose status effect event
// Extend the gain status event to reduce duplicate code since they're
// the same from a data perspective
class LineEvent0x1E extends LineEvent0x1A {
  constructor(repo, line, parts) {
    super(repo, line, parts);
    let stackCountText = '';
    if (this.stacks > 0 && this.stacks < 20 && LineEvent0x1A.showStackCountFor.includes(this.effectId)) stackCountText = ' (' + this.stacks.toString() + ')';
    this.convertedLine = this.prefix() + this.targetId + ':' + EmulatorCommon.properCase(this.targetName) + ' loses the effect of ' + this.effect + ' from ' + EmulatorCommon.properCase(this.fallbackResolvedTargetName) + ' for ' + this.durationString + ' Seconds.' + stackCountText;
  }

}
class LineEvent30 extends LineEvent0x1E {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x1F.ts




const splitFunc = s => [s.substr(6, 2), s.substr(4, 2), s.substr(2, 2), s.substr(0, 2)];

const LineEvent0x1F_fields = netlog_defs.NetworkGauge.fields; // Job gauge event

class LineEvent0x1F extends LineEvent {
  constructor(repo, line, parts) {
    var _parts$fields$id$toUp, _parts$fields$id, _parts$fields$data, _parts$fields$data2, _parts$fields$data3, _parts$fields$data4, _repo$Combatants$this, _repo$Combatants$this2, _this$jobGaugeBytes$;

    super(repo, line, parts);
    this.id = (_parts$fields$id$toUp = (_parts$fields$id = parts[LineEvent0x1F_fields.id]) === null || _parts$fields$id === void 0 ? void 0 : _parts$fields$id.toUpperCase()) !== null && _parts$fields$id$toUp !== void 0 ? _parts$fields$id$toUp : '';
    this.dataBytes1 = EmulatorCommon.zeroPad((_parts$fields$data = parts[LineEvent0x1F_fields.data0]) !== null && _parts$fields$data !== void 0 ? _parts$fields$data : '');
    this.dataBytes2 = EmulatorCommon.zeroPad((_parts$fields$data2 = parts[LineEvent0x1F_fields.data1]) !== null && _parts$fields$data2 !== void 0 ? _parts$fields$data2 : '');
    this.dataBytes3 = EmulatorCommon.zeroPad((_parts$fields$data3 = parts[LineEvent0x1F_fields.data2]) !== null && _parts$fields$data3 !== void 0 ? _parts$fields$data3 : '');
    this.dataBytes4 = EmulatorCommon.zeroPad((_parts$fields$data4 = parts[LineEvent0x1F_fields.data3]) !== null && _parts$fields$data4 !== void 0 ? _parts$fields$data4 : '');
    this.jobGaugeBytes = [...splitFunc(this.dataBytes1), ...splitFunc(this.dataBytes2), ...splitFunc(this.dataBytes3), ...splitFunc(this.dataBytes4)];
    this.name = ((_repo$Combatants$this = repo.Combatants[this.id]) === null || _repo$Combatants$this === void 0 ? void 0 : _repo$Combatants$this.name) || '';
    repo.updateCombatant(this.id, {
      name: (_repo$Combatants$this2 = repo.Combatants[this.id]) === null || _repo$Combatants$this2 === void 0 ? void 0 : _repo$Combatants$this2.name,
      spawn: this.timestamp,
      despawn: this.timestamp,
      job: (_this$jobGaugeBytes$ = this.jobGaugeBytes[0]) === null || _this$jobGaugeBytes$ === void 0 ? void 0 : _this$jobGaugeBytes$.toUpperCase()
    });
    this.convertedLine = this.prefix() + this.id + ':' + EmulatorCommon.properCase(this.name) + ':' + this.dataBytes1 + ':' + this.dataBytes2 + ':' + this.dataBytes3 + ':' + this.dataBytes4;
  }

}
class LineEvent31 extends LineEvent0x1F {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x22.ts
function LineEvent0x22_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



const LineEvent0x22_fields = netlog_defs.NameToggle.fields; // Nameplate toggle

class LineEvent0x22 extends LineEvent {
  constructor(repo, line, parts) {
    var _parts$fields$id$toUp, _parts$fields$id, _parts$fields$name, _parts$fields$targetI, _parts$fields$targetI2, _parts$fields$targetN, _parts$fields$toggle;

    super(repo, line, parts);

    LineEvent0x22_defineProperty(this, "isSource", true);

    this.id = (_parts$fields$id$toUp = (_parts$fields$id = parts[LineEvent0x22_fields.id]) === null || _parts$fields$id === void 0 ? void 0 : _parts$fields$id.toUpperCase()) !== null && _parts$fields$id$toUp !== void 0 ? _parts$fields$id$toUp : '';
    this.name = (_parts$fields$name = parts[LineEvent0x22_fields.name]) !== null && _parts$fields$name !== void 0 ? _parts$fields$name : '';
    this.targetId = (_parts$fields$targetI = (_parts$fields$targetI2 = parts[LineEvent0x22_fields.targetId]) === null || _parts$fields$targetI2 === void 0 ? void 0 : _parts$fields$targetI2.toUpperCase()) !== null && _parts$fields$targetI !== void 0 ? _parts$fields$targetI : '';
    this.targetName = (_parts$fields$targetN = parts[LineEvent0x22_fields.targetName]) !== null && _parts$fields$targetN !== void 0 ? _parts$fields$targetN : '';
    this.targetable = !!parseInt((_parts$fields$toggle = parts[LineEvent0x22_fields.toggle]) !== null && _parts$fields$toggle !== void 0 ? _parts$fields$toggle : '', 16);
  }

}
class LineEvent34 extends LineEvent0x22 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x23.ts


const LineEvent0x23_fields = netlog_defs.Tether.fields; // Tether event

class LineEvent0x23 extends LineEvent {
  constructor(repo, line, parts) {
    var _parts$fields$sourceI, _parts$fields$sourceI2, _parts$fields$source, _parts$fields$targetI, _parts$fields$targetI2, _parts$fields$target, _parts$fields$id;

    super(repo, line, parts);
    this.id = (_parts$fields$sourceI = (_parts$fields$sourceI2 = parts[LineEvent0x23_fields.sourceId]) === null || _parts$fields$sourceI2 === void 0 ? void 0 : _parts$fields$sourceI2.toUpperCase()) !== null && _parts$fields$sourceI !== void 0 ? _parts$fields$sourceI : '';
    this.name = (_parts$fields$source = parts[LineEvent0x23_fields.source]) !== null && _parts$fields$source !== void 0 ? _parts$fields$source : '';
    this.targetId = (_parts$fields$targetI = (_parts$fields$targetI2 = parts[LineEvent0x23_fields.targetId]) === null || _parts$fields$targetI2 === void 0 ? void 0 : _parts$fields$targetI2.toUpperCase()) !== null && _parts$fields$targetI !== void 0 ? _parts$fields$targetI : '';
    this.targetName = (_parts$fields$target = parts[LineEvent0x23_fields.target]) !== null && _parts$fields$target !== void 0 ? _parts$fields$target : '';
    this.tetherId = (_parts$fields$id = parts[LineEvent0x23_fields.id]) !== null && _parts$fields$id !== void 0 ? _parts$fields$id : '';
  }

}
class LineEvent35 extends LineEvent0x23 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x24.ts


const LineEvent0x24_fields = netlog_defs.LimitBreak.fields; // Limit gauge event

class LineEvent0x24 extends LineEvent {
  constructor(repo, line, parts) {
    var _parts$fields$valueHe, _parts$fields$bars;

    super(repo, line, parts);
    this.valueHex = (_parts$fields$valueHe = parts[LineEvent0x24_fields.valueHex]) !== null && _parts$fields$valueHe !== void 0 ? _parts$fields$valueHe : '';
    this.valueDec = parseInt(this.valueHex, 16);
    this.bars = (_parts$fields$bars = parts[LineEvent0x24_fields.bars]) !== null && _parts$fields$bars !== void 0 ? _parts$fields$bars : '';
    this.convertedLine = this.prefix() + 'Limit Break: ' + this.valueHex;
  }

}
class LineEvent36 extends LineEvent0x24 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x25.ts
function LineEvent0x25_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



const LineEvent0x25_fields = netlog_defs.NetworkEffectResult.fields; // Action sync event

class LineEvent0x25 extends LineEvent {
  constructor(repo, line, parts) {
    var _parts$fields$id$toUp, _parts$fields$id, _parts$fields$name, _parts$fields$sequenc, _parts$fields$current, _parts$fields$maxHp, _parts$fields$current2, _parts$fields$maxMp, _parts$fields$x, _parts$fields$y, _parts$fields$z, _parts$fields$heading;

    super(repo, line, parts);

    LineEvent0x25_defineProperty(this, "isSource", true);

    this.id = (_parts$fields$id$toUp = (_parts$fields$id = parts[LineEvent0x25_fields.id]) === null || _parts$fields$id === void 0 ? void 0 : _parts$fields$id.toUpperCase()) !== null && _parts$fields$id$toUp !== void 0 ? _parts$fields$id$toUp : '';
    this.name = (_parts$fields$name = parts[LineEvent0x25_fields.name]) !== null && _parts$fields$name !== void 0 ? _parts$fields$name : '';
    this.sequenceId = (_parts$fields$sequenc = parts[LineEvent0x25_fields.sequenceId]) !== null && _parts$fields$sequenc !== void 0 ? _parts$fields$sequenc : '';
    this.hp = parseInt((_parts$fields$current = parts[LineEvent0x25_fields.currentHp]) !== null && _parts$fields$current !== void 0 ? _parts$fields$current : '');
    this.maxHp = parseInt((_parts$fields$maxHp = parts[LineEvent0x25_fields.maxHp]) !== null && _parts$fields$maxHp !== void 0 ? _parts$fields$maxHp : '');
    this.mp = parseInt((_parts$fields$current2 = parts[LineEvent0x25_fields.currentMp]) !== null && _parts$fields$current2 !== void 0 ? _parts$fields$current2 : '');
    this.maxMp = parseInt((_parts$fields$maxMp = parts[LineEvent0x25_fields.maxMp]) !== null && _parts$fields$maxMp !== void 0 ? _parts$fields$maxMp : '');
    this.x = parseFloat((_parts$fields$x = parts[LineEvent0x25_fields.x]) !== null && _parts$fields$x !== void 0 ? _parts$fields$x : '');
    this.y = parseFloat((_parts$fields$y = parts[LineEvent0x25_fields.y]) !== null && _parts$fields$y !== void 0 ? _parts$fields$y : '');
    this.z = parseFloat((_parts$fields$z = parts[LineEvent0x25_fields.z]) !== null && _parts$fields$z !== void 0 ? _parts$fields$z : '');
    this.heading = parseFloat((_parts$fields$heading = parts[LineEvent0x25_fields.heading]) !== null && _parts$fields$heading !== void 0 ? _parts$fields$heading : '');
  }

}
class LineEvent37 extends LineEvent0x25 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x26.ts
function LineEvent0x26_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





const LineEvent0x26_fields = netlog_defs.StatusEffect.fields; // Network status effect event

class LineEvent0x26 extends LineEvent {
  constructor(repo, line, parts) {
    var _parts$fields$targetI, _parts$fields$targetI2, _parts$fields$target, _parts$fields$jobLeve, _parts$fields$hp, _parts$fields$maxHp, _parts$fields$mp, _parts$fields$maxMp, _parts$fields$x, _parts$fields$y, _parts$fields$z, _parts$fields$heading;

    super(repo, line, parts);

    LineEvent0x26_defineProperty(this, "isSource", true);

    LineEvent0x26_defineProperty(this, "isJobLevel", true);

    this.id = (_parts$fields$targetI = (_parts$fields$targetI2 = parts[LineEvent0x26_fields.targetId]) === null || _parts$fields$targetI2 === void 0 ? void 0 : _parts$fields$targetI2.toUpperCase()) !== null && _parts$fields$targetI !== void 0 ? _parts$fields$targetI : '';
    this.name = (_parts$fields$target = parts[LineEvent0x26_fields.target]) !== null && _parts$fields$target !== void 0 ? _parts$fields$target : '';
    this.jobLevelData = (_parts$fields$jobLeve = parts[LineEvent0x26_fields.jobLevelData]) !== null && _parts$fields$jobLeve !== void 0 ? _parts$fields$jobLeve : '';
    this.hp = parseInt((_parts$fields$hp = parts[LineEvent0x26_fields.hp]) !== null && _parts$fields$hp !== void 0 ? _parts$fields$hp : '');
    this.maxHp = parseInt((_parts$fields$maxHp = parts[LineEvent0x26_fields.maxHp]) !== null && _parts$fields$maxHp !== void 0 ? _parts$fields$maxHp : '');
    this.mp = parseInt((_parts$fields$mp = parts[LineEvent0x26_fields.mp]) !== null && _parts$fields$mp !== void 0 ? _parts$fields$mp : '');
    this.maxMp = parseInt((_parts$fields$maxMp = parts[LineEvent0x26_fields.maxMp]) !== null && _parts$fields$maxMp !== void 0 ? _parts$fields$maxMp : '');
    this.x = parseFloat((_parts$fields$x = parts[LineEvent0x26_fields.x]) !== null && _parts$fields$x !== void 0 ? _parts$fields$x : '');
    this.y = parseFloat((_parts$fields$y = parts[LineEvent0x26_fields.y]) !== null && _parts$fields$y !== void 0 ? _parts$fields$y : '');
    this.z = parseFloat((_parts$fields$z = parts[LineEvent0x26_fields.z]) !== null && _parts$fields$z !== void 0 ? _parts$fields$z : '');
    this.heading = parseFloat((_parts$fields$heading = parts[LineEvent0x26_fields.heading]) !== null && _parts$fields$heading !== void 0 ? _parts$fields$heading : '');
    const padded = EmulatorCommon.zeroPad(this.jobLevelData, 8);
    this.jobIdHex = padded.substr(6, 2).toUpperCase();
    this.jobId = parseInt(this.jobIdHex, 16);
    this.job = util.jobEnumToJob(this.jobId);
    this.level = parseInt(padded.substr(4, 2), 16);
  }

}
class LineEvent38 extends LineEvent0x26 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x27.ts
function LineEvent0x27_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



const LineEvent0x27_fields = netlog_defs.NetworkUpdateHP.fields; // Network update hp event

class LineEvent0x27 extends LineEvent {
  constructor(repo, line, parts) {
    var _parts$fields$id$toUp, _parts$fields$id, _parts$fields$name, _parts$fields$current, _parts$fields$maxHp, _parts$fields$current2, _parts$fields$maxMp, _parts$fields$x, _parts$fields$y, _parts$fields$z, _parts$fields$heading;

    super(repo, line, parts);

    LineEvent0x27_defineProperty(this, "isSource", true);

    this.id = (_parts$fields$id$toUp = (_parts$fields$id = parts[LineEvent0x27_fields.id]) === null || _parts$fields$id === void 0 ? void 0 : _parts$fields$id.toUpperCase()) !== null && _parts$fields$id$toUp !== void 0 ? _parts$fields$id$toUp : '';
    this.name = (_parts$fields$name = parts[LineEvent0x27_fields.name]) !== null && _parts$fields$name !== void 0 ? _parts$fields$name : '';
    this.hp = parseInt((_parts$fields$current = parts[LineEvent0x27_fields.currentHp]) !== null && _parts$fields$current !== void 0 ? _parts$fields$current : '');
    this.maxHp = parseInt((_parts$fields$maxHp = parts[LineEvent0x27_fields.maxHp]) !== null && _parts$fields$maxHp !== void 0 ? _parts$fields$maxHp : '');
    this.mp = parseInt((_parts$fields$current2 = parts[LineEvent0x27_fields.currentMp]) !== null && _parts$fields$current2 !== void 0 ? _parts$fields$current2 : '');
    this.maxMp = parseInt((_parts$fields$maxMp = parts[LineEvent0x27_fields.maxMp]) !== null && _parts$fields$maxMp !== void 0 ? _parts$fields$maxMp : '');
    this.x = parseFloat((_parts$fields$x = parts[LineEvent0x27_fields.x]) !== null && _parts$fields$x !== void 0 ? _parts$fields$x : '');
    this.y = parseFloat((_parts$fields$y = parts[LineEvent0x27_fields.y]) !== null && _parts$fields$y !== void 0 ? _parts$fields$y : '');
    this.z = parseFloat((_parts$fields$z = parts[LineEvent0x27_fields.z]) !== null && _parts$fields$z !== void 0 ? _parts$fields$z : '');
    this.heading = parseFloat((_parts$fields$heading = parts[LineEvent0x27_fields.heading]) !== null && _parts$fields$heading !== void 0 ? _parts$fields$heading : '');
  }

}
class LineEvent39 extends LineEvent0x27 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEventBlank.ts

// Any line where the ACT log line is blank, e.g. Map. or PacketDump.
class LineEventBlank extends LineEvent {
  constructor(repo, line, parts) {
    super(repo, line, parts);
    this.convertedLine = this.prefix();
  }

}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/ParseLine.ts


























class ParseLine {
  static parse(repo, line) {
    let ret;
    const parts = line.split('|');
    const event = parts[0]; // Don't parse raw network packet lines

    if (!event || event === '252') return; // This is ugly, but Webpack prefers being explicit

    switch ('LineEvent' + event) {
      case 'LineEvent00':
        ret = new LineEvent00(repo, line, parts);
        break;

      case 'LineEvent01':
        ret = new LineEvent01(repo, line, parts);
        break;

      case 'LineEvent02':
        ret = new LineEvent02(repo, line, parts);
        break;

      case 'LineEvent03':
        ret = new LineEvent03(repo, line, parts);
        break;

      case 'LineEvent04':
        ret = new LineEvent04(repo, line, parts);
        break;

      case 'LineEvent12':
        ret = new LineEvent12(repo, line, parts);
        break;

      case 'LineEvent20':
        ret = new LineEvent20(repo, line, parts);
        break;

      case 'LineEvent21':
        ret = new LineEvent21(repo, line, parts);
        break;

      case 'LineEvent22':
        ret = new LineEvent22(repo, line, parts);
        break;

      case 'LineEvent23':
        ret = new LineEvent23(repo, line, parts);
        break;

      case 'LineEvent24':
        ret = new LineEvent24(repo, line, parts);
        break;

      case 'LineEvent25':
        ret = new LineEvent25(repo, line, parts);
        break;

      case 'LineEvent26':
        ret = new LineEvent26(repo, line, parts);
        break;

      case 'LineEvent27':
        ret = new LineEvent27(repo, line, parts);
        break;

      case 'LineEvent28':
        ret = new LineEvent28(repo, line, parts);
        break;

      case 'LineEvent29':
        ret = new LineEvent29(repo, line, parts);
        break;

      case 'LineEvent30':
        ret = new LineEvent30(repo, line, parts);
        break;

      case 'LineEvent31':
        ret = new LineEvent31(repo, line, parts);
        break;

      case 'LineEvent34':
        ret = new LineEvent34(repo, line, parts);
        break;

      case 'LineEvent35':
        ret = new LineEvent35(repo, line, parts);
        break;

      case 'LineEvent36':
        ret = new LineEvent36(repo, line, parts);
        break;

      case 'LineEvent37':
        ret = new LineEvent37(repo, line, parts);
        break;

      case 'LineEvent38':
        ret = new LineEvent38(repo, line, parts);
        break;

      case 'LineEvent39':
        ret = new LineEvent39(repo, line, parts);
        break;

      case 'LineEvent40':
        ret = new LineEventBlank(repo, line, parts);
        break;

      default:
        ret = new LineEvent(repo, line, parts);
    } // Also don't parse lines with a non-sane date. This is 2000-01-01 00:00:00


    if (ret && ret.timestamp < 946684800) return; // Finally, if the object marks itself as invalid, skip it

    if (ret && ret.invalid) return;
    return ret;
  }

}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/NetworkLogConverter.ts
function NetworkLogConverter_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





const isLineEvent = line => {
  return !!line;
};

class NetworkLogConverter extends EventBus {
  convertFile(data) {
    const repo = new LogRepository();
    return this.convertLines( // Split data into an array of separate lines, removing any blank lines.
    data.split(NetworkLogConverter.lineSplitRegex).filter(l => l !== ''), repo);
  }

  convertLines(lines, repo) {
    const lineEvents = lines.map(l => ParseLine.parse(repo, l)).filter(isLineEvent); // Call `convert` to convert the network line to non-network format and update indexing values

    return lineEvents.map((l, i) => {
      l.index = i;
      return l;
    });
  }

}

NetworkLogConverter_defineProperty(NetworkLogConverter, "lineSplitRegex", /\r?\n/gm);
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/Encounter.ts
function Encounter_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }










const isPetName = (name, language) => {
  if (language) return pet_names[language].includes(name);

  for (const lang in pet_names) {
    if (!isLang(lang)) throw new not_reached_UnreachableCode();
    if (pet_names[lang].includes(name)) return true;
  }

  return false;
};

const isValidTimestamp = timestamp => {
  return timestamp > 0 && timestamp < Number.MAX_SAFE_INTEGER;
};

class Encounter {
  constructor(encounterDay, encounterZoneId, encounterZoneName, logLines) {
    Encounter_defineProperty(this, "initialOffset", Number.MAX_SAFE_INTEGER);

    Encounter_defineProperty(this, "endStatus", 'Unknown');

    Encounter_defineProperty(this, "startStatus", 'Unknown');

    Encounter_defineProperty(this, "engageAt", Number.MAX_SAFE_INTEGER);

    Encounter_defineProperty(this, "firstPlayerAbility", Number.MAX_SAFE_INTEGER);

    Encounter_defineProperty(this, "firstEnemyAbility", Number.MAX_SAFE_INTEGER);

    Encounter_defineProperty(this, "firstLineIndex", 0);

    Encounter_defineProperty(this, "startTimestamp", 0);

    Encounter_defineProperty(this, "endTimestamp", 0);

    Encounter_defineProperty(this, "duration", 0);

    Encounter_defineProperty(this, "tzOffsetMillis", 0);

    Encounter_defineProperty(this, "playbackOffset", 0);

    Encounter_defineProperty(this, "language", 'en');

    Encounter_defineProperty(this, "initialTimestamp", Number.MAX_SAFE_INTEGER);

    this.encounterDay = encounterDay;
    this.encounterZoneId = encounterZoneId;
    this.encounterZoneName = encounterZoneName;
    this.logLines = logLines;
    this.version = Encounter.encounterVersion;
  }

  initialize() {
    const startStatuses = new Set();
    this.logLines.forEach((line, i) => {
      var _res;

      if (!line) throw new not_reached_UnreachableCode();
      this.tzOffsetMillis = line.tzOffsetMillis;
      let res = EmulatorCommon.matchStart(line.networkLine);

      if (res) {
        this.firstLineIndex = i;
        if (res.StartType) startStatuses.add(res.StartType);
        const startIn = parseInt(res.StartIn);
        if (startIn >= 0) this.engageAt = Math.min(line.timestamp + startIn, this.engageAt);
      } else {
        res = EmulatorCommon.matchEnd(line.networkLine);

        if (res) {
          if (res.EndType) this.endStatus = res.EndType;
        } else if (isLineEventSource(line) && isLineEventTarget(line)) {
          if (line.id.startsWith('1') || line.id.startsWith('4') && isPetName(line.name, this.language)) {
            // Player or pet ability
            if (line.targetId.startsWith('4') && !isPetName(line.targetName, this.language)) {
              // Targetting non player or pet
              this.firstPlayerAbility = Math.min(this.firstPlayerAbility, line.timestamp);
            }
          } else if (line.id.startsWith('4') && !isPetName(line.name, this.language)) {
            // Non-player ability
            if (line.targetId.startsWith('1') || isPetName(line.targetName, this.language)) {
              // Targetting player or pet
              this.firstEnemyAbility = Math.min(this.firstEnemyAbility, line.timestamp);
            }
          }
        }
      }

      const matchedLang = (_res = res) === null || _res === void 0 ? void 0 : _res.language;
      if (isLang(matchedLang)) this.language = matchedLang;
    });
    this.combatantTracker = new CombatantTracker(this.logLines, this.language);
    this.startTimestamp = this.combatantTracker.firstTimestamp;
    this.endTimestamp = this.combatantTracker.lastTimestamp;
    this.duration = this.endTimestamp - this.startTimestamp;

    if (this.initialOffset === Number.MAX_SAFE_INTEGER) {
      if (this.engageAt < Number.MAX_SAFE_INTEGER) this.initialOffset = this.engageAt - this.startTimestamp;else if (this.firstPlayerAbility < Number.MAX_SAFE_INTEGER) this.initialOffset = this.firstPlayerAbility - this.startTimestamp;else if (this.firstEnemyAbility < Number.MAX_SAFE_INTEGER) this.initialOffset = this.firstEnemyAbility - this.startTimestamp;else this.initialOffset = 0;
    }

    this.initialTimestamp = this.startTimestamp + this.initialOffset;
    const firstLine = this.logLines[this.firstLineIndex];
    if (firstLine && firstLine.offset) this.playbackOffset = firstLine.offset;
    this.startStatus = [...startStatuses].sort().join(', ');
  }

  shouldPersistFight() {
    return isValidTimestamp(this.firstPlayerAbility) && isValidTimestamp(this.firstEnemyAbility);
  }

  upgrade(version) {
    if (Encounter.encounterVersion <= version) return false;
    const repo = new LogRepository();
    const converter = new NetworkLogConverter();
    this.logLines = converter.convertLines(this.logLines.map(l => l.networkLine), repo);
    this.version = Encounter.encounterVersion;
    this.initialize();
    return true;
  }

}

Encounter_defineProperty(Encounter, "encounterVersion", 2);
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/LogEventHandler.ts
function LogEventHandler_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }




class LogEventHandler extends EventBus {
  constructor(...args) {
    super(...args);

    LogEventHandler_defineProperty(this, "currentFight", []);

    LogEventHandler_defineProperty(this, "currentZoneName", 'Unknown');

    LogEventHandler_defineProperty(this, "currentZoneId", '-1');
  }

  parseLogs(logs) {
    for (const lineObj of logs) {
      this.currentFight.push(lineObj);
      lineObj.offset = lineObj.timestamp - this.currentFightStart;
      const res = EmulatorCommon.matchEnd(lineObj.networkLine);

      if (res) {
        this.endFight();
      } else if (lineObj instanceof LineEvent0x01) {
        this.currentZoneId = lineObj.zoneId;
        this.currentZoneName = lineObj.zoneName;
        this.endFight();
      }
    }
  }

  get currentFightStart() {
    var _this$currentFight$0$, _this$currentFight$;

    return (_this$currentFight$0$ = (_this$currentFight$ = this.currentFight[0]) === null || _this$currentFight$ === void 0 ? void 0 : _this$currentFight$.timestamp) !== null && _this$currentFight$0$ !== void 0 ? _this$currentFight$0$ : 0;
  }

  get currentFightEnd() {
    var _this$currentFight$sl, _this$currentFight$sl2;

    return (_this$currentFight$sl = (_this$currentFight$sl2 = this.currentFight.slice(-1)[0]) === null || _this$currentFight$sl2 === void 0 ? void 0 : _this$currentFight$sl2.timestamp) !== null && _this$currentFight$sl !== void 0 ? _this$currentFight$sl : 0;
  }

  endFight() {
    if (this.currentFight.length < 2) return;
    const start = new Date(this.currentFightStart).toISOString();
    const end = new Date(this.currentFightEnd).toISOString();
    console.debug(`Dispatching new fight
Start: ${start}
End: ${end}
Zone: ${this.currentZoneName}
Line Count: ${this.currentFight.length}
`);
    void this.dispatch('fight', start.substr(0, 10), this.currentZoneId, this.currentZoneName, this.currentFight);
    this.currentFight = [];
  }

}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/NetworkLogConverter.worker.ts





const ctx = self;
ctx.addEventListener('message', msg => {
  if (!(msg.data instanceof ArrayBuffer)) {
    // TODO: should this return an 'error' instead?
    ctx.postMessage({
      type: 'done'
    });
    throw new not_reached_UnreachableCode();
  }

  const logConverter = new NetworkLogConverter();
  const localLogHandler = new LogEventHandler();
  const repo = new LogRepository(); // Listen for LogEventHandler to dispatch fights and persist them

  localLogHandler.on('fight', (day, zoneId, zoneName, lines) => {
    const enc = new Encounter(day, zoneId, zoneName, lines);
    enc.initialize();

    if (enc.shouldPersistFight()) {
      var _enc$combatantTracker;

      ctx.postMessage({
        type: 'encounter',
        encounter: enc,
        name: (_enc$combatantTracker = enc.combatantTracker) === null || _enc$combatantTracker === void 0 ? void 0 : _enc$combatantTracker.getMainCombatantName()
      });
    }
  }); // Convert the message manually due to memory issues with extremely large files

  const decoder = new TextDecoder('UTF-8');
  let buf = new Uint8Array(msg.data);
  let nextOffset = 0;
  let lines = [];
  let lineCount = 0;

  for (let currentOffset = nextOffset; nextOffset < buf.length && nextOffset !== -1; currentOffset = nextOffset) {
    nextOffset = buf.indexOf(0x0A, nextOffset + 1);
    const line = decoder.decode(buf.slice(currentOffset, nextOffset)).trim();

    if (line.length) {
      ++lineCount;
      lines.push(line);
    }

    if (lines.length >= 1000) {
      lines = logConverter.convertLines(lines, repo);
      localLogHandler.parseLogs(lines);
      ctx.postMessage({
        type: 'progress',
        lines: lineCount,
        bytes: nextOffset,
        totalBytes: buf.length
      });
      lines = [];
    }
  }

  if (lines.length > 0) {
    lines = logConverter.convertLines(lines, repo);
    localLogHandler.parseLogs(lines);
    lines = [];
  }

  ctx.postMessage({
    type: 'progress',
    lines: lineCount,
    bytes: buf.length,
    totalBytes: buf.length
  }); // Unset the buffer to free memory before passing message back to main window

  buf = undefined;
  localLogHandler.endFight();
  ctx.postMessage({
    type: 'done'
  });
});
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,