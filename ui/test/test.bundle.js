/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};

;// CONCATENATED MODULE: ./resources/overlay_plugin_api.ts
// OverlayPlugin API setup
let inited = false;
let wsUrl = null;
let ws = null;
let queue = [];
let rseqCounter = 0;
const responsePromises = {};
const subscribers = {};

const sendMessage = (msg, cb) => {
  if (ws) {
    if (queue) queue.push(msg);else ws.send(JSON.stringify(msg));
  } else {
    if (queue) queue.push([msg, cb]);else window.OverlayPluginApi.callHandler(JSON.stringify(msg), cb);
  }
};

const processEvent = msg => {
  init();
  const subs = subscribers[msg.type];
  subs === null || subs === void 0 ? void 0 : subs.forEach(sub => {
    try {
      sub(msg);
    } catch (e) {
      console.error(e);
    }
  });
};

const dispatchOverlayEvent = processEvent;
const addOverlayListener = (event, cb) => {
  var _subscribers$event;

  init();

  if (!subscribers[event]) {
    subscribers[event] = [];

    if (!queue) {
      sendMessage({
        call: 'subscribe',
        events: [event]
      });
    }
  }

  (_subscribers$event = subscribers[event]) === null || _subscribers$event === void 0 ? void 0 : _subscribers$event.push(cb);
};
const removeOverlayListener = (event, cb) => {
  init();

  if (subscribers[event]) {
    const list = subscribers[event];
    const pos = list === null || list === void 0 ? void 0 : list.indexOf(cb);
    if (pos !== undefined && pos > -1) list === null || list === void 0 ? void 0 : list.splice(pos, 1);
  }
};

const callOverlayHandlerInternal = _msg => {
  init();
  const msg = { ..._msg,
    rseq: 0
  };
  let p;

  if (ws) {
    msg.rseq = rseqCounter++;
    p = new Promise(resolve => {
      responsePromises[msg.rseq] = resolve;
    });
    sendMessage(msg);
  } else {
    p = new Promise(resolve => {
      sendMessage(msg, data => {
        resolve(data === null ? null : JSON.parse(data));
      });
    });
  }

  return p;
};

const callOverlayHandlerOverrideMap = {};
const callOverlayHandler = _msg => {
  var _callOverlayHandlerOv;

  init(); // If this `as` is incorrect, then it will not find an override.
  // TODO: we could also replace this with a type guard.

  const type = _msg.call;
  const callFunc = (_callOverlayHandlerOv = callOverlayHandlerOverrideMap[type]) !== null && _callOverlayHandlerOv !== void 0 ? _callOverlayHandlerOv : callOverlayHandlerInternal; // The `IOverlayHandler` type guarantees that parameters/return type match
  // one of the overlay handlers.  The OverrideMap also only stores functions
  // that match by the discriminating `call` field, and so any overrides
  // should be correct here.
  // eslint-disable-next-line max-len
  // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-argument

  return callFunc(_msg);
};
const setOverlayHandlerOverride = (type, override) => {
  if (!override) {
    delete callOverlayHandlerOverrideMap[type];
    return;
  }

  callOverlayHandlerOverrideMap[type] = override;
};
const init = () => {
  if (inited) return;

  if (typeof window !== 'undefined') {
    wsUrl = new URLSearchParams(window.location.search).get('OVERLAY_WS');

    if (wsUrl !== null) {
      const connectWs = function (wsUrl) {
        ws = new WebSocket(wsUrl);
        ws.addEventListener('error', e => {
          console.error(e);
        });
        ws.addEventListener('open', () => {
          var _queue;

          console.log('Connected!');
          const q = (_queue = queue) !== null && _queue !== void 0 ? _queue : [];
          queue = null;
          sendMessage({
            call: 'subscribe',
            events: Object.keys(subscribers)
          });

          for (const msg of q) {
            if (!Array.isArray(msg)) sendMessage(msg);
          }
        });
        ws.addEventListener('message', _msg => {
          try {
            if (typeof _msg.data !== 'string') {
              console.error('Invalid message data received: ', _msg);
              return;
            }

            const msg = JSON.parse(_msg.data);

            if (msg.rseq !== undefined && responsePromises[msg.rseq]) {
              var _responsePromises$msg;

              (_responsePromises$msg = responsePromises[msg.rseq]) === null || _responsePromises$msg === void 0 ? void 0 : _responsePromises$msg.call(responsePromises, msg);
              delete responsePromises[msg.rseq];
            } else {
              processEvent(msg);
            }
          } catch (e) {
            console.error('Invalid message received: ', _msg);
            return;
          }
        });
        ws.addEventListener('close', () => {
          queue = null;
          console.log('Trying to reconnect...'); // Don't spam the server with retries.

          window.setTimeout(() => {
            connectWs(wsUrl);
          }, 300);
        });
      };

      connectWs(wsUrl);
    } else {
      const waitForApi = function () {
        var _queue2;

        if (!window.OverlayPluginApi || !window.OverlayPluginApi.ready) {
          window.setTimeout(waitForApi, 300);
          return;
        }

        const q = (_queue2 = queue) !== null && _queue2 !== void 0 ? _queue2 : [];
        queue = null;
        window.__OverlayCallback = processEvent;
        sendMessage({
          call: 'subscribe',
          events: Object.keys(subscribers)
        });

        for (const item of q) {
          if (Array.isArray(item)) sendMessage(item[0], item[1]);
        }
      };

      waitForApi();
    } // Here the OverlayPlugin API is registered to the window object,
    // but this is mainly for backwards compatibility.For cactbot's built-in files,
    // it is recommended to use the various functions exported in resources/overlay_plugin_api.ts.


    window.addOverlayListener = addOverlayListener;
    window.removeOverlayListener = removeOverlayListener;
    window.callOverlayHandler = callOverlayHandler;
    window.dispatchOverlayEvent = dispatchOverlayEvent;
  }

  inited = true;
};
;// CONCATENATED MODULE: ./ui/test/test.ts


addOverlayListener('ChangeZone', e => {
  const currentZone = document.getElementById('currentZone');
  if (currentZone) currentZone.innerText = `currentZone: ${e.zoneName} (${e.zoneID})`;
});
addOverlayListener('onInCombatChangedEvent', e => {
  const inCombat = document.getElementById('inCombat');

  if (inCombat) {
    inCombat.innerText = `inCombat: act: ${e.detail.inACTCombat ? 'yes' : 'no'} game: ${e.detail.inGameCombat ? 'yes' : 'no'}`;
  }
});
addOverlayListener('onPlayerChangedEvent', e => {
  const hp = document.getElementById('hp');
  if (hp) hp.innerText = `${e.detail.currentHP}/${e.detail.maxHP} (${e.detail.currentShield})`;
  const mp = document.getElementById('mp');
  if (mp) mp.innerText = `${e.detail.currentMP}/${e.detail.maxMP}`;
  const cp = document.getElementById('cp');
  if (cp) cp.innerText = `${e.detail.currentCP}/${e.detail.maxCP}`;
  const gp = document.getElementById('gp');
  if (gp) gp.innerText = `${e.detail.currentGP}/${e.detail.maxGP}`;
  const job = document.getElementById('job');
  if (job) job.innerText = `${e.detail.level} ${e.detail.job}`;
  const debug = document.getElementById('debug');
  if (debug) debug.innerText = e.detail.debugJob;
  const jobInfo = document.getElementById('jobinfo');

  if (jobInfo) {
    const detail = e.detail;

    if (detail.job === 'RDM' && detail.jobDetail) {
      jobInfo.innerText = `${detail.jobDetail.whiteMana} | ${detail.jobDetail.blackMana}`;
    } else if (detail.job === 'WAR' && detail.jobDetail) {
      jobInfo.innerText = detail.jobDetail.beast.toString();
    } else if (detail.job === 'DRK' && detail.jobDetail) {
      jobInfo.innerText = `${detail.jobDetail.blood} | ${detail.jobDetail.darksideMilliseconds} | ${detail.jobDetail.darkArts.toString()} | ${detail.jobDetail.livingShadowMilliseconds}`;
    } else if (detail.job === 'GNB' && detail.jobDetail) {
      jobInfo.innerText = `${detail.jobDetail.cartridges}${detail.jobDetail.continuationState}`;
    } else if (detail.job === 'PLD' && detail.jobDetail) {
      jobInfo.innerText = detail.jobDetail.oath.toString();
    } else if (detail.job === 'BRD' && detail.jobDetail) {
      jobInfo.innerText = `${detail.jobDetail.songName} | ${detail.jobDetail.songProcs} | ${detail.jobDetail.soulGauge} | ${detail.jobDetail.songMilliseconds}`;
    } else if (detail.job === 'DNC' && detail.jobDetail) {
      jobInfo.innerText = `${detail.jobDetail.feathers} | ${detail.jobDetail.esprit} | [${detail.jobDetail.steps.join(', ')}] | ${detail.jobDetail.currentStep}`;
    } else if (detail.job === 'NIN' && detail.jobDetail) {
      jobInfo.innerText = `${detail.jobDetail.hutonMilliseconds} | ${detail.jobDetail.ninkiAmount}`;
    } else if (detail.job === 'DRG' && detail.jobDetail) {
      jobInfo.innerText = `${detail.jobDetail.bloodMilliseconds} | ${detail.jobDetail.lifeMilliseconds} | ${detail.jobDetail.eyesAmount}`;
    } else if (detail.job === 'BLM' && detail.jobDetail) {
      jobInfo.innerText = `${detail.jobDetail.umbralStacks} (${detail.jobDetail.umbralMilliseconds}) | ${detail.jobDetail.umbralHearts} | ${detail.jobDetail.foulCount} ${detail.jobDetail.enochian.toString()} (${detail.jobDetail.nextPolyglotMilliseconds})`;
    } else if (detail.job === 'THM' && detail.jobDetail) {
      jobInfo.innerText = `${detail.jobDetail.umbralStacks} (${detail.jobDetail.umbralMilliseconds})`;
    } else if (detail.job === 'WHM' && detail.jobDetail) {
      jobInfo.innerText = `${detail.jobDetail.lilyStacks} (${detail.jobDetail.lilyMilliseconds}) | ${detail.jobDetail.bloodlilyStacks}`;
    } else if (detail.job === 'SMN' && detail.jobDetail) {
      jobInfo.innerText = `${detail.jobDetail.aetherflowStacks} | ${detail.jobDetail.dreadwyrmStacks} | ${detail.jobDetail.bahamutStance} | ${detail.jobDetail.bahamutSummoned} (${detail.jobDetail.stanceMilliseconds}) | ${detail.jobDetail.phoenixReady}`;
    } else if (detail.job === 'SCH' && detail.jobDetail) {
      jobInfo.innerText = `${detail.jobDetail.aetherflowStacks} | ${detail.jobDetail.fairyGauge} | ${detail.jobDetail.fairyStatus} (${detail.jobDetail.fairyMilliseconds})`;
    } else if (detail.job === 'ACN' && detail.jobDetail) {
      jobInfo.innerText = detail.jobDetail.aetherflowStacks.toString();
    } else if (detail.job === 'AST' && detail.jobDetail) {
      jobInfo.innerText = `${detail.jobDetail.heldCard} [${detail.jobDetail.arcanums.join(', ')}]`;
    } else if (detail.job === 'MNK' && detail.jobDetail) {
      jobInfo.innerText = `${detail.jobDetail.chakraStacks}`;
    } else if (detail.job === 'MCH' && detail.jobDetail) {
      jobInfo.innerText = `${detail.jobDetail.heat} (${detail.jobDetail.overheatMilliseconds}) | ${detail.jobDetail.battery} (${detail.jobDetail.batteryMilliseconds}) | last: ${detail.jobDetail.lastBatteryAmount} | ${detail.jobDetail.overheatActive.toString()} | ${detail.jobDetail.robotActive.toString()}`;
    } else if (detail.job === 'SAM' && detail.jobDetail) {
      jobInfo.innerText = `${detail.jobDetail.kenki} | ${detail.jobDetail.meditationStacks}(${detail.jobDetail.setsu.toString()},${detail.jobDetail.getsu.toString()},${detail.jobDetail.ka.toString()})`;
    } else {
      jobInfo.innerText = '';
    }
  }

  const pos = document.getElementById('pos');

  if (pos) {
    pos.innerText = `${e.detail.pos.x.toFixed(2)},${e.detail.pos.y.toFixed(2)},${e.detail.pos.z.toFixed(2)}`;
  }

  const rotation = document.getElementById('rotation');
  if (rotation) rotation.innerText = e.detail.rotation.toString();
  const bait = document.getElementById('bait');
  if (bait) bait.innerText = e.detail.bait.toString();
});
addOverlayListener('EnmityTargetData', e => {
  const target = document.getElementById('target');
  if (target) target.innerText = e.Target ? e.Target.Name : '--';
  const tid = document.getElementById('tid');
  if (tid) tid.innerText = e.Target ? e.Target.ID.toString(16) : '';
  const tdistance = document.getElementById('tdistance');
  if (tdistance) tdistance.innerText = e.Target ? e.Target.Distance.toString() : '';
});
addOverlayListener('onGameExistsEvent', _e => {// console.log("Game exists: " + e.detail.exists);
});
addOverlayListener('onGameActiveChangedEvent', _e => {// console.log("Game active: " + e.detail.active);
});
addOverlayListener('onLogEvent', e => {
  e.detail.logs.forEach(log => {
    // Match "/echo tts:<stuff>"
    const r = /00:0038:tts:(.*)/.exec(log);

    if (r && r[1]) {
      void callOverlayHandler({
        call: 'cactbotSay',
        text: r[1]
      });
    }
  });
});
addOverlayListener('onUserFileChanged', e => {
  console.log(`User file ${e.file} changed!`);
});
addOverlayListener('FileChanged', e => {
  console.log(`File ${e.file} changed!`);
});
void callOverlayHandler({
  call: 'cactbotRequestState'
});
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYWN0Ym90Ly4vcmVzb3VyY2VzL292ZXJsYXlfcGx1Z2luX2FwaS50cyIsIndlYnBhY2s6Ly9jYWN0Ym90Ly4vdWkvdGVzdC90ZXN0LnRzIl0sIm5hbWVzIjpbImluaXRlZCIsIndzVXJsIiwid3MiLCJxdWV1ZSIsInJzZXFDb3VudGVyIiwicmVzcG9uc2VQcm9taXNlcyIsInN1YnNjcmliZXJzIiwic2VuZE1lc3NhZ2UiLCJtc2ciLCJjYiIsInB1c2giLCJzZW5kIiwiSlNPTiIsInN0cmluZ2lmeSIsIndpbmRvdyIsIk92ZXJsYXlQbHVnaW5BcGkiLCJjYWxsSGFuZGxlciIsInByb2Nlc3NFdmVudCIsImluaXQiLCJzdWJzIiwidHlwZSIsImZvckVhY2giLCJzdWIiLCJlIiwiY29uc29sZSIsImVycm9yIiwiZGlzcGF0Y2hPdmVybGF5RXZlbnQiLCJhZGRPdmVybGF5TGlzdGVuZXIiLCJldmVudCIsImNhbGwiLCJldmVudHMiLCJyZW1vdmVPdmVybGF5TGlzdGVuZXIiLCJsaXN0IiwicG9zIiwiaW5kZXhPZiIsInVuZGVmaW5lZCIsInNwbGljZSIsImNhbGxPdmVybGF5SGFuZGxlckludGVybmFsIiwiX21zZyIsInJzZXEiLCJwIiwiUHJvbWlzZSIsInJlc29sdmUiLCJkYXRhIiwicGFyc2UiLCJjYWxsT3ZlcmxheUhhbmRsZXJPdmVycmlkZU1hcCIsImNhbGxPdmVybGF5SGFuZGxlciIsImNhbGxGdW5jIiwic2V0T3ZlcmxheUhhbmRsZXJPdmVycmlkZSIsIm92ZXJyaWRlIiwiVVJMU2VhcmNoUGFyYW1zIiwibG9jYXRpb24iLCJzZWFyY2giLCJnZXQiLCJjb25uZWN0V3MiLCJXZWJTb2NrZXQiLCJhZGRFdmVudExpc3RlbmVyIiwibG9nIiwicSIsIk9iamVjdCIsImtleXMiLCJBcnJheSIsImlzQXJyYXkiLCJzZXRUaW1lb3V0Iiwid2FpdEZvckFwaSIsInJlYWR5IiwiX19PdmVybGF5Q2FsbGJhY2siLCJpdGVtIiwiY3VycmVudFpvbmUiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiaW5uZXJUZXh0Iiwiem9uZU5hbWUiLCJ6b25lSUQiLCJpbkNvbWJhdCIsImRldGFpbCIsImluQUNUQ29tYmF0IiwiaW5HYW1lQ29tYmF0IiwiaHAiLCJjdXJyZW50SFAiLCJtYXhIUCIsImN1cnJlbnRTaGllbGQiLCJtcCIsImN1cnJlbnRNUCIsIm1heE1QIiwiY3AiLCJjdXJyZW50Q1AiLCJtYXhDUCIsImdwIiwiY3VycmVudEdQIiwibWF4R1AiLCJqb2IiLCJsZXZlbCIsImRlYnVnIiwiZGVidWdKb2IiLCJqb2JJbmZvIiwiam9iRGV0YWlsIiwid2hpdGVNYW5hIiwiYmxhY2tNYW5hIiwiYmVhc3QiLCJ0b1N0cmluZyIsImJsb29kIiwiZGFya3NpZGVNaWxsaXNlY29uZHMiLCJkYXJrQXJ0cyIsImxpdmluZ1NoYWRvd01pbGxpc2Vjb25kcyIsImNhcnRyaWRnZXMiLCJjb250aW51YXRpb25TdGF0ZSIsIm9hdGgiLCJzb25nTmFtZSIsInNvbmdQcm9jcyIsInNvdWxHYXVnZSIsInNvbmdNaWxsaXNlY29uZHMiLCJmZWF0aGVycyIsImVzcHJpdCIsInN0ZXBzIiwiam9pbiIsImN1cnJlbnRTdGVwIiwiaHV0b25NaWxsaXNlY29uZHMiLCJuaW5raUFtb3VudCIsImJsb29kTWlsbGlzZWNvbmRzIiwibGlmZU1pbGxpc2Vjb25kcyIsImV5ZXNBbW91bnQiLCJ1bWJyYWxTdGFja3MiLCJ1bWJyYWxNaWxsaXNlY29uZHMiLCJ1bWJyYWxIZWFydHMiLCJmb3VsQ291bnQiLCJlbm9jaGlhbiIsIm5leHRQb2x5Z2xvdE1pbGxpc2Vjb25kcyIsImxpbHlTdGFja3MiLCJsaWx5TWlsbGlzZWNvbmRzIiwiYmxvb2RsaWx5U3RhY2tzIiwiYWV0aGVyZmxvd1N0YWNrcyIsImRyZWFkd3lybVN0YWNrcyIsImJhaGFtdXRTdGFuY2UiLCJiYWhhbXV0U3VtbW9uZWQiLCJzdGFuY2VNaWxsaXNlY29uZHMiLCJwaG9lbml4UmVhZHkiLCJmYWlyeUdhdWdlIiwiZmFpcnlTdGF0dXMiLCJmYWlyeU1pbGxpc2Vjb25kcyIsImhlbGRDYXJkIiwiYXJjYW51bXMiLCJjaGFrcmFTdGFja3MiLCJoZWF0Iiwib3ZlcmhlYXRNaWxsaXNlY29uZHMiLCJiYXR0ZXJ5IiwiYmF0dGVyeU1pbGxpc2Vjb25kcyIsImxhc3RCYXR0ZXJ5QW1vdW50Iiwib3ZlcmhlYXRBY3RpdmUiLCJyb2JvdEFjdGl2ZSIsImtlbmtpIiwibWVkaXRhdGlvblN0YWNrcyIsInNldHN1IiwiZ2V0c3UiLCJrYSIsIngiLCJ0b0ZpeGVkIiwieSIsInoiLCJyb3RhdGlvbiIsImJhaXQiLCJ0YXJnZXQiLCJUYXJnZXQiLCJOYW1lIiwidGlkIiwiSUQiLCJ0ZGlzdGFuY2UiLCJEaXN0YW5jZSIsIl9lIiwibG9ncyIsInIiLCJleGVjIiwidGV4dCIsImZpbGUiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFzREEsSUFBSUEsTUFBTSxHQUFHLEtBQWI7QUFFQSxJQUFJQyxLQUFvQixHQUFHLElBQTNCO0FBQ0EsSUFBSUMsRUFBb0IsR0FBRyxJQUEzQjtBQUNBLElBQUlDLEtBR00sR0FBRyxFQUhiO0FBSUEsSUFBSUMsV0FBVyxHQUFHLENBQWxCO0FBQ0EsTUFBTUMsZ0JBQTBELEdBQUcsRUFBbkU7QUFFQSxNQUFNQyxXQUEwQyxHQUFHLEVBQW5EOztBQUVBLE1BQU1DLFdBQVcsR0FBRyxDQUNsQkMsR0FEa0IsRUFFbEJDLEVBRmtCLEtBR1Q7QUFDVCxNQUFJUCxFQUFKLEVBQVE7QUFDTixRQUFJQyxLQUFKLEVBQ0VBLEtBQUssQ0FBQ08sSUFBTixDQUFXRixHQUFYLEVBREYsS0FHRU4sRUFBRSxDQUFDUyxJQUFILENBQVFDLElBQUksQ0FBQ0MsU0FBTCxDQUFlTCxHQUFmLENBQVI7QUFDSCxHQUxELE1BS087QUFDTCxRQUFJTCxLQUFKLEVBQ0VBLEtBQUssQ0FBQ08sSUFBTixDQUFXLENBQUNGLEdBQUQsRUFBTUMsRUFBTixDQUFYLEVBREYsS0FHRUssTUFBTSxDQUFDQyxnQkFBUCxDQUF3QkMsV0FBeEIsQ0FBb0NK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QUQsRUFBZ0JKLENBQUQsSUFBTztBQUN0Q0EsR0FBQyxDQUFDb0QsTUFBRixDQUFTOEYsSUFBVCxDQUFjcEosT0FBZCxDQUF1Qm9DLEdBQUQsSUFBUztBQUM3QjtBQUNBLFVBQU1pSCxDQUFDLEdBQUcsbUJBQW1CQyxJQUFuQixDQUF3QmxILEdBQXhCLENBQVY7O0FBQ0EsUUFBSWlILENBQUMsSUFBSUEsQ0FBQyxDQUFDLENBQUQsQ0FBVixFQUFlO0FBQ2IsV0FBSzVILGtCQUFrQixDQUFDO0FBQ3RCakIsWUFBSSxFQUFFLFlBRGdCO0FBRXRCK0ksWUFBSSxFQUFFRixDQUFDLENBQUMsQ0FBRDtBQUZlLE9BQUQsQ0FBdkI7QUFJRDtBQUNGLEdBVEQ7QUFVRCxDQVhpQixDQUFsQjtBQWFBL0ksa0JBQWtCLENBQUMsbUJBQUQsRUFBdUJKLENBQUQsSUFBTztBQUM3Q0MsU0FBTyxDQUFDaUMsR0FBUixDQUFhLGFBQVlsQyxDQUFDLENBQUNzSixJQUFLLFdBQWhDO0FBQ0QsQ0FGaUIsQ0FBbEI7QUFJQWxKLGtCQUFrQixDQUFDLGFBQUQsRUFBaUJKLENBQUQsSUFBTztBQUN2Q0MsU0FBTyxDQUFDaUMsR0FBUixDQUFhLFFBQU9sQyxDQUFDLENBQUNzSixJQUFLLFdBQTNCO0FBQ0QsQ0FGaUIsQ0FBbEI7QUFJQSxLQUFLL0gsa0JBQWtCLENBQUM7QUFBRWpCLE1BQUksRUFBRTtBQUFSLENBQUQsQ0FBdkIsQyIsImZpbGUiOiJ1aS90ZXN0L3Rlc3QuYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gT3ZlcmxheVBsdWdpbiBBUEkgc2V0dXBcclxuXHJcbmltcG9ydCB7XHJcbiAgRXZlbnRNYXAsXHJcbiAgRXZlbnRUeXBlLFxyXG4gIElPdmVybGF5SGFuZGxlcixcclxuICBPdmVybGF5SGFuZGxlckZ1bmNzLFxyXG4gIE92ZXJsYXlIYW5kbGVyVHlwZXMsXHJcbn0gZnJvbSAnLi4vdHlwZXMvZXZlbnQnO1xyXG5cclxuZGVjbGFyZSBnbG9iYWwge1xyXG4gIGludGVyZmFjZSBXaW5kb3cge1xyXG4gICAgX19PdmVybGF5Q2FsbGJhY2s6IEV2ZW50TWFwW0V2ZW50VHlwZV07XHJcbiAgICBkaXNwYXRjaE92ZXJsYXlFdmVudD86IHR5cGVvZiBwcm9jZXNzRXZlbnQ7XHJcbiAgICBPdmVybGF5UGx1Z2luQXBpOiB7XHJcbiAgICAgIHJlYWR5OiBib29sZWFuO1xyXG4gICAgICBjYWxsSGFuZGxlcjogKG1zZzogc3RyaW5nLCBjYj86ICh2YWx1ZTogc3RyaW5nKSA9PiB1bmtub3duKSA9PiB2b2lkO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGRlcHJlY2F0ZWQgVGhpcyBpcyBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS5cclxuICAgICAqXHJcbiAgICAgKiBJdCBpcyByZWNvbW1lbmRlZCB0byBpbXBvcnQgZnJvbSB0aGlzIGZpbGU6XHJcbiAgICAgKlxyXG4gICAgICogYGltcG9ydCB7IGFkZE92ZXJsYXlMaXN0ZW5lciB9IGZyb20gJy9wYXRoL3RvL292ZXJsYXlfcGx1Z2luX2FwaSc7YFxyXG4gICAgICovXHJcbiAgICBhZGRPdmVybGF5TGlzdGVuZXI6IElBZGRPdmVybGF5TGlzdGVuZXI7XHJcbiAgICAvKipcclxuICAgICAqIEBkZXByZWNhdGVkIFRoaXMgaXMgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXHJcbiAgICAgKlxyXG4gICAgICogSXQgaXMgcmVjb21tZW5kZWQgdG8gaW1wb3J0IGZyb20gdGhpcyBmaWxlOlxyXG4gICAgICpcclxuICAgICAqIGBpbXBvcnQgeyByZW1vdmVPdmVybGF5TGlzdGVuZXIgfSBmcm9tICcvcGF0aC90by9vdmVybGF5X3BsdWdpbl9hcGknO2BcclxuICAgICAqL1xyXG4gICAgcmVtb3ZlT3ZlcmxheUxpc3RlbmVyOiBJUmVtb3ZlT3ZlcmxheUxpc3RlbmVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVwcmVjYXRlZCBUaGlzIGlzIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxyXG4gICAgICpcclxuICAgICAqIEl0IGlzIHJlY29tbWVuZGVkIHRvIGltcG9ydCBmcm9tIHRoaXMgZmlsZTpcclxuICAgICAqXHJcbiAgICAgKiBgaW1wb3J0IHsgY2FsbE92ZXJsYXlIYW5kbGVyIH0gZnJvbSAnL3BhdGgvdG8vb3ZlcmxheV9wbHVnaW5fYXBpJztgXHJcbiAgICAgKi9cclxuICAgIGNhbGxPdmVybGF5SGFuZGxlcjogSU92ZXJsYXlIYW5kbGVyO1xyXG4gIH1cclxufVxyXG5cclxudHlwZSBJQWRkT3ZlcmxheUxpc3RlbmVyID0gPFQgZXh0ZW5kcyBFdmVudFR5cGU+KGV2ZW50OiBULCBjYjogRXZlbnRNYXBbVF0pID0+IHZvaWQ7XHJcbnR5cGUgSVJlbW92ZU92ZXJsYXlMaXN0ZW5lciA9IDxUIGV4dGVuZHMgRXZlbnRUeXBlPihldmVudDogVCwgY2I6IEV2ZW50TWFwW1RdKSA9PiB2b2lkO1xyXG5cclxudHlwZSBTdWJzY3JpYmVyPFQ+ID0ge1xyXG4gIFtrZXkgaW4gRXZlbnRUeXBlXT86IFRbXTtcclxufTtcclxudHlwZSBFdmVudFBhcmFtZXRlciA9IFBhcmFtZXRlcnM8RXZlbnRNYXBbRXZlbnRUeXBlXT5bMF07XHJcbnR5cGUgVm9pZEZ1bmM8VD4gPSAoLi4uYXJnczogVFtdKSA9PiB2b2lkO1xyXG5cclxubGV0IGluaXRlZCA9IGZhbHNlO1xyXG5cclxubGV0IHdzVXJsOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcclxubGV0IHdzOiBXZWJTb2NrZXQgfCBudWxsID0gbnVsbDtcclxubGV0IHF1ZXVlOiAoXHJcbiAgfCB7IFtzOiBzdHJpbmddOiB1bmtub3duIH1cclxuICB8IFt7IFtzOiBzdHJpbmddOiB1bmtub3duIH0sICgodmFsdWU6IHN0cmluZyB8IG51bGwpID0+IHVua25vd24pIHwgdW5kZWZpbmVkXVxyXG4pW10gfCBudWxsID0gW107XHJcbmxldCByc2VxQ291bnRlciA9IDA7XHJcbmNvbnN0IHJlc3BvbnNlUHJvbWlzZXM6IFJlY29yZDxudW1iZXIsICh2YWx1ZTogdW5rbm93bikgPT4gdm9pZD4gPSB7fTtcclxuXHJcbmNvbnN0IHN1YnNjcmliZXJzOiBTdWJzY3JpYmVyPFZvaWRGdW5jPHVua25vd24+PiA9IHt9O1xyXG5cclxuY29uc3Qgc2VuZE1lc3NhZ2UgPSAoXHJcbiAgbXNnOiB7IFtzOiBzdHJpbmddOiB1bmtub3duIH0sXHJcbiAgY2I/OiAodmFsdWU6IHN0cmluZyB8IG51bGwpID0+IHVua25vd24sXHJcbik6IHZvaWQgPT4ge1xyXG4gIGlmICh3cykge1xyXG4gICAgaWYgKHF1ZXVlKVxyXG4gICAgICBxdWV1ZS5wdXNoKG1zZyk7XHJcbiAgICBlbHNlXHJcbiAgICAgIHdzLnNlbmQoSlNPTi5zdHJpbmdpZnkobXNnKSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGlmIChxdWV1ZSlcclxuICAgICAgcXVldWUucHVzaChbbXNnLCBjYl0pO1xyXG4gICAgZWxzZVxyXG4gICAgICB3aW5kb3cuT3ZlcmxheVBsdWdpbkFwaS5jYWxsSGFuZGxlcihKU09OLnN0cmluZ2lmeShtc2cpLCBjYik7XHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgcHJvY2Vzc0V2ZW50ID0gPFQgZXh0ZW5kcyBFdmVudFR5cGU+KG1zZzogUGFyYW1ldGVyczxFdmVudE1hcFtUXT5bMF0pOiB2b2lkID0+IHtcclxuICBpbml0KCk7XHJcblxyXG4gIGNvbnN0IHN1YnMgPSBzdWJzY3JpYmVyc1ttc2cudHlwZV07XHJcbiAgc3Vicz8uZm9yRWFjaCgoc3ViKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBzdWIobXNnKTtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgIH1cclxuICB9KTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBkaXNwYXRjaE92ZXJsYXlFdmVudCA9IHByb2Nlc3NFdmVudDtcclxuXHJcbmV4cG9ydCBjb25zdCBhZGRPdmVybGF5TGlzdGVuZXI6IElBZGRPdmVybGF5TGlzdGVuZXIgPSAoZXZlbnQsIGNiKTogdm9pZCA9PiB7XHJcbiAgaW5pdCgpO1xyXG5cclxuICBpZiAoIXN1YnNjcmliZXJzW2V2ZW50XSkge1xyXG4gICAgc3Vic2NyaWJlcnNbZXZlbnRdID0gW107XHJcblxyXG4gICAgaWYgKCFxdWV1ZSkge1xyXG4gICAgICBzZW5kTWVzc2FnZSh7XHJcbiAgICAgICAgY2FsbDogJ3N1YnNjcmliZScsXHJcbiAgICAgICAgZXZlbnRzOiBbZXZlbnRdLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN1YnNjcmliZXJzW2V2ZW50XT8ucHVzaChjYiBhcyBWb2lkRnVuYzx1bmtub3duPik7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgcmVtb3ZlT3ZlcmxheUxpc3RlbmVyOiBJUmVtb3ZlT3ZlcmxheUxpc3RlbmVyID0gKGV2ZW50LCBjYik6IHZvaWQgPT4ge1xyXG4gIGluaXQoKTtcclxuXHJcbiAgaWYgKHN1YnNjcmliZXJzW2V2ZW50XSkge1xyXG4gICAgY29uc3QgbGlzdCA9IHN1YnNjcmliZXJzW2V2ZW50XTtcclxuICAgIGNvbnN0IHBvcyA9IGxpc3Q/LmluZGV4T2YoY2IgYXMgVm9pZEZ1bmM8dW5rbm93bj4pO1xyXG5cclxuICAgIGlmIChwb3MgIT09IHVuZGVmaW5lZCAmJiBwb3MgPiAtMSlcclxuICAgICAgbGlzdD8uc3BsaWNlKHBvcywgMSk7XHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgY2FsbE92ZXJsYXlIYW5kbGVySW50ZXJuYWw6IElPdmVybGF5SGFuZGxlciA9IChcclxuICBfbXNnOiB7IFtzOiBzdHJpbmddOiB1bmtub3duIH0sXHJcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuKTogUHJvbWlzZTxhbnk+ID0+IHtcclxuICBpbml0KCk7XHJcblxyXG4gIGNvbnN0IG1zZyA9IHtcclxuICAgIC4uLl9tc2csXHJcbiAgICByc2VxOiAwLFxyXG4gIH07XHJcbiAgbGV0IHA6IFByb21pc2U8dW5rbm93bj47XHJcblxyXG4gIGlmICh3cykge1xyXG4gICAgbXNnLnJzZXEgPSByc2VxQ291bnRlcisrO1xyXG4gICAgcCA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgIHJlc3BvbnNlUHJvbWlzZXNbbXNnLnJzZXFdID0gcmVzb2x2ZTtcclxuICAgIH0pO1xyXG5cclxuICAgIHNlbmRNZXNzYWdlKG1zZyk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHAgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICBzZW5kTWVzc2FnZShtc2csIChkYXRhKSA9PiB7XHJcbiAgICAgICAgcmVzb2x2ZShkYXRhID09PSBudWxsID8gbnVsbCA6IEpTT04ucGFyc2UoZGF0YSkpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHA7XHJcbn07XHJcblxyXG50eXBlIE92ZXJyaWRlTWFwID0geyBbY2FsbCBpbiBPdmVybGF5SGFuZGxlclR5cGVzXT86IE92ZXJsYXlIYW5kbGVyRnVuY3NbY2FsbF0gfTtcclxuY29uc3QgY2FsbE92ZXJsYXlIYW5kbGVyT3ZlcnJpZGVNYXA6IE92ZXJyaWRlTWFwID0ge307XHJcblxyXG5leHBvcnQgY29uc3QgY2FsbE92ZXJsYXlIYW5kbGVyOiBJT3ZlcmxheUhhbmRsZXIgPSAoXHJcbiAgX21zZzogeyBbczogc3RyaW5nXTogdW5rbm93biB9LFxyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbik6IFByb21pc2U8YW55PiA9PiB7XHJcbiAgaW5pdCgpO1xyXG5cclxuICAvLyBJZiB0aGlzIGBhc2AgaXMgaW5jb3JyZWN0LCB0aGVuIGl0IHdpbGwgbm90IGZpbmQgYW4gb3ZlcnJpZGUuXHJcbiAgLy8gVE9ETzogd2UgY291bGQgYWxzbyByZXBsYWNlIHRoaXMgd2l0aCBhIHR5cGUgZ3VhcmQuXHJcbiAgY29uc3QgdHlwZSA9IF9tc2cuY2FsbCBhcyBrZXlvZiBPdmVycmlkZU1hcDtcclxuICBjb25zdCBjYWxsRnVuYyA9IGNhbGxPdmVybGF5SGFuZGxlck92ZXJyaWRlTWFwW3R5cGVdID8/IGNhbGxPdmVybGF5SGFuZGxlckludGVybmFsO1xyXG5cclxuICAvLyBUaGUgYElPdmVybGF5SGFuZGxlcmAgdHlwZSBndWFyYW50ZWVzIHRoYXQgcGFyYW1ldGVycy9yZXR1cm4gdHlwZSBtYXRjaFxyXG4gIC8vIG9uZSBvZiB0aGUgb3ZlcmxheSBoYW5kbGVycy4gIFRoZSBPdmVycmlkZU1hcCBhbHNvIG9ubHkgc3RvcmVzIGZ1bmN0aW9uc1xyXG4gIC8vIHRoYXQgbWF0Y2ggYnkgdGhlIGRpc2NyaW1pbmF0aW5nIGBjYWxsYCBmaWVsZCwgYW5kIHNvIGFueSBvdmVycmlkZXNcclxuICAvLyBzaG91bGQgYmUgY29ycmVjdCBoZXJlLlxyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXHJcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnksQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hcmd1bWVudFxyXG4gIHJldHVybiBjYWxsRnVuYyhfbXNnIGFzIGFueSk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3Qgc2V0T3ZlcmxheUhhbmRsZXJPdmVycmlkZSA9IDxUIGV4dGVuZHMga2V5b2YgT3ZlcmxheUhhbmRsZXJGdW5jcz4oXHJcbiAgdHlwZTogVCxcclxuICBvdmVycmlkZT86IE92ZXJsYXlIYW5kbGVyRnVuY3NbVF0sXHJcbik6IHZvaWQgPT4ge1xyXG4gIGlmICghb3ZlcnJpZGUpIHtcclxuICAgIGRlbGV0ZSBjYWxsT3ZlcmxheUhhbmRsZXJPdmVycmlkZU1hcFt0eXBlXTtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgY2FsbE92ZXJsYXlIYW5kbGVyT3ZlcnJpZGVNYXBbdHlwZV0gPSBvdmVycmlkZTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBpbml0ID0gKCk6IHZvaWQgPT4ge1xyXG4gIGlmIChpbml0ZWQpXHJcbiAgICByZXR1cm47XHJcblxyXG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgd3NVcmwgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpLmdldCgnT1ZFUkxBWV9XUycpO1xyXG4gICAgaWYgKHdzVXJsICE9PSBudWxsKSB7XHJcbiAgICAgIGNvbnN0IGNvbm5lY3RXcyA9IGZ1bmN0aW9uKHdzVXJsOiBzdHJpbmcpIHtcclxuICAgICAgICB3cyA9IG5ldyBXZWJTb2NrZXQod3NVcmwpO1xyXG5cclxuICAgICAgICB3cy5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIChlKSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB3cy5hZGRFdmVudExpc3RlbmVyKCdvcGVuJywgKCkgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ0Nvbm5lY3RlZCEnKTtcclxuXHJcbiAgICAgICAgICBjb25zdCBxID0gcXVldWUgPz8gW107XHJcbiAgICAgICAgICBxdWV1ZSA9IG51bGw7XHJcblxyXG4gICAgICAgICAgc2VuZE1lc3NhZ2Uoe1xyXG4gICAgICAgICAgICBjYWxsOiAnc3Vic2NyaWJlJyxcclxuICAgICAgICAgICAgZXZlbnRzOiBPYmplY3Qua2V5cyhzdWJzY3JpYmVycyksXHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBmb3IgKGNvbnN0IG1zZyBvZiBxKSB7XHJcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShtc2cpKVxyXG4gICAgICAgICAgICAgIHNlbmRNZXNzYWdlKG1zZyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHdzLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCAoX21zZykgPT4ge1xyXG4gICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBfbXNnLmRhdGEgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignSW52YWxpZCBtZXNzYWdlIGRhdGEgcmVjZWl2ZWQ6ICcsIF9tc2cpO1xyXG4gICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBtc2cgPSBKU09OLnBhcnNlKF9tc2cuZGF0YSkgYXMgRXZlbnRQYXJhbWV0ZXIgJiB7IHJzZXE/OiBudW1iZXIgfTtcclxuXHJcbiAgICAgICAgICAgIGlmIChtc2cucnNlcSAhPT0gdW5kZWZpbmVkICYmIHJlc3BvbnNlUHJvbWlzZXNbbXNnLnJzZXFdKSB7XHJcbiAgICAgICAgICAgICAgcmVzcG9uc2VQcm9taXNlc1ttc2cucnNlcV0/Lihtc2cpO1xyXG4gICAgICAgICAgICAgIGRlbGV0ZSByZXNwb25zZVByb21pc2VzW21zZy5yc2VxXTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBwcm9jZXNzRXZlbnQobXNnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdJbnZhbGlkIG1lc3NhZ2UgcmVjZWl2ZWQ6ICcsIF9tc2cpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHdzLmFkZEV2ZW50TGlzdGVuZXIoJ2Nsb3NlJywgKCkgPT4ge1xyXG4gICAgICAgICAgcXVldWUgPSBudWxsO1xyXG5cclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdUcnlpbmcgdG8gcmVjb25uZWN0Li4uJyk7XHJcbiAgICAgICAgICAvLyBEb24ndCBzcGFtIHRoZSBzZXJ2ZXIgd2l0aCByZXRyaWVzLlxyXG4gICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25uZWN0V3Mod3NVcmwpO1xyXG4gICAgICAgICAgfSwgMzAwKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIGNvbm5lY3RXcyh3c1VybCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zdCB3YWl0Rm9yQXBpID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCF3aW5kb3cuT3ZlcmxheVBsdWdpbkFwaSB8fCAhd2luZG93Lk92ZXJsYXlQbHVnaW5BcGkucmVhZHkpIHtcclxuICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KHdhaXRGb3JBcGksIDMwMCk7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBxID0gcXVldWUgPz8gW107XHJcbiAgICAgICAgcXVldWUgPSBudWxsO1xyXG5cclxuICAgICAgICB3aW5kb3cuX19PdmVybGF5Q2FsbGJhY2sgPSBwcm9jZXNzRXZlbnQ7XHJcblxyXG4gICAgICAgIHNlbmRNZXNzYWdlKHtcclxuICAgICAgICAgIGNhbGw6ICdzdWJzY3JpYmUnLFxyXG4gICAgICAgICAgZXZlbnRzOiBPYmplY3Qua2V5cyhzdWJzY3JpYmVycyksXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBxKSB7XHJcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShpdGVtKSlcclxuICAgICAgICAgICAgc2VuZE1lc3NhZ2UoaXRlbVswXSwgaXRlbVsxXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgd2FpdEZvckFwaSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEhlcmUgdGhlIE92ZXJsYXlQbHVnaW4gQVBJIGlzIHJlZ2lzdGVyZWQgdG8gdGhlIHdpbmRvdyBvYmplY3QsXHJcbiAgICAvLyBidXQgdGhpcyBpcyBtYWlubHkgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LkZvciBjYWN0Ym90J3MgYnVpbHQtaW4gZmlsZXMsXHJcbiAgICAvLyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhlIHZhcmlvdXMgZnVuY3Rpb25zIGV4cG9ydGVkIGluIHJlc291cmNlcy9vdmVybGF5X3BsdWdpbl9hcGkudHMuXHJcbiAgICB3aW5kb3cuYWRkT3ZlcmxheUxpc3RlbmVyID0gYWRkT3ZlcmxheUxpc3RlbmVyO1xyXG4gICAgd2luZG93LnJlbW92ZU92ZXJsYXlMaXN0ZW5lciA9IHJlbW92ZU92ZXJsYXlMaXN0ZW5lcjtcclxuICAgIHdpbmRvdy5jYWxsT3ZlcmxheUhhbmRsZXIgPSBjYWxsT3ZlcmxheUhhbmRsZXI7XHJcbiAgICB3aW5kb3cuZGlzcGF0Y2hPdmVybGF5RXZlbnQgPSBkaXNwYXRjaE92ZXJsYXlFdmVudDtcclxuICB9XHJcblxyXG4gIGluaXRlZCA9IHRydWU7XHJcbn07XHJcbiIsImltcG9ydCB7IGFkZE92ZXJsYXlMaXN0ZW5lciwgY2FsbE92ZXJsYXlIYW5kbGVyIH0gZnJvbSAnLi4vLi4vcmVzb3VyY2VzL292ZXJsYXlfcGx1Z2luX2FwaSc7XHJcblxyXG5pbXBvcnQgJy4uLy4uL3Jlc291cmNlcy9kZWZhdWx0cy5jc3MnO1xyXG5cclxuYWRkT3ZlcmxheUxpc3RlbmVyKCdDaGFuZ2Vab25lJywgKGUpID0+IHtcclxuICBjb25zdCBjdXJyZW50Wm9uZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjdXJyZW50Wm9uZScpO1xyXG4gIGlmIChjdXJyZW50Wm9uZSlcclxuICAgIGN1cnJlbnRab25lLmlubmVyVGV4dCA9IGBjdXJyZW50Wm9uZTogJHtlLnpvbmVOYW1lfSAoJHtlLnpvbmVJRH0pYDtcclxufSk7XHJcblxyXG5hZGRPdmVybGF5TGlzdGVuZXIoJ29uSW5Db21iYXRDaGFuZ2VkRXZlbnQnLCAoZSkgPT4ge1xyXG4gIGNvbnN0IGluQ29tYmF0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luQ29tYmF0Jyk7XHJcbiAgaWYgKGluQ29tYmF0KSB7XHJcbiAgICBpbkNvbWJhdC5pbm5lclRleHQgPSBgaW5Db21iYXQ6IGFjdDogJHtcclxuICAgICAgZS5kZXRhaWwuaW5BQ1RDb21iYXQgPyAneWVzJyA6ICdubydcclxuICAgIH0gZ2FtZTogJHsoZS5kZXRhaWwuaW5HYW1lQ29tYmF0ID8gJ3llcycgOiAnbm8nKX1gO1xyXG4gIH1cclxufSk7XHJcblxyXG5hZGRPdmVybGF5TGlzdGVuZXIoJ29uUGxheWVyQ2hhbmdlZEV2ZW50JywgKGUpID0+IHtcclxuICBjb25zdCBocCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdocCcpO1xyXG4gIGlmIChocClcclxuICAgIGhwLmlubmVyVGV4dCA9IGAke2UuZGV0YWlsLmN1cnJlbnRIUH0vJHtlLmRldGFpbC5tYXhIUH0gKCR7ZS5kZXRhaWwuY3VycmVudFNoaWVsZH0pYDtcclxuICBjb25zdCBtcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtcCcpO1xyXG4gIGlmIChtcClcclxuICAgIG1wLmlubmVyVGV4dCA9IGAke2UuZGV0YWlsLmN1cnJlbnRNUH0vJHtlLmRldGFpbC5tYXhNUH1gO1xyXG4gIGNvbnN0IGNwID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NwJyk7XHJcbiAgaWYgKGNwKVxyXG4gICAgY3AuaW5uZXJUZXh0ID0gYCR7ZS5kZXRhaWwuY3VycmVudENQfS8ke2UuZGV0YWlsLm1heENQfWA7XHJcbiAgY29uc3QgZ3AgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ3AnKTtcclxuICBpZiAoZ3ApXHJcbiAgICBncC5pbm5lclRleHQgPSBgJHtlLmRldGFpbC5jdXJyZW50R1B9LyR7ZS5kZXRhaWwubWF4R1B9YDtcclxuICBjb25zdCBqb2IgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnam9iJyk7XHJcbiAgaWYgKGpvYilcclxuICAgIGpvYi5pbm5lclRleHQgPSBgJHtlLmRldGFpbC5sZXZlbH0gJHtlLmRldGFpbC5qb2J9YDtcclxuICBjb25zdCBkZWJ1ZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkZWJ1ZycpO1xyXG4gIGlmIChkZWJ1ZylcclxuICAgIGRlYnVnLmlubmVyVGV4dCA9IGUuZGV0YWlsLmRlYnVnSm9iO1xyXG5cclxuICBjb25zdCBqb2JJbmZvID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2pvYmluZm8nKTtcclxuICBpZiAoam9iSW5mbykge1xyXG4gICAgY29uc3QgZGV0YWlsID0gZS5kZXRhaWw7XHJcbiAgICBpZiAoZGV0YWlsLmpvYiA9PT0gJ1JETScgJiYgZGV0YWlsLmpvYkRldGFpbCkge1xyXG4gICAgICBqb2JJbmZvLmlubmVyVGV4dCA9IGAke2RldGFpbC5qb2JEZXRhaWwud2hpdGVNYW5hfSB8ICR7ZGV0YWlsLmpvYkRldGFpbC5ibGFja01hbmF9YDtcclxuICAgIH0gZWxzZSBpZiAoZGV0YWlsLmpvYiA9PT0gJ1dBUicgJiYgZGV0YWlsLmpvYkRldGFpbCkge1xyXG4gICAgICBqb2JJbmZvLmlubmVyVGV4dCA9IGRldGFpbC5qb2JEZXRhaWwuYmVhc3QudG9TdHJpbmcoKTtcclxuICAgIH0gZWxzZSBpZiAoZGV0YWlsLmpvYiA9PT0gJ0RSSycgJiYgZGV0YWlsLmpvYkRldGFpbCkge1xyXG4gICAgICBqb2JJbmZvLmlubmVyVGV4dCA9XHJcbiAgICAgICAgYCR7ZGV0YWlsLmpvYkRldGFpbC5ibG9vZH0gfCAke2RldGFpbC5qb2JEZXRhaWwuZGFya3NpZGVNaWxsaXNlY29uZHN9IHwgJHtkZXRhaWwuam9iRGV0YWlsLmRhcmtBcnRzLnRvU3RyaW5nKCl9IHwgJHtkZXRhaWwuam9iRGV0YWlsLmxpdmluZ1NoYWRvd01pbGxpc2Vjb25kc31gO1xyXG4gICAgfSBlbHNlIGlmIChkZXRhaWwuam9iID09PSAnR05CJyAmJiBkZXRhaWwuam9iRGV0YWlsKSB7XHJcbiAgICAgIGpvYkluZm8uaW5uZXJUZXh0ID0gYCR7ZGV0YWlsLmpvYkRldGFpbC5jYXJ0cmlkZ2VzfSR7ZGV0YWlsLmpvYkRldGFpbC5jb250aW51YXRpb25TdGF0ZX1gO1xyXG4gICAgfSBlbHNlIGlmIChkZXRhaWwuam9iID09PSAnUExEJyAmJiBkZXRhaWwuam9iRGV0YWlsKSB7XHJcbiAgICAgIGpvYkluZm8uaW5uZXJUZXh0ID0gZGV0YWlsLmpvYkRldGFpbC5vYXRoLnRvU3RyaW5nKCk7XHJcbiAgICB9IGVsc2UgaWYgKGRldGFpbC5qb2IgPT09ICdCUkQnICYmIGRldGFpbC5qb2JEZXRhaWwpIHtcclxuICAgICAgam9iSW5mby5pbm5lclRleHQgPVxyXG4gICAgICAgIGAke2RldGFpbC5qb2JEZXRhaWwuc29uZ05hbWV9IHwgJHtkZXRhaWwuam9iRGV0YWlsLnNvbmdQcm9jc30gfCAke2RldGFpbC5qb2JEZXRhaWwuc291bEdhdWdlfSB8ICR7ZGV0YWlsLmpvYkRldGFpbC5zb25nTWlsbGlzZWNvbmRzfWA7XHJcbiAgICB9IGVsc2UgaWYgKGRldGFpbC5qb2IgPT09ICdETkMnICYmIGRldGFpbC5qb2JEZXRhaWwpIHtcclxuICAgICAgam9iSW5mby5pbm5lclRleHQgPSBgJHtkZXRhaWwuam9iRGV0YWlsLmZlYXRoZXJzfSB8ICR7ZGV0YWlsLmpvYkRldGFpbC5lc3ByaXR9IHwgWyR7XHJcbiAgICAgICAgZGV0YWlsLmpvYkRldGFpbC5zdGVwcy5qb2luKCcsICcpXHJcbiAgICAgIH1dIHwgJHtkZXRhaWwuam9iRGV0YWlsLmN1cnJlbnRTdGVwfWA7XHJcbiAgICB9IGVsc2UgaWYgKGRldGFpbC5qb2IgPT09ICdOSU4nICYmIGRldGFpbC5qb2JEZXRhaWwpIHtcclxuICAgICAgam9iSW5mby5pbm5lclRleHQgPSBgJHtkZXRhaWwuam9iRGV0YWlsLmh1dG9uTWlsbGlzZWNvbmRzfSB8ICR7ZGV0YWlsLmpvYkRldGFpbC5uaW5raUFtb3VudH1gO1xyXG4gICAgfSBlbHNlIGlmIChkZXRhaWwuam9iID09PSAnRFJHJyAmJiBkZXRhaWwuam9iRGV0YWlsKSB7XHJcbiAgICAgIGpvYkluZm8uaW5uZXJUZXh0ID1cclxuICAgICAgICBgJHtkZXRhaWwuam9iRGV0YWlsLmJsb29kTWlsbGlzZWNvbmRzfSB8ICR7ZGV0YWlsLmpvYkRldGFpbC5saWZlTWlsbGlzZWNvbmRzfSB8ICR7ZGV0YWlsLmpvYkRldGFpbC5leWVzQW1vdW50fWA7XHJcbiAgICB9IGVsc2UgaWYgKGRldGFpbC5qb2IgPT09ICdCTE0nICYmIGRldGFpbC5qb2JEZXRhaWwpIHtcclxuICAgICAgam9iSW5mby5pbm5lclRleHQgPVxyXG4gICAgICAgIGAke2RldGFpbC5qb2JEZXRhaWwudW1icmFsU3RhY2tzfSAoJHtkZXRhaWwuam9iRGV0YWlsLnVtYnJhbE1pbGxpc2Vjb25kc30pIHwgJHtkZXRhaWwuam9iRGV0YWlsLnVtYnJhbEhlYXJ0c30gfCAke2RldGFpbC5qb2JEZXRhaWwuZm91bENvdW50fSAke2RldGFpbC5qb2JEZXRhaWwuZW5vY2hpYW4udG9TdHJpbmcoKX0gKCR7ZGV0YWlsLmpvYkRldGFpbC5uZXh0UG9seWdsb3RNaWxsaXNlY29uZHN9KWA7XHJcbiAgICB9IGVsc2UgaWYgKGRldGFpbC5qb2IgPT09ICdUSE0nICYmIGRldGFpbC5qb2JEZXRhaWwpIHtcclxuICAgICAgam9iSW5mby5pbm5lclRleHQgPVxyXG4gICAgICAgIGAke2RldGFpbC5qb2JEZXRhaWwudW1icmFsU3RhY2tzfSAoJHtkZXRhaWwuam9iRGV0YWlsLnVtYnJhbE1pbGxpc2Vjb25kc30pYDtcclxuICAgIH0gZWxzZSBpZiAoZGV0YWlsLmpvYiA9PT0gJ1dITScgJiYgZGV0YWlsLmpvYkRldGFpbCkge1xyXG4gICAgICBqb2JJbmZvLmlubmVyVGV4dCA9XHJcbiAgICAgICAgYCR7ZGV0YWlsLmpvYkRldGFpbC5saWx5U3RhY2tzfSAoJHtkZXRhaWwuam9iRGV0YWlsLmxpbHlNaWxsaXNlY29uZHN9KSB8ICR7ZGV0YWlsLmpvYkRldGFpbC5ibG9vZGxpbHlTdGFja3N9YDtcclxuICAgIH0gZWxzZSBpZiAoZGV0YWlsLmpvYiA9PT0gJ1NNTicgJiYgZGV0YWlsLmpvYkRldGFpbCkge1xyXG4gICAgICBqb2JJbmZvLmlubmVyVGV4dCA9XHJcbiAgICAgICAgYCR7ZGV0YWlsLmpvYkRldGFpbC5hZXRoZXJmbG93U3RhY2tzfSB8ICR7ZGV0YWlsLmpvYkRldGFpbC5kcmVhZHd5cm1TdGFja3N9IHwgJHtkZXRhaWwuam9iRGV0YWlsLmJhaGFtdXRTdGFuY2V9IHwgJHtkZXRhaWwuam9iRGV0YWlsLmJhaGFtdXRTdW1tb25lZH0gKCR7ZGV0YWlsLmpvYkRldGFpbC5zdGFuY2VNaWxsaXNlY29uZHN9KSB8ICR7ZGV0YWlsLmpvYkRldGFpbC5waG9lbml4UmVhZHl9YDtcclxuICAgIH0gZWxzZSBpZiAoZGV0YWlsLmpvYiA9PT0gJ1NDSCcgJiYgZGV0YWlsLmpvYkRldGFpbCkge1xyXG4gICAgICBqb2JJbmZvLmlubmVyVGV4dCA9XHJcbiAgICAgICAgYCR7ZGV0YWlsLmpvYkRldGFpbC5hZXRoZXJmbG93U3RhY2tzfSB8ICR7ZGV0YWlsLmpvYkRldGFpbC5mYWlyeUdhdWdlfSB8ICR7ZGV0YWlsLmpvYkRldGFpbC5mYWlyeVN0YXR1c30gKCR7ZGV0YWlsLmpvYkRldGFpbC5mYWlyeU1pbGxpc2Vjb25kc30pYDtcclxuICAgIH0gZWxzZSBpZiAoZGV0YWlsLmpvYiA9PT0gJ0FDTicgJiYgZGV0YWlsLmpvYkRldGFpbCkge1xyXG4gICAgICBqb2JJbmZvLmlubmVyVGV4dCA9IGRldGFpbC5qb2JEZXRhaWwuYWV0aGVyZmxvd1N0YWNrcy50b1N0cmluZygpO1xyXG4gICAgfSBlbHNlIGlmIChkZXRhaWwuam9iID09PSAnQVNUJyAmJiBkZXRhaWwuam9iRGV0YWlsKSB7XHJcbiAgICAgIGpvYkluZm8uaW5uZXJUZXh0ID0gYCR7ZGV0YWlsLmpvYkRldGFpbC5oZWxkQ2FyZH0gWyR7ZGV0YWlsLmpvYkRldGFpbC5hcmNhbnVtcy5qb2luKCcsICcpfV1gO1xyXG4gICAgfSBlbHNlIGlmIChkZXRhaWwuam9iID09PSAnTU5LJyAmJiBkZXRhaWwuam9iRGV0YWlsKSB7XHJcbiAgICAgIGpvYkluZm8uaW5uZXJUZXh0ID0gYCR7ZGV0YWlsLmpvYkRldGFpbC5jaGFrcmFTdGFja3N9YDtcclxuICAgIH0gZWxzZSBpZiAoZGV0YWlsLmpvYiA9PT0gJ01DSCcgJiYgZGV0YWlsLmpvYkRldGFpbCkge1xyXG4gICAgICBqb2JJbmZvLmlubmVyVGV4dCA9XHJcbiAgICAgICAgYCR7ZGV0YWlsLmpvYkRldGFpbC5oZWF0fSAoJHtkZXRhaWwuam9iRGV0YWlsLm92ZXJoZWF0TWlsbGlzZWNvbmRzfSkgfCAke2RldGFpbC5qb2JEZXRhaWwuYmF0dGVyeX0gKCR7ZGV0YWlsLmpvYkRldGFpbC5iYXR0ZXJ5TWlsbGlzZWNvbmRzfSkgfCBsYXN0OiAke2RldGFpbC5qb2JEZXRhaWwubGFzdEJhdHRlcnlBbW91bnR9IHwgJHtkZXRhaWwuam9iRGV0YWlsLm92ZXJoZWF0QWN0aXZlLnRvU3RyaW5nKCl9IHwgJHtkZXRhaWwuam9iRGV0YWlsLnJvYm90QWN0aXZlLnRvU3RyaW5nKCl9YDtcclxuICAgIH0gZWxzZSBpZiAoZGV0YWlsLmpvYiA9PT0gJ1NBTScgJiYgZGV0YWlsLmpvYkRldGFpbCkge1xyXG4gICAgICBqb2JJbmZvLmlubmVyVGV4dCA9XHJcbiAgICAgICAgYCR7ZGV0YWlsLmpvYkRldGFpbC5rZW5raX0gfCAke2RldGFpbC5qb2JEZXRhaWwubWVkaXRhdGlvblN0YWNrc30oJHtkZXRhaWwuam9iRGV0YWlsLnNldHN1LnRvU3RyaW5nKCl9LCR7ZGV0YWlsLmpvYkRldGFpbC5nZXRzdS50b1N0cmluZygpfSwke2RldGFpbC5qb2JEZXRhaWwua2EudG9TdHJpbmcoKX0pYDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGpvYkluZm8uaW5uZXJUZXh0ID0gJyc7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb25zdCBwb3MgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncG9zJyk7XHJcbiAgaWYgKHBvcykge1xyXG4gICAgcG9zLmlubmVyVGV4dCA9IGAke2UuZGV0YWlsLnBvcy54LnRvRml4ZWQoMil9LCR7ZS5kZXRhaWwucG9zLnkudG9GaXhlZCgyKX0sJHtcclxuICAgICAgZS5kZXRhaWwucG9zLnoudG9GaXhlZCgyKVxyXG4gICAgfWA7XHJcbiAgfVxyXG4gIGNvbnN0IHJvdGF0aW9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JvdGF0aW9uJyk7XHJcbiAgaWYgKHJvdGF0aW9uKVxyXG4gICAgcm90YXRpb24uaW5uZXJUZXh0ID0gZS5kZXRhaWwucm90YXRpb24udG9TdHJpbmcoKTtcclxuICBjb25zdCBiYWl0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JhaXQnKTtcclxuICBpZiAoYmFpdClcclxuICAgIGJhaXQuaW5uZXJUZXh0ID0gZS5kZXRhaWwuYmFpdC50b1N0cmluZygpO1xyXG59KTtcclxuXHJcbmFkZE92ZXJsYXlMaXN0ZW5lcignRW5taXR5VGFyZ2V0RGF0YScsIChlKSA9PiB7XHJcbiAgY29uc3QgdGFyZ2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhcmdldCcpO1xyXG4gIGlmICh0YXJnZXQpXHJcbiAgICB0YXJnZXQuaW5uZXJUZXh0ID0gZS5UYXJnZXQgPyBlLlRhcmdldC5OYW1lIDogJy0tJztcclxuICBjb25zdCB0aWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGlkJyk7XHJcbiAgaWYgKHRpZClcclxuICAgIHRpZC5pbm5lclRleHQgPSBlLlRhcmdldCA/IGUuVGFyZ2V0LklELnRvU3RyaW5nKDE2KSA6ICcnO1xyXG4gIGNvbnN0IHRkaXN0YW5jZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0ZGlzdGFuY2UnKTtcclxuICBpZiAodGRpc3RhbmNlKVxyXG4gICAgdGRpc3RhbmNlLmlubmVyVGV4dCA9IGUuVGFyZ2V0ID8gZS5UYXJnZXQuRGlzdGFuY2UudG9TdHJpbmcoKSA6ICcnO1xyXG59KTtcclxuXHJcbmFkZE92ZXJsYXlMaXN0ZW5lcignb25HYW1lRXhpc3RzRXZlbnQnLCAoX2UpID0+IHtcclxuICAvLyBjb25zb2xlLmxvZyhcIkdhbWUgZXhpc3RzOiBcIiArIGUuZGV0YWlsLmV4aXN0cyk7XHJcbn0pO1xyXG5cclxuYWRkT3ZlcmxheUxpc3RlbmVyKCdvbkdhbWVBY3RpdmVDaGFuZ2VkRXZlbnQnLCAoX2UpID0+IHtcclxuICAvLyBjb25zb2xlLmxvZyhcIkdhbWUgYWN0aXZlOiBcIiArIGUuZGV0YWlsLmFjdGl2ZSk7XHJcbn0pO1xyXG5cclxuYWRkT3ZlcmxheUxpc3RlbmVyKCdvbkxvZ0V2ZW50JywgKGUpID0+IHtcclxuICBlLmRldGFpbC5sb2dzLmZvckVhY2goKGxvZykgPT4ge1xyXG4gICAgLy8gTWF0Y2ggXCIvZWNobyB0dHM6PHN0dWZmPlwiXHJcbiAgICBjb25zdCByID0gLzAwOjAwMzg6dHRzOiguKikvLmV4ZWMobG9nKTtcclxuICAgIGlmIChyICYmIHJbMV0pIHtcclxuICAgICAgdm9pZCBjYWxsT3ZlcmxheUhhbmRsZXIoe1xyXG4gICAgICAgIGNhbGw6ICdjYWN0Ym90U2F5JyxcclxuICAgICAgICB0ZXh0OiByWzFdLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9KTtcclxufSk7XHJcblxyXG5hZGRPdmVybGF5TGlzdGVuZXIoJ29uVXNlckZpbGVDaGFuZ2VkJywgKGUpID0+IHtcclxuICBjb25zb2xlLmxvZyhgVXNlciBmaWxlICR7ZS5maWxlfSBjaGFuZ2VkIWApO1xyXG59KTtcclxuXHJcbmFkZE92ZXJsYXlMaXN0ZW5lcignRmlsZUNoYW5nZWQnLCAoZSkgPT4ge1xyXG4gIGNvbnNvbGUubG9nKGBGaWxlICR7ZS5maWxlfSBjaGFuZ2VkIWApO1xyXG59KTtcclxuXHJcbnZvaWQgY2FsbE92ZXJsYXlIYW5kbGVyKHsgY2FsbDogJ2NhY3Rib3RSZXF1ZXN0U3RhdGUnIH0pO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9